<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>流形与非流行</title>
      <link href="/posts/467cee4/"/>
      <url>/posts/467cee4/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="流形三角形网格（Manifold-Triangle-Mesh）和非流形网格（Non-Manifold-Mesh）"><a href="#流形三角形网格（Manifold-Triangle-Mesh）和非流形网格（Non-Manifold-Mesh）" class="headerlink" title="流形三角形网格（Manifold Triangle Mesh）和非流形网格（Non-Manifold Mesh）"></a>流形三角形网格（Manifold Triangle Mesh）和非流形网格（Non-Manifold Mesh）</h3><p>流形三角形网格（Manifold Triangle Mesh）和非流形网格（Non-Manifold Mesh）是在计算机图形学和几何处理中常见的两种网格类型。它们具有不同的特征和限制，对于不同的应用领域和算法，选择合适的网格类型是非常重要的。</p><ol><li><p>流形三角形网格：<br>流形三角形网格是一种拓扑上具有连续性和封闭性的网格。它的特征包括：</p><ul><li>每个顶点最多与两个边和两个面相连。</li><li>每个边最多与两个面相连。</li><li>每个面最多与三条边和三个顶点相连。</li><li>网格中不存在孤立的顶点、边或面。</li></ul><p>流形三角形网格常用于表示光滑曲面和可变形物体，它具有良好的几何性质和拓扑特征，适用于各种几何处理算法，如渲染、形状分析和物理模拟等。</p></li><li><p>非流形网格：<br>非流形网格是一种拓扑上不具备连续性和封闭性的网格。它的特征包括：</p><ul><li>顶点、边或面可以具有任意数量的相邻元素。</li><li>存在孤立的顶点、边或面。</li><li>边和面之间的连接关系可以是多对多的。</li></ul><p>非流形网格常用于表示复杂的几何结构，如曲面上的孔洞、尖锐的边缘或非连续的形状。然而，由于其拓扑特性的复杂性，非流形网格在某些算法和应用中可能会导致问题，例如光滑、纹理映射和体积建模等。</p></li></ol><p>对于流形三角形网格和非流形网格，需要根据具体的应用场景和算法需求选择合适的网格类型。流形三角形网格适用于大多数常规几何处理任务，而非流形网格则更适用于具有复杂拓扑结构的特殊情况。在处理非流形网格时，需要特别注意处理拓扑上的不连续性和边界条件。</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解@RequestParam</title>
      <link href="/posts/f43726f7/"/>
      <url>/posts/f43726f7/</url>
      
        <content type="html"><![CDATA[<h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>在Java中，<code>@RequestParam</code> 是一个注解，用于从HTTP请求中获取参数值。它通常用于Spring MVC框架中的控制器方法中，以指定方法参数应该绑定到HTTP请求中的特定参数。</p><p><code>@RequestParam</code> 可以用于处理HTTP请求的查询参数、表单参数或路径参数。它可以应用于方法的参数或方法的参数上的注解。</p><p>下面是一些示例：</p><ol><li>使用默认参数名称：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将尝试从HTTP请求中获取名为 “param” 的查询参数，并将其绑定到方法参数 <code>param</code>。</p><ol start="2"><li>使用自定义参数名称：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam(&quot;customParam&quot;)</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例中，<code>@RequestParam</code> 注解指定了参数的自定义名称 “customParam”，它将从HTTP请求中获取该参数，并将其绑定到方法参数 <code>param</code>。</p><ol start="3"><li>设置默认值：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam(value = &quot;param&quot;, defaultValue = &quot;default&quot;)</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，如果请求中没有名为 “param” 的参数，或者参数的值为空，那么方法参数 <code>param</code> 将被设置为默认值 “default”。</p><ol start="4"><li>必需的参数：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam(required = true)</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>@RequestParam</code> 注解的 <code>required</code> 属性被设置为 <code>true</code>，表示参数是必需的。如果请求中没有提供该参数，将会返回错误。</p><p>总结一下，<code>@RequestParam</code> 注解用于从HTTP请求中获取参数值，并将其绑定到Java方法的参数。它提供了许多选项，可以根据需要配置参数的名称、默认值和是否必需。这样，开发者可以方便地处理HTTP请求中的参数。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cesium面试题</title>
      <link href="/posts/a98e3ede/"/>
      <url>/posts/a98e3ede/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/e0239a75f96830e577eef736ebcad965.png" alt="img"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="Cesium开发面试题"><a href="#Cesium开发面试题" class="headerlink" title="Cesium开发面试题"></a>Cesium开发面试题</h1><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="1、请简要介绍一下Cesium的基本功能。"><a href="#1、请简要介绍一下Cesium的基本功能。" class="headerlink" title="1、请简要介绍一下Cesium的基本功能。"></a>1、请简要介绍一下Cesium的基本功能。</h2><p>答：Cesium是一款3D地球可视化引擎，可以在Web浏览器中显示高度真实感的3D地球场景，包括地形、地表纹理、3D建筑、水域等。它提供多种漫游和导航方式，支持多种地形和影像数据格式，以及3D Tiles、CZML等技术，可以用于实时位置追踪、天文数据显示、地下和空中场景等应用场景。</p><h2 id="2、请解释一下Cesium中的3D-Tiles技术是什么，以及它的作用是什么。"><a href="#2、请解释一下Cesium中的3D-Tiles技术是什么，以及它的作用是什么。" class="headerlink" title="2、请解释一下Cesium中的3D Tiles技术是什么，以及它的作用是什么。"></a>2、请解释一下Cesium中的3D Tiles技术是什么，以及它的作用是什么。</h2><p>  答：3D Tiles是一种用于高效地加载和显示大规模的3D地球数据的技术，可以将复杂的3D数据分层并进行高度优化。Cesium中的3D Tiles技术可以支持大规模的3D地球数据，包括城市、建筑、地形等，提高了数据的加载速度和显示效率。</p><h2 id="3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？"><a href="#3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？" class="headerlink" title="3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？"></a>3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？</h2><p>  答：CZML（Cesium Language）是一种描述和显示动态的地球场景的数据格式，它可以用于描述航班轨迹、气象数据、卫星运行轨迹等。CZML中可以包含实体的位置、速度、方向等信息，以及可视化效果的设置。</p><h2 id="4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。"><a href="#4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。" class="headerlink" title="4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。"></a>4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。</h2><p>  答：ImageryProvider是Cesium中的一个数据提供器，用于提供地图和影像数据。它可以从多种来源获取数据，比如Web Map Service（WMS）、Web Map Tile Service（WMTS）等，并在地球表面上显示出来。通过使用ImageryProvider，开发者可以轻松地获取并显示各种地图和影像数据。</p><h2 id="5、如何加载飞线"><a href="#5、如何加载飞线" class="headerlink" title="5、如何加载飞线"></a>5、如何加载飞线</h2><p>  答：1、创建polyLine实体</p><p>   2、计算带有弧度效果的点集数组作为polyline的positions属性参数</p><h2 id="6、如何设置飞线动效材质"><a href="#6、如何设置飞线动效材质" class="headerlink" title="6、如何设置飞线动效材质"></a>6、如何设置飞线动效材质</h2><p>答：1、创建cesium自定义材质类</p><p>2、创建shader，原理是通过贴图UV移动来实现流光效果</p><h2 id="7、如何在cesium地球上添加柱状图"><a href="#7、如何在cesium地球上添加柱状图" class="headerlink" title="7、如何在cesium地球上添加柱状图"></a>7、如何在cesium地球上添加柱状图</h2><p>答：1、创建entity实体，使用box属性；</p><p>2、dimensions设置长宽；</p><p>3、position设置中心点位置；</p><p>4、heightReference属性设置贴地属性；</p><h2 id="8、如何让柱状图跟随数据变化"><a href="#8、如何让柱状图跟随数据变化" class="headerlink" title="8、如何让柱状图跟随数据变化"></a>8、如何让柱状图跟随数据变化</h2><p>答：1、创建SampledPositionProperty对象</p><p>2、在不同的时间点绑定对应的值</p><p>  将填充好的SampledPositionProperty赋值给dimensions，实现位置随时间的偏移</p><h2 id="9、如何加载天气图的效果"><a href="#9、如何加载天气图的效果" class="headerlink" title="9、如何加载天气图的效果"></a>9、如何加载天气图的效果</h2><p>答：1、使用Wind3D类实现</p><p>实现原理是将nc格式的数据解析之后运用primitive绘制</p><p>​    2、Cesium官网有github的分享案例，需要修改鼠标事件影响该类绘制时的显示隐藏</p><h2 id="10、如何给cesium地球替换表面图层"><a href="#10、如何给cesium地球替换表面图层" class="headerlink" title="10、如何给cesium地球替换表面图层"></a>10、如何给cesium地球替换表面图层</h2><p>答：1、主要是在viewer的imageryLayers地图层级内对单独的layer图层的显示隐藏或者添加与移除，imageryLayers有add与remove方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2、viewer.imageryLayers.addImageryProvider(layer, num);</span><br><span class="line">viewer.imageryLayers.remove(viewer.imageryLayers.get(num), true);</span><br></pre></td></tr></table></figure><p>主要是这两个API<br>    3、注意不同的地图图层加载会有对应的投影方式，比如web墨卡托投影和wgs84</p><h2 id="11、cesium如何进行坐标转换"><a href="#11、cesium如何进行坐标转换" class="headerlink" title="11、cesium如何进行坐标转换"></a>11、cesium如何进行坐标转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：1、//经纬度转屏幕坐标</span><br><span class="line"></span><br><span class="line">LngLatToSceenCoordinates(lng, lat) &#123;</span><br><span class="line"></span><br><span class="line">let cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat);</span><br><span class="line"></span><br><span class="line">let cartesian2 = Cesium.SceneTransforms.wgs84ToWindowCoordinates(</span><br><span class="line"></span><br><span class="line">viewer.scene,</span><br><span class="line"></span><br><span class="line">cartesian3</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">return cartesian2;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">2、 //笛卡尔坐标转经纬度坐标</span><br><span class="line"></span><br><span class="line">Cartesian3ToLngLat(cartesian) &#123;</span><br><span class="line"></span><br><span class="line">let cartographic =</span><br><span class="line"></span><br><span class="line">viewer.scene.globe.ellipsoid.cartesianToCartographic(cartesian);</span><br><span class="line"></span><br><span class="line">let c_height = viewer.camera.positionCartographic.height;</span><br><span class="line"></span><br><span class="line">//将地图坐标（弧度）转为十进制的度数</span><br><span class="line"></span><br><span class="line">let lat_String = Cesium.Math.toDegrees(cartographic.latitude).toFixed(6);</span><br><span class="line"></span><br><span class="line">let log_String = Cesium.Math.toDegrees(cartographic.longitude).toFixed(6);</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line"></span><br><span class="line">parseFloat(log_String),</span><br><span class="line"></span><br><span class="line">parseFloat(lat_String),</span><br><span class="line"></span><br><span class="line">parseFloat(c_height),</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="12、cesium如何实现标记的添加"><a href="#12、cesium如何实现标记的添加" class="headerlink" title="12、cesium如何实现标记的添加"></a>12、cesium如何实现标记的添加</h2><p>  答：1、创建entity实体对象使用billboard对象场景图标挥着使用billboard collection使用primitive创建</p><h2 id="13、cesium如何实现鼠标拾取弹窗功能"><a href="#13、cesium如何实现鼠标拾取弹窗功能" class="headerlink" title="13、cesium如何实现鼠标拾取弹窗功能"></a>13、cesium如何实现鼠标拾取弹窗功能</h2><p>   答：1、创建new Cesium.ScreenSpaceEventHandler(canvas)对象</p><p> 2、注册鼠标点击事件<br>   3、使用let pick &#x3D; viewer.scene.pick(movement.position); 选取当前的entity</p><h2 id="14、如何设置cesium中的抗锯齿方法"><a href="#14、如何设置cesium中的抗锯齿方法" class="headerlink" title="14、如何设置cesium中的抗锯齿方法"></a>14、如何设置cesium中的抗锯齿方法</h2><p>  答：1、使用fxaa方法，效果较差</p><p>  2、使用msaa方法，但需要浏览器支持webGL2的api方法</p><p><img src="https://bcn.135editor.com/files/images/editor_styles/2b4dad3b5ce0324eb63cde4380e4cdfb.gif" alt="img"></p><p><img src="https://image2.135editor.com/cache/remote/aHR0cHM6Ly9tbWJpei5xbG9nby5jbi9tbWJpel9wbmcvdm5UNGhiYUxvWDZIWkQxZXFvRmljVXdwR3RPSklNamNzaWNNVVVZWDRvNHNNMGhQQ2RQRUtTV0pIYkdQb2MyVWJQaWNGVlNTM2ljU3hZRDdoOTdNUHYwSW9BLzA/d3hfZm10PXBuZw==" alt="img"></p><p><img src="https://bcn.135editor.com/files/images/editor_styles/8a370d08cb8dee16148088fd86f39e16.png" alt="img"></p><p><img src="https://bexp.135editor.com/files/users/498/4980660/202302/k5PHuh8T_I5qb.jpg?auth_key=1677427199-0-0-d90c72020ea7995dbf533d91bb976f8c" alt="qrcode_for_gh_e879ec750214_258.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cesium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux项目部署详细步骤</title>
      <link href="/posts/d594835b/"/>
      <url>/posts/d594835b/</url>
      
        <content type="html"><![CDATA[<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>说明：如果已经安装过相关工具就忽略</p><h3 id="1安装JAVA-运行环境"><a href="#1安装JAVA-运行环境" class="headerlink" title="1安装JAVA 运行环境"></a>1安装JAVA 运行环境</h3><p>第一步：上传或下载安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /usr/local</span><br></pre></td></tr></table></figure><p>jdk-8u152-linux-x64.tar.gz</p><p>第二步：解压安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>第三步：建立软连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/jdk1.8.0_152/  /usr/local/jdk </span><br></pre></td></tr></table></figure><p>第四步：修改环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/jdk</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过命令source /etc/profile让profile文件立即生效</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>第五步、测试是否安装成功</p><p>使用java -version，出现版本为java version “1.8.0_152”</p><h3 id="2安装maven"><a href="#2安装maven" class="headerlink" title="2安装maven"></a>2安装maven</h3><p>第一步：上传或下载安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /usr/local</span><br></pre></td></tr></table></figure><p>apache-maven-3.6.1-bin.tar.gz</p><p>第二步：解压安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar  -zxvf  apache-maven-3.6.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p>第三步：建立软连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln  -s  /usr/local/apache-maven-3.6.1/  /usr/local/maven</span><br></pre></td></tr></table></figure><p>第四步：修改环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export MAVEN_HOME=/usr/local/maven</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过命令source /etc/profile让profile文件立即生效</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>第五步、测试是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn –v</span><br></pre></td></tr></table></figure><h3 id="3安装docker"><a href="#3安装docker" class="headerlink" title="3安装docker"></a>3安装docker</h3><p>环境安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>第一步：安装必要的一些系统工具</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br></pre></td></tr></table></figure><p>第二步：添加软件源信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>第三步：更新并安装Docker-CE</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>第四步：开启Docker服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>第五步：测试是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v </span><br></pre></td></tr></table></figure><p>第六步：配置镜像加速器</p><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://ldu6wrsf.mirror.aliyuncs.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4安装mysql"><a href="#4安装mysql" class="headerlink" title="4安装mysql"></a>4安装mysql</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql --restart=always -v /home/ljaer/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7 </span><br></pre></td></tr></table></figure><p>第三步：测试mysql</p><p>进入容器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><p>登录mysql：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>如果顺利进入，安装成功</p><h3 id="5安装rabbitmq"><a href="#5安装rabbitmq" class="headerlink" title="5安装rabbitmq"></a>5安装rabbitmq</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --restart=always --name rabbitmq rabbitmq:management</span><br></pre></td></tr></table></figure><p>第三步：安装延迟队列插件</p><ol><li><p>首先下载rabbitmq_delayed_message_exchange-3.9.0.ez文件上传到RabbitMQ所在服务器，下载地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p></li><li><p>切换到插件所在目录，执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp rabbitmq_delayed_message_exchange-3.9.0.ez rabbitmq:/plugins </span><br></pre></td></tr></table></figure><p>命令，将刚插件拷贝到容器内plugins目录下</p></li><li><p>执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq /bin/bash </span><br></pre></td></tr></table></figure><p>命令进入到容器内部，并 cd plugins 进入plugins目录</p></li><li><p>执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l|grep delay</span><br></pre></td></tr></table></figure><p>  命令查看插件是否copy成功</p></li><li><p>在容器内plugins目录下，执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>  命令启用插件</p></li><li><p>exit命令退出RabbitMQ容器内部，然后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart rabbitmq </span><br></pre></td></tr></table></figure><p>命令重启RabbitMQ容器</p></li></ol><h3 id="6安装redis"><a href="#6安装redis" class="headerlink" title="6安装redis"></a>6安装redis</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379  --restart=always redis:latest redis-server</span><br></pre></td></tr></table></figure><h3 id="7安装nacos"><a href="#7安装nacos" class="headerlink" title="7安装nacos"></a>7安装nacos</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --env MODE=standalone --name nacos --restart=always -d -p 8848:8848 -e JVM_XMS=512m -e JVM_XMX=512m nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure><h3 id="8安装sentinel"><a href="#8安装sentinel" class="headerlink" title="8安装sentinel"></a>8安装sentinel</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull bladex/sentinel-dashboard</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name sentinel-dashboard --restart=always -p 8858:8858 -d bladex/sentinel-dashboard:latest  </span><br></pre></td></tr></table></figure><h3 id="9安装elasticsearch"><a href="#9安装elasticsearch" class="headerlink" title="9安装elasticsearch"></a>9安装elasticsearch</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.8.0</span><br></pre></td></tr></table></figure><p>第二步：启动</p><p>需要建立：两个文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/plugins</span><br><span class="line"></span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br></pre></td></tr></table></figure><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 --name elasticsearch --restart=always \-e &quot;discovery.type=single-node&quot; \-e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; \-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \-d elasticsearch:7.8.0</span><br></pre></td></tr></table></figure><p>第三步：安装中文分词器</p><ol><li><p>下载elasticsearch-analysis-ik-7.8.0.zip</p></li><li><p>上传解压：unzip elasticsearch-analysis-ik-7.8.0.zip -d ik-analyzer</p></li><li><p>上传到es容器：docker cp .&#x2F;ik-analyzer a24eb9941759:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins</p></li><li><p>重启es：docker restart a24eb9941759</p></li></ol><p>a24eb9941759：表示容器ID 运行时，需要改成自己的容器ID</p><h3 id="10-安装kibana"><a href="#10-安装kibana" class="headerlink" title="10 安装kibana"></a>10 安装kibana</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.8.0</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name kibana --restart=always -e ELASTICSEARCH_URL=http://192.168.112.165:9200 -p 5601:5601 -d kibana:7.8.0</span><br></pre></td></tr></table></figure><p>进入容器修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 1e12f8dd3efd /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line"></span><br><span class="line">vi kibana.yml</span><br><span class="line"></span><br><span class="line">elasticsearch.hosts: [ &quot;http://192.168.200.129:9200&quot; ]</span><br><span class="line"></span><br><span class="line">docker restart 1dc0f78d78ad 重启kibana ！</span><br></pre></td></tr></table></figure><p>测试：安装分词词库是否可以使用！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /.kibana/_analyze</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> &quot;text&quot;: &quot;我是中国人&quot;,</span><br><span class="line"></span><br><span class="line"> &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11安装zipkin"><a href="#11安装zipkin" class="headerlink" title="11安装zipkin"></a>11安装zipkin</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull openzipkin/zipkin</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name zipkin --restart=always -d -p 9411:9411 openzipkin/zipkin </span><br></pre></td></tr></table></figure><h3 id="12安装minio"><a href="#12安装minio" class="headerlink" title="12安装minio"></a>12安装minio</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \ -p 9000:9000 \ -p 9001:9001 \ --name minio \ -d --restart=always \ -e &quot;MINIO_ROOT_USER=admin&quot; \ -e &quot;MINIO_ROOT_PASSWORD=admin123456&quot; \ -v /home/data:/data \ -v /home/config:/root/.minio \ minio/minio server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://ip:9000/minio/login%EF%BC%8C">http://IP:9000/minio/login，</a></p><h3 id="13-安装logstash"><a href="#13-安装logstash" class="headerlink" title="13 安装logstash"></a>13 安装logstash</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull logstash:7.8.0</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name logstash -p 5044:5044 --restart=always --link elasticsearch:es -v /mydata/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf -d logstash:7.8.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--net root_default \</span><br></pre></td></tr></table></figure><table><thead><tr><th># 需要提前在linux服务器上环境 &#x2F;mydata&#x2F;logstash&#x2F;logstash.conflogstash.confinput { tcp {mode &#x3D;&gt; “server”host &#x3D;&gt; “0.0.0.0”port &#x3D;&gt; 5044codec &#x3D;&gt; json_lines }}filter{ }output { elasticsearch {hosts &#x3D;&gt; “192.168.112.165:9200”index &#x3D;&gt; “gmall-%{+YYYY.MM.dd}” }}</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>停止所有的容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>删除所有的容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>#删除所有的镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><p>问题：</p><p>Docker容器做端口映射报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint lamp3 (46b7917c940f7358948e55ec2df69a4dec2c6c7071b002bd374e8dbf0d40022c): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 86 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.</span><br></pre></td></tr></table></figure><p>解决方法</p><p>docker服务启动时定义的自定义链DOCKER被清除</p><p>重启即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多边形</title>
      <link href="/posts/undefined/"/>
      <url>/posts/undefined/</url>
      
        <content type="html"><![CDATA[<h3 id="Voronoi-多边形"><a href="#Voronoi-多边形" class="headerlink" title="Voronoi 多边形"></a>Voronoi 多边形</h3><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230708212920053.png" alt="image-20230708212920053"></p><p>Voronoi 多边形，也称为 Voronoi 图或 Voronoi 分割，是一种空间分析和几何计算方法，用于将平面或空间划分为不同区域，每个区域都与给定一组点最近邻。这些区域被称为 Voronoi 多边形或 Voronoi 区域，每个多边形由与其对应的点作为最近邻点。</p><p>Voronoi 多边形的生成过程基于以下原则：给定一组点，每个点的 Voronoi 区域包含所有离该点最近的点，并且这些点之间的边界形成多边形。Voronoi 多边形的边界由平分相邻点之间的直线或曲线段组成，这些直线或曲线段是两个点之间的等距离线，也称为 Voronoi 边。因此，Voronoi 多边形的边界是相邻点之间的中垂线。</p><p>Voronoi 多边形在各种领域中有广泛应用，包括计算机图形学、计算机视觉、地理信息系统（GIS）、模式识别等。以下是一些应用 Voronoi 多边形的示例：</p><ol><li><p>空间分析：Voronoi 多边形可用于将地理空间划分为不同的区域，每个区域都由最近邻点决定。这在地理学、城市规划和环境分析中具有重要作用，可以用于确定服务设施的服务范围、确定地理区域的边界等。</p></li><li><p>面积计算：通过计算 Voronoi 多边形的面积，可以了解每个点的影响范围或区域的大小。这在生态学、资源管理和人口统计学中很有用。</p></li><li><p>最近邻搜索：Voronoi 多边形可用于确定给定点的最近邻点。这在图像处理、模式识别和计算机视觉中经常使用，例如图像中的特征匹配、对象识别等。</p></li><li><p>网格生成：Voronoi 多边形可以用作生成网格的方法之一。通过将点集表示为 Voronoi 图，可以生成规则且适应性良好的网格，这在数值计算和有限元分析中很有用。</p></li></ol><p>总之，Voronoi 多边形是一种强大的几何计算工具，可用于空间分析、最近邻搜索、面积计算和网格生成等应用领域。它提供了一种有效的方法来划分空间并了解点之间的关系，为许多问题的解决提供了有力支持。</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>convex</title>
      <link href="/posts/e911cef5/"/>
      <url>/posts/e911cef5/</url>
      
        <content type="html"><![CDATA[<p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230708212656757.png" alt="image-20230708212656757"></p><h3 id="平面地图综合中的convex-hull-差分组合"><a href="#平面地图综合中的convex-hull-差分组合" class="headerlink" title="平面地图综合中的convex hull+差分组合"></a>平面地图综合中的convex hull+差分组合</h3><p>平面地图综合中的 “convex hull + 差分组合” 是一种常用的地理信息处理方法，用于合并多个重叠的平面地图数据集，以生成一个较大范围的一致地图。</p><p>首先，让我们解释一下 “convex hull” 和 “差分组合” 的含义：</p><ol><li><p>Convex Hull（凸包）：凸包是一个几何概念，用于描述一个点集的最小凸多边形。对于给定的点集，凸包是包围这些点的最小凸形状，即没有凹陷的形状。在地图综合中，凸包可以用于找到每个地图数据集的边界。</p></li><li><p>差分组合：差分组合是指将两个或多个数据集进行差分操作，以便将它们合并成一个单一的数据集。在地图综合中，差分组合用于合并多个地图数据集，消除重叠和冗余部分。</p></li></ol><p>现在我们来详细介绍 “convex hull + 差分组合” 的过程：</p><ol><li><p>Convex Hull（凸包）：对于每个地图数据集，首先计算该数据集中所有点的凸包。这可以使用凸包算法，例如Graham扫描算法或Jarvis步进算法。凸包的边界定义了该数据集的外围形状。</p></li><li><p>差分操作：通过对每个地图数据集的凸包进行差分操作，可以消除重叠和冗余的部分。差分操作可以通过将边界相交的部分进行裁剪来实现，从而确保每个数据集的边界只包含在该数据集内的部分。</p></li><li><p>组合数据集：将经过差分操作后的每个数据集的边界进行组合，以生成一个新的、一致的地图数据集。这可以通过将每个数据集的边界多边形进行合并或拼接来实现。最终的合并结果将是一个不重叠且连续的边界，代表了整个地图范围。</p></li></ol><p>这种 “convex hull + 差分组合” 的方法在平面地图综合中很有用，因为它能够合并多个重叠的地图数据集，同时消除重叠和冗余的部分。通过计算凸包和执行差分操作，可以获得一个一致且完整的地图，而不会丢失任何细节或引入不一致的边界。</p><p>需要注意的是，实际的实现可能会涉及更复杂的步骤和算法，具体取决于地图数据的类型和处理需求。此外，该方法还可能需要处理边界相交的情况，以确保生成的地图数据集</p><p>是连续且完整的。因此，在实际应用中，可能需要考虑处理重叠、边界修复和边界连接等问题，以获得高质量的地图综合结果。</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八叉树结构</title>
      <link href="/posts/f4dabd3f/"/>
      <url>/posts/f4dabd3f/</url>
      
        <content type="html"><![CDATA[<h3 id="八叉树结构"><a href="#八叉树结构" class="headerlink" title="八叉树结构"></a>八叉树结构</h3><p>八叉树（Octree）是一种常用的树型数据结构，它是二叉树在三维空间中的扩展。八叉树被广泛应用于计算机图形学、空间分区和体积渲染等领域，用于高效地表示和处理三维空间的数据。</p><p>八叉树的基本思想是将三维空间递归地划分为八个等大小的子空间，每个子空间称为一个八叉树节点（Octant）。这种划分方式类似于将立方体分成八个等大小的小立方体。每个节点可以有三种可能的状态：</p><ol><li>叶节点（Leaf Node）：表示当前空间内存在数据或对象，不再继续划分。</li><li>空节点（Empty Node）：表示当前空间内不存在数据或对象，不再继续划分。</li><li>分支节点（Branch Node）：表示当前空间内可能存在数据或对象，需要进一步划分。</li></ol><p>八叉树的构建过程从一个包含所有数据的根节点开始，根据数据的分布情况，逐层划分空间直到满足停止条件。停止条件可以是树的深度达到预定的最大深度，或者节点内的数据数量达到某个阈值。</p><p>八叉树的用法主要有以下几个方面：</p><ol><li><p>空间分区：八叉树可以将三维空间划分为多个小空间，用于高效地管理和查询空间中的数据。在计算机图形学中，八叉树常被用来表示场景中的物体，以便进行快速的碰撞检测和可视化剔除。</p></li><li><p>数据压缩：八叉树可以用来压缩表示稀疏的三维数据。对于只在部分空间中存在数据的情况，八叉树可以有效地存储和表示这些数据，减少存储空间和访问成本。</p></li><li><p>体积渲染：在体积渲染（Volume Rendering）中，八叉树被广泛应用于表示和处理体数据。通过将体数据划分为八叉树节点，可以高效地实现体积数据的可视化和交互式浏览。</p></li><li><p>点云处理：对于三维点云数据，八叉树可以用于加速点云的搜索和查询操作。通过将点云数据划分为八叉树节点，可以快速地找到与给定查询点最近的点或区域。</p></li></ol><p>总的来说，八叉树是一种灵活且高效的数据结构，适用于处理和</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前馈神经网路</title>
      <link href="/posts/169d769d/"/>
      <url>/posts/169d769d/</url>
      
        <content type="html"><![CDATA[<h1 id="前馈神经网路"><a href="#前馈神经网路" class="headerlink" title="前馈神经网路"></a>前馈神经网路</h1><h2 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h2><p><strong>前馈神经网络（Feedforward Neural Network，简称FNN）</strong>是一种基本的神经网络模型，它最早由美国心理学家Rosenblatt在1958年提出，是最早的一种神经网络模型。FNN的每个神经元都是单向连接的，信号只能从输入层流向输出层，不存在反馈（recurrent）的过程，因此也被称为“无记忆神经网络”。</p><p>FNN由输入层、隐藏层和输出层构成，其中输入层接收外部输入，输出层输出结果，而隐藏层则负责处理输入层的信息，提取出特征并将其传递给输出层。隐藏层通常包含多个神经元，每个神经元都连接着上一层的所有神经元和下一层的所有神经元。FNN的输出是根据输入与每个神经元之间的连接权值进行计算得出的。</p><p>FNN的训练过程通常是基于反向传播算法（Back Propagation，简称BP算法），该算法利用梯度下降法对网络参数进行调整，使得网络的输出结果能够逐渐逼近期望的输出结果。BP算法的基本思想是将误差逐层反向传播，并根据误差值对网络参数进行调整，以达到误差最小化的目的。在实际应用中，常常需要对神经网络进行大量的训练，以提高网络的泛化能力。</p><p>FNN在模式识别、数据挖掘、自然语言处理等领域中有广泛的应用，它能够有效地处理多维度、非线性和复杂的数据，具有良好的分类和预测性能。同时，FNN也具有一定的适应性，能够适应不同的数据类型和数据规模，并且具有良好的可扩展性，可以通过增加神经元和层数来提高网络的性能。</p><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2><p>目标：近似一些未知的理想函数</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160313002.png" alt="image-20230325160313002"></p><p>理想分类器：<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160616559.png" alt="image-20230325160616559"></p><p>前馈网络：定义映射：<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160644995.png" alt="image-20230325160644995"></p><p>从可用的样本中学习参数<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160727626.png" alt="image-20230325160727626"></p><p>获得f*地较好的近似</p><p>信息流从输入开始贵，经过中间计算（即函数映射），生成类别</p><p>没有反馈连接（循环网络）</p><h2 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h2><p>函数f是许多不同函数的组合，例如：<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325161151241.png" alt="image-20230325161151241"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325161207536.png" alt="image-20230325161207536"></p><ul><li><p><input checked="" disabled="" type="checkbox"> 函数结构可以用有向无环图来描述（因此称为前馈网络）；</p></li><li><p><input checked="" disabled="" type="checkbox"> f（1）是第一层f（2）是第二层，以此类推；</p></li><li><p><input checked="" disabled="" type="checkbox"> 深度是函数组合链中最大的i</p></li><li><p><input checked="" disabled="" type="checkbox"> 最后一层称为输出层</p></li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325202045174.png" alt="image-20230325202045174"></p><h2 id="4、线性模型"><a href="#4、线性模型" class="headerlink" title="4、线性模型"></a>4、线性模型</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325202418699.png" alt="image-20230325202418699"></p><h2 id="5、设计决策"><a href="#5、设计决策" class="headerlink" title="5、设计决策"></a>5、设计决策</h2><p>1、需要选择优化器、损失函数和输出形式</p><p>2、选择激活函数</p><p>3、机构设计（网络层数等）</p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向传播算法</title>
      <link href="/posts/437097cd/"/>
      <url>/posts/437097cd/</url>
      
        <content type="html"><![CDATA[<h1 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>反向传播算法是一种用于训练人工神经网络的优化算法。它利用梯度下降法来最小化神经网络的损失函数，并更新网络参数以提高模型的准确性。下面是反向传播算法的详细介绍。</p><p>反向传播算法的基本原理是利用链式法则（chain rule）来计算损失函数相对于每个网络参数的梯度。该算法从输出层开始，计算每个参数的梯度，并向后逐层传播，直到达到输入层。在每一层中，算法通过将该层的梯度与下一层的梯度相乘来计算该层的梯度。这个过程反向传播了误差，因此称为反向传播算法。</p><p>反向传播算法的步骤如下：</p><p>前向传播：对于给定的输入样本，计算神经网络的输出结果。</p><p>计算误差：将神经网络的输出结果与真实结果进行比较，并计算误差。误差通常使用损失函数（例如均方误差）来表示。</p><p>反向传播误差：从输出层开始，计算每个参数的梯度，并向后逐层传播，直到达到输入层。</p><p>更新参数：使用梯度下降法来更新神经网络的参数，以最小化损失函数。梯度下降法的目标是沿着梯度的相反方向更新参数，以使损失函数最小化。</p><p>重复步骤1-4，直到达到停止条件，例如达到最大迭代次数或达到期望的训练误差。</p><p>反向传播算法的优点是它可以处理复杂的非线性模型，并且可以使用梯度下降法快速优化模型参数。然而，该算法也存在一些缺点，例如容易陷入局部最优解，对初始权重值和学习率等参数敏感，以及可能存在梯度消失或爆炸的问题。</p><p>为了克服这些问题，研究人员已经提出了许多改进的反向传播算法，例如随机梯度下降法（SGD）、动量优化法（Momentum）、自适应学习率优化法（Adagrad、Adadelta、Adam等）等。这些算法使得神经网络的训练更加稳定和高效。</p><h2 id="2、如何学习权值"><a href="#2、如何学习权值" class="headerlink" title="2、如何学习权值"></a>2、如何学习权值</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326142148946.png" alt="image-20230326142148946"></p><p>1、初步想法：随机扰动一个权重，看看它是否提高了性能，而后保存更改</p><p>2、非常低效：对于一个权重的改变，需要在样本集上进行多次传递</p><p>3、其他想法：同时扰动所有权重，并将性能的提高与权重的变化联系起来</p><p>4、非常难以实现</p><p>5、所以：只扰动激活值（因为他门数量较少）但同样低效</p><h2 id="3、反向传播"><a href="#3、反向传播" class="headerlink" title="3、反向传播"></a>3、反向传播</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326142734973.png" alt="image-20230326142734973"></p><p>1、前向传播：接受输入x，通过中间阶段，获得输出y</p><p>2、训练结算：利用y计算标量损失</p><p>3、反向传播允许信息从损失函数反向流动来计算梯度</p><p>4、从训练数据来看，我们不知道隐藏的单元效果</p><p>5、但是，当我们改版一个隐藏的激活时，我们可以得到误差传播的速度</p><p>6、使用误差导数，也称之为hidden activites</p><p>7、每个隐藏的单元可以影响许多输出单元</p><p>8、单独的误差影响-&gt;合并这些影响</p><p>9、可以有效地计算隐藏单元的误差导数（一旦我们有了隐藏激活的误差导致，就很容易得到权重的误差导数）</p><h2 id="4、示例"><a href="#4、示例" class="headerlink" title="4、示例"></a>4、示例</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326143902055.png" alt="image-20230326143902055"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326144435509.png" alt="image-20230326144435509"></p><h2 id="5、多维输出"><a href="#5、多维输出" class="headerlink" title="5、多维输出"></a>5、多维输出</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326145051267.png" alt="image-20230326145051267"></p><h2 id="6、实践"><a href="#6、实践" class="headerlink" title="6、实践"></a>6、实践</h2><ol><li>由上面的推导过程可以看到，反向传播就i是不断地利用求导的链式法则进行展开的过程；</li><li>这样的过程并不复杂，但是实际网络规模个很大的情况下非常繁琐，需要细心操作</li><li>常用的深度学习框架（Pytorch、Tensorflow）中均不需要我们手动编码进行反向传播</li><li>只要我们将前向传播的Tensor流动路径定义清楚，框架会自动帮助我们计算梯度并反传更新权值；</li><li>我们只需要关心损失函数的定义，网络框架的搭建等等更加宏观的内容</li><li>需要保证Tensor流图中的每一个Tensor均可以进行反向传播（例如Pytorch中需要关注requires——grade是否为true）</li></ol><h2 id="7、随机梯度下降"><a href="#7、随机梯度下降" class="headerlink" title="7、随机梯度下降"></a>7、随机梯度下降</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326150031055.png" alt="image-20230326150031055"></p><h2 id="8、Mini-batch随机梯度下降"><a href="#8、Mini-batch随机梯度下降" class="headerlink" title="8、Mini-batch随机梯度下降"></a>8、Mini-batch随机梯度下降</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326150113608.png" alt="image-20230326150113608"></p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法2</title>
      <link href="/posts/ba945d0d/"/>
      <url>/posts/ba945d0d/</url>
      
        <content type="html"><![CDATA[<h1 id="一-基础算法"><a href="#一-基础算法" class="headerlink" title="一. 基础算法"></a>一. 基础算法</h1><h2 id="1-常见查找算法"><a href="#1-常见查找算法" class="headerlink" title="1. 常见查找算法"></a>1. 常见查找算法</h2><p>查找算法是一种在数据集中寻找特定数据项的方法。通常，数据集是在计算机程序中存储的，例如数组、链表或散列表。在编写程序时，查找算法是非常重要的，它有助于快速找到所需的数据。在本文中，我们将介绍一些基本的查找算法及其特点。</p><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><p>线性查找也称为顺序查找，是一种最简单的查找算法。在这种算法中，我们从数据集的开头开始，逐个比较每个数据项，以寻找要查找的数据。如果我们找到了目标数据，查找过程就结束了。如果我们到达数据集的末尾，仍然找不到目标数据，则可以认为它不存在于数据集中。</p><p>线性查找的时间复杂度是O(n)，其中n是数据集的大小。因此，它在大型数据集中可能会很慢。然而，在小型数据集中，它仍然是一种非常有用的算法。</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找也称为折半查找，是一种更快速的查找算法。但前提是，数据集必须已经排序。在二分查找中，我们取数据集的中间值，然后将目标与中间值进行比较。如果目标小于中间值，则在左侧子集中继续查找；如果目标大于中间值，则在右侧子集中继续查找。每次比较都会缩小要搜索的数据集的大小。</p><p>二分查找的时间复杂度是O(log n)，其中n是数据集的大小。这种算法在大型数据集中非常有效，但在小型数据集中可能并不是最快的选择。</p><h3 id="哈希表查找"><a href="#哈希表查找" class="headerlink" title="哈希表查找"></a>哈希表查找</h3><p>哈希表查找也称为散列表查找，是另一种常见的查找算法。它利用哈希函数将数据项映射到散列表中的位置。在查找过程中，我们只需通过哈希函数计算目标数据的位置，然后检查该位置是否包含目标数据。</p><p>哈希表查找的时间复杂度是O(1)。这使得它成为大型数据集中最快的查找算法之一。但是，哈希表查找的效率取决于哈希函数的质量。如果两个数据项映射到相同的位置，就会发生哈希冲突，这可能会导致性能下降。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在编写程序时，我们需要选择适合数据集大小和其他要求的最佳查找算法。例如，如果数据集很小，则线性查找可能是最快的选择；如果数据集已经排序，则二分查找是非常有用的。然而，在大型数据集中，哈希表查找通常是最好的选择。了解不同类型的查找算法及其特点可以帮助我们在编写程序时做出明智的选择。</p><h2 id="2-高效查找相关数据结构"><a href="#2-高效查找相关数据结构" class="headerlink" title="2. 高效查找相关数据结构"></a>2. 高效查找相关数据结构</h2><p>不管是之前学过的数组、链表、队列、还是栈，这些线性结构中，如果想在其中查找一个元素，效率是比较慢的，只有$O(N)$，因此如果你的需求是实现数据的快速查找，那么就需要<strong>新的数据结构</strong>支持。</p><p>还记得最先介绍的那个二分查找算法吗？它的查找效率能够达到 $O(\log{N})$，是不是还不错？不过呢，它需要对数组事先排好序，而排序的成本是比较高的。那么有没有一个折中的办法呢？有，那就是接下来要给大家介绍的<strong>二叉搜索树</strong>，它插入元素后，自然就是排好序的，接下来的查询也自然而然可以应用二分查找算法进行高效搜索。</p><h3 id="1-二叉搜索树"><a href="#1-二叉搜索树" class="headerlink" title="1) 二叉搜索树"></a>1) 二叉搜索树</h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><blockquote><p>二叉搜索树最早是由Bernoulli兄弟在18世纪中提出的，但是真正推广和应用该数据结构的是1960年代的D.L. Gries。他的著作《The Science of Programming》中详细介绍了二叉搜索树的实现和应用。</p><p>在计算机科学的发展中，二叉搜索树成为了一种非常基础的数据结构，被广泛应用在各种领域，包括搜索、排序、数据库索引等。随着计算机算力的提升和对数据结构的深入研究，二叉搜索树也不断被优化和扩展，例如AVL树、红黑树等。</p></blockquote><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>二叉搜索树（也称二叉排序树）是符合下面特征的二叉树：</p><ol><li>树节点增加 key 属性，用来比较谁大谁小，key 不可以重复</li><li>对于任意一个树节点，它的 key 比左子树的 key 都大，同时也比右子树的 key 都小，例如下图所示</li></ol><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228090412983.png" alt="image-20230228090412983"></p><p>轻易看出要查找 7 （从根开始）自然就可应用二分查找算法，只需三次比较</p><ul><li>与 4 比，较之大，向右找</li><li>与 6 比，较之大，继续向右找</li><li>与 7 比，找到</li></ul><p>查找的时间复杂度与<strong>树高</strong>相关，插入、删除也是如此。</p><ul><li>如果这棵树长得还不赖（左右平衡）上图，那么时间复杂度均是 $O(\log{N})$</li><li>当然，这棵树如果长得丑（左右高度相差过大）下图，那么这时是最糟的情况，时间复杂度是 $O(N)$</li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228091405293.png" alt="image-20230228091405293"></p><blockquote><p>注：</p><ul><li>二叉搜索树 - 英文 binary search tree，简称 BST</li><li>二叉排序树 - 英文 binary ordered tree 或 binary sorted tree</li></ul></blockquote><h4 id="定义节点"><a href="#定义节点" class="headerlink" title="定义节点"></a>定义节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BSTNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> key; <span class="comment">// 若希望任意类型作为 key, 则后续可以将其设计为 Comparable 接口</span></span><br><span class="line">    Object value;</span><br><span class="line">    BSTNode left;</span><br><span class="line">    BSTNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(<span class="type">int</span> key, Object value, BSTNode left, BSTNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doGet(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">doGet</span><span class="params">(BSTNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 没找到</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(node.left, key); <span class="comment">// 向左找</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(node.right, key); <span class="comment">// 向右找</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node.value; <span class="comment">// 找到了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h4><p>如果希望让除 int 外更多的类型能够作为 key，一种方式是 key 必须实现 Comparable 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BSTTree2</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BSTNode</span>&lt;T&gt; &#123;</span><br><span class="line">        T key; <span class="comment">// 若希望任意类型作为 key, 则后续可以将其设计为 Comparable 接口</span></span><br><span class="line">        Object value;</span><br><span class="line">        BSTNode&lt;T&gt; left;</span><br><span class="line">        BSTNode&lt;T&gt; right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(T key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(T key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(T key, Object value, BSTNode&lt;T&gt; left, BSTNode&lt;T&gt; right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BSTNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">doGet</span><span class="params">(BSTNode&lt;T&gt; node, T key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> node.key.compareTo(key);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doGet(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doGet(node.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种做法不要求 key 实现 Comparable 接口，而是在构造 Tree 时把比较规则作为 Comparator 传入，将来比较 key 大小时都调用此 Comparator 进行比较，这种做法可以参考 Java 中的 java.util.TreeMap</p><h4 id="最小"><a href="#最小" class="headerlink" title="最小"></a>最小</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doMin(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doMin</span><span class="params">(BSTNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左边已走到头</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doMin(node.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="comment">// 左边未走到头</span></span><br><span class="line">    <span class="keyword">while</span> (p.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最大"><a href="#最大" class="headerlink" title="最大"></a>最大</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">max</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doMax(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doMax</span><span class="params">(BSTNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 右边已走到头</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doMin(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">max</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="comment">// 右边未走到头</span></span><br><span class="line">    <span class="keyword">while</span> (p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    root = doPut(root, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BSTNode <span class="title function_">doPut</span><span class="params">(BSTNode node, <span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doPut(node.left, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        node.right = doPut(node.right, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若找到 key，走 else 更新找到节点的值</li><li>若没找到 key，走第一个 if，创建并返回新节点<ul><li>返回的新节点，作为上次递归时 node 的左孩子或右孩子</li><li>缺点是，会有很多不必要的赋值操作</li></ul></li></ul><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        parent = node;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 1. key 存在则更新</span></span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. key 不存在则新增</span></span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; parent.key) &#123;</span><br><span class="line">        parent.left = <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前驱后继"><a href="#前驱后继" class="headerlink" title="前驱后继"></a>前驱后继</h4><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228144422128.png" alt="image-20230228144422128"></p><p>一个节点的前驱（前任）节点是指比它小的节点中，最大的那个</p><p>一个节点的后继（后任）节点是指比它大的节点中，最小的那个</p><p>例如上图中</p><ul><li>1 没有前驱，后继是 2</li><li>2 前驱是 1，后继是 3</li><li>3 前驱是 2，后继是 4</li><li>…</li></ul><p>简单的办法是中序遍历，即可获得排序结果，此时很容易找到前驱后继</p><p>要效率更高，需要研究一下规律，<strong>找前驱</strong>分成 2 种情况：</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228144422128.png" alt="image-20230228144422128"></p><ol><li>节点有左子树，此时前驱节点就是左子树的最大值，图中属于这种情况的有<ul><li>2 的前驱是1</li><li>4 的前驱是 3</li><li>6 的前驱是 5</li><li>7 的前驱是 6</li></ul></li><li>节点没有左子树，若离它最近的祖先自从左而来，此祖先即为前驱，如<ul><li>3 的祖先 2 自左而来，前驱 2</li><li>5 的祖先 4 自左而来，前驱 4</li><li>8 的祖先 7 自左而来，前驱 7</li><li>1 没有这样的祖先，前驱 null</li></ul></li></ol><p><strong>找后继</strong>也分成 2 种情况</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228152715296.png" alt="image-20230228152715296"></p><ol><li>节点有右子树，此时后继节点即为右子树的最小值，如<ul><li>2 的后继 3</li><li>3 的后继 4</li><li>5 的后继 6</li><li>7 的后继 8</li></ul></li><li>节点没有右子树，若离它最近的祖先自从右而来，此祖先即为后继，如<ul><li>1 的祖先 2 自右而来，后继 2</li><li>4 的祖先 5 自右而来，后继 5</li><li>6 的祖先 7 自右而来，后继 7</li><li>8 没有这样的祖先，后继 null</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">predecessor</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">ancestorFromLeft</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">            ancestorFromLeft = p;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况1 - 有左孩子</span></span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> max(p.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况2 - 有祖先自左而来</span></span><br><span class="line">    <span class="keyword">return</span> ancestorFromLeft != <span class="literal">null</span> ? ancestorFromLeft.value : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">successor</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">ancestorFromRight</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">            ancestorFromRight = p;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况1 - 有右孩子</span></span><br><span class="line">    <span class="keyword">if</span> (p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> min(p.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况2 - 有祖先自右而来</span></span><br><span class="line">    <span class="keyword">return</span> ancestorFromRight != <span class="literal">null</span> ? ancestorFromRight.value : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>要删除某节点（称为 D），必须先找到被删除节点的父节点，这里称为 Parent</p><ol><li>删除节点没有左孩子，将右孩子托孤给 Parent</li><li>删除节点没有右孩子，将左孩子托孤给 Parent</li><li>删除节点左右孩子都没有，已经被涵盖在情况1、情况2 当中，把 null 托孤给 Parent</li><li>删除节点左右孩子都有，可以将它的后继节点（称为 S）托孤给 Parent，设 S 的父亲为 SP，又分两种情况<ol><li>SP 就是被删除节点，此时 D 与 S 紧邻，只需将 S 托孤给 Parent</li><li>SP 不是被删除节点，此时 D 与 S 不相邻，此时需要将 S 的后代托孤给 SP，再将 S 托孤给 Parent</li></ol></li></ol><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;根据关键字删除&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 关键字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 被删除关键字对应值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">            parent = p;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">            parent = p;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="keyword">if</span> (p.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        shift(parent, p, p.right); <span class="comment">// 情况1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        shift(parent, p, p.left); <span class="comment">// 情况2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 情况4</span></span><br><span class="line">        <span class="comment">// 4.1 被删除节点找后继</span></span><br><span class="line">        <span class="type">BSTNode</span> <span class="variable">s</span> <span class="operator">=</span> p.right;</span><br><span class="line">        <span class="type">BSTNode</span> <span class="variable">sParent</span> <span class="operator">=</span> p; <span class="comment">// 后继父亲</span></span><br><span class="line">        <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            sParent = s;</span><br><span class="line">            s = s.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.2 删除和后继不相邻, 处理后继的后事</span></span><br><span class="line">        <span class="keyword">if</span> (sParent != p) &#123;                </span><br><span class="line">            shift(sParent, s, s.right); <span class="comment">// 不可能有左孩子</span></span><br><span class="line">            s.right = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.3 后继取代被删除节点</span></span><br><span class="line">        shift(parent, p, s);</span><br><span class="line">        s.left = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 托孤方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent  被删除节点的父亲</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deleted 被删除节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child   被顶上去的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 只考虑让 n1父亲的左或右孩子指向 n2, n1自己的左或右孩子并未在方法内改变</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shift</span><span class="params">(BSTNode parent, BSTNode deleted, BSTNode child)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = child;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deleted == parent.left) &#123;</span><br><span class="line">        parent.left = child;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    root = doDelete(root, key, result);</span><br><span class="line">    <span class="keyword">return</span> result.isEmpty() ? <span class="literal">null</span> : result.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BSTNode <span class="title function_">doDelete</span><span class="params">(BSTNode node, <span class="type">int</span> key, ArrayList&lt;Object&gt; result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doDelete(node.left, key, result);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        node.right = doDelete(node.right, key, result);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    result.add(node.value);</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">BSTNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right;</span><br><span class="line">        <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            s = s.left;</span><br><span class="line">        &#125;</span><br><span class="line">        s.right = doDelete(node.right, s.key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        s.left = node.left;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.left != <span class="literal">null</span> ? node.left : node.right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明</p><ol><li><code>ArrayList&lt;Object&gt; result</code> 用来保存被删除节点的值</li><li>第二、第三个 if 对应没找到的情况，继续递归查找和删除，注意后续的 doDelete 返回值代表删剩下的，因此需要更新</li><li>最后一个 return 对应删除节点只有一个孩子的情况，返回那个不为空的孩子，待删节点自己因没有返回而被删除</li><li>第四个 if 对应删除节点有两个孩子的情况，此时需要找到后继节点，并在待删除节点的右子树中删掉后继节点，最后用后继节点替代掉待删除节点返回，别忘了改变后继节点的左右指针</li></ol><h4 id="找小的"><a href="#找小的" class="headerlink" title="找小的"></a>找小的</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">less</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &lt; key) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找大的"><a href="#找大的" class="headerlink" title="找大的"></a>找大的</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">greater</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &gt; key) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这样效率不高，可以用 RNL 遍历</p><blockquote><p>注：</p><ul><li>Pre-order, NLR</li><li>In-order, LNR</li><li>Post-order, LRN</li><li>Reverse pre-order, NRL</li><li>Reverse in-order, RNL</li><li>Reverse post-order, RLN</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">greater</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &gt; key) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找之间"><a href="#找之间" class="headerlink" title="找之间"></a>找之间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">between</span><span class="params">(<span class="type">int</span> key1, <span class="type">int</span> key2)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &gt;= key1 &amp;&amp; pop.key &lt;= key2) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pop.key &gt; key2) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>优点：</p><ol><li>如果每个节点的左子树和右子树的大小差距不超过一，可以保证搜索操作的时间复杂度是 O(log n)，效率高。</li><li>插入、删除结点等操作也比较容易实现，效率也比较高。</li><li>对于有序数据的查询和处理，二叉查找树非常适用，可以使用中序遍历得到有序序列。</li></ol><p>缺点：</p><ol><li>如果输入的数据是有序或者近似有序的，就会出现极度不平衡的情况，可能导致搜索效率下降，时间复杂度退化成O(n)。</li><li>对于频繁地插入、删除操作，需要维护平衡二叉查找树，例如红黑树、AVL 树等，否则搜索效率也会下降。</li><li>对于存在大量重复数据的情况，需要做相应的处理，否则会导致树的深度增加，搜索效率下降。</li><li>对于结点过多的情况，由于树的空间开销较大，可能导致内存消耗过大，不适合对内存要求高的场景。</li></ol><h3 id="2-AVL-树"><a href="#2-AVL-树" class="headerlink" title="2) AVL 树"></a>2) AVL 树</h3><h4 id="历史-1"><a href="#历史-1" class="headerlink" title="历史"></a>历史</h4><blockquote><p>AVL 树是一种自平衡二叉搜索树，由托尔·哈斯特罗姆在 1960 年提出并在 1962 年发表。它的名字来源于发明者的名字：Adelson-Velsky 和 Landis，他们是苏联数学家，于 1962 年发表了一篇论文，详细介绍了 AVL 树的概念和性质。</p><p>在二叉搜索树中，如果插入的元素按照特定的顺序排列，可能会导致树变得非常不平衡，从而降低搜索、插入和删除的效率。为了解决这个问题，AVL 树通过在每个节点中维护一个平衡因子来确保树的平衡。平衡因子是左子树的高度减去右子树的高度。如果平衡因子的绝对值大于等于 2，则通过旋转操作来重新平衡树。</p><p>AVL 树是用于存储有序数据的一种重要数据结构，它是二叉搜索树的一种改进和扩展。它不仅能够提高搜索、插入和删除操作的效率，而且还能够确保树的深度始终保持在 O(log n) 的水平。随着计算机技术的不断发展，AVL 树已经成为了许多高效算法和系统中必不可少的一种基础数据结构。</p></blockquote><p>前面介绍过，如果一棵二叉搜索树长的不平衡，那么查询的效率会受到影响，如下图</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230313090500760.png" alt="image-20230313090500760"></p><p>通过旋转可以让树重新变得平衡，并且不会改变二叉搜索树的性质（即左边仍然小，右边仍然大）</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230313090817485.png" alt="image-20230313090817485"></p><h4 id="如何判断失衡？"><a href="#如何判断失衡？" class="headerlink" title="如何判断失衡？"></a>如何判断失衡？</h4><blockquote><p>如果一个节点的<strong>左右孩子，高度差超过 1</strong>，则此节点失衡，才需要旋转</p></blockquote><h4 id="处理高度"><a href="#处理高度" class="headerlink" title="处理高度"></a>处理高度</h4><p>如何得到节点高度？一种方式之前做过的一道题目：E05. 求二叉树的最大深度（高度），但由于求高度是一个非常频繁的操作，因此将高度作为节点的一个属性，将来新增或删除时及时更新，默认为 1（按力扣说法）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    Object value;</span><br><span class="line">    AVLNode left;</span><br><span class="line">    AVLNode right;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求高度代码</strong></p><p>这里加入了 height 函数方便求节点为 null 时的高度</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node == <span class="literal">null</span> ? <span class="number">0</span> : node.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新高度代码</strong></p><p>将来新增、删除、旋转时，高度都可能发生变化，需要更新。下面是更新高度的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    node.height = Integer.max(height(node.left), height(node.right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="何时触发失衡判断？"><a href="#何时触发失衡判断？" class="headerlink" title="何时触发失衡判断？"></a>何时触发失衡判断？</h4><p>定义平衡因子（balance factor）如下<br>$$<br>平衡因子 &#x3D; 左子树高度 - 右子树高度<br>$$<br>当平衡因子</p><ul><li>bf &#x3D; 0，1，-1 时，表示左右平衡</li><li>bf &gt; 1 时，表示左边太高</li><li>bf &lt; -1 时，表示右边太高</li></ul><p>对应代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bf</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> height(node.left) - height(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当插入新节点，或删除节点时，引起高度变化时，例如</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310153645397.png" alt="image-20230310153645397"></p><p>目前此树平衡，当再插入一个 4 时，节点们的高度都产生了相应的变化，8 节点失衡了</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310153803661.png" alt="image-20230310153803661"></p><p>在比如说，下面这棵树一开始也是平衡的</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154155728.png" alt="image-20230310154155728"></p><p>当删除节点 8 时，节点们的高度都产生了相应的变化，6 节点失衡了</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154232729.png" alt="image-20230310154232729"></p><h4 id="失衡的四种情况"><a href="#失衡的四种情况" class="headerlink" title="失衡的四种情况"></a>失衡的四种情况</h4><p><strong>LL</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154459709.png" alt="image-20230310154459709"></p><ul><li>失衡节点（图中 8 红色）的 bf &gt; 1，即左边更高</li><li>失衡节点的左孩子（图中 6）的 bf &gt;&#x3D; 0 即左孩子这边也是左边更高或等高</li></ul><p><strong>LR</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154858754.png" alt="image-20230310154858754"></p><ul><li>失衡节点（图中 8）的 bf &gt; 1，即左边更高</li><li>失衡节点的左孩子（图中 6 红色）的 bf &lt; 0 即左孩子这边是右边更高</li></ul><p>对称的还有两种情况</p><p><strong>RL</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310155048187.png" alt="image-20230310155048187"></p><ul><li>失衡节点（图中 3）的 bf &lt;-1，即右边更高</li><li>失衡节点的右孩子（图中 6 红色）的 bf &gt; 0，即右孩子这边左边更高</li></ul><p><strong>RR</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310155347349.png" alt="image-20230310155347349"></p><ul><li>失衡节点（图中 3）的 bf &lt;-1，即右边更高</li><li>失衡节点的右孩子（图中 6 红色）的 bf &lt;&#x3D; 0，即右孩子这边右边更高或等高</li></ul><h4 id="解决失衡"><a href="#解决失衡" class="headerlink" title="解决失衡"></a>解决失衡</h4><p>失衡可以通过树的旋转解决。什么是树的旋转呢？它是在不干扰元素顺序的情况下更改结构，通常用来让树的高度变得平衡。</p><p>观察下面一棵二叉搜索树，可以看到，旋转后，并未改变树的左小右大特性，但根、父、孩子节点都发生了变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    4                                   2</span><br><span class="line">   / \             4 right             / \</span><br><span class="line">  2   5      --------------------&gt;    1   4</span><br><span class="line"> / \         &lt;--------------------       / \</span><br><span class="line">1   3              2 left               3   5</span><br></pre></td></tr></table></figure><p><strong>右旋</strong></p><p>旋转前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310162158692.png" alt="image-20230310162158692"></p><ul><li>红色节点，旧根（失衡节点）</li><li>黄色节点，旧根的左孩子，将来作为新根，旧根是它右孩子</li><li>绿色节点，新根的右孩子，将来要换爹作为旧根的左孩子</li></ul><p>旋转后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310162442932.png" alt="image-20230310162442932"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">rightRotate</span><span class="params">(AVLNode red)</span> &#123;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">yellow</span> <span class="operator">=</span> red.left;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">green</span> <span class="operator">=</span> yellow.right;</span><br><span class="line">    yellow.right = red;</span><br><span class="line">    red.left = green;</span><br><span class="line">    <span class="keyword">return</span> yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>左旋</strong></p><p>旋转前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310162945078.png" alt="image-20230310162945078"></p><ul><li>红色节点，旧根（失衡节点）</li><li>黄色节点，旧根的右孩子，将来作为新根，旧根是它左孩子</li><li>绿色节点，新根的左孩子，将来要换爹作为旧根的右孩子</li></ul><p>旋转后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310163019508.png" alt="image-20230310163019508"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">leftRotate</span><span class="params">(AVLNode red)</span> &#123;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">yellow</span> <span class="operator">=</span> red.right;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">green</span> <span class="operator">=</span> yellow.left;</span><br><span class="line">    yellow.left = red;</span><br><span class="line">    red.right = green;</span><br><span class="line">    <span class="keyword">return</span> yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>左右旋</strong></p><p>指先左旋左子树，再右旋根节点（失衡），这时一次旋转并不能解决失衡</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171424362.png" alt="image-20230310171424362"></p><p>左子树旋转后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171636904.png" alt="image-20230310171636904"></p><p>根右旋前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171821578.png" alt="image-20230310171821578"></p><p>根右旋后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171903417.png" alt="image-20230310171903417"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">leftRightRotate</span><span class="params">(AVLNode root)</span> &#123;</span><br><span class="line">    root.left = leftRotate(root.left);</span><br><span class="line">    <span class="keyword">return</span> rightRotate(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>右左旋</strong></p><p>指先右旋右子树，再左旋根节点（失衡）</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172212302.png" alt="image-20230310172212302"></p><p>右子树右旋后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172234154.png" alt="image-20230310172234154"></p><p>根左旋前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172303012.png" alt="image-20230310172303012"></p><p>根左旋后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172317379.png" alt="image-20230310172317379"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">rightLeftRotate</span><span class="params">(AVLNode root)</span> &#123;</span><br><span class="line">    root.right = rightRotate(root.right);</span><br><span class="line">    <span class="keyword">return</span> leftRotate(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断及调整平衡代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">balance</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> bf(node);</span><br><span class="line">    <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rightLeftRotate(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> leftRightRotate(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上四种旋转代码里，都需要更新高度，需要更新的节点是红色、黄色，而绿色节点高度不变</p><h4 id="新增-1"><a href="#新增-1" class="headerlink" title="新增"></a>新增</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    root = doPut(root, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">doPut</span><span class="params">(AVLNode node, <span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AVLNode</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == node.key) &#123;</span><br><span class="line">        node.value = value;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doPut(node.left, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.right = doPut(node.right, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    updateHeight(node);</span><br><span class="line">    <span class="keyword">return</span> balance(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    root = doRemove(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">doRemove</span><span class="params">(AVLNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doRemove(node.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        node.right = doRemove(node.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">AVLNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right;</span><br><span class="line">            <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                s = s.left;</span><br><span class="line">            &#125;</span><br><span class="line">            s.right = doRemove(node.right, s.key);</span><br><span class="line">            s.left = node.left;</span><br><span class="line">            node = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    updateHeight(node);</span><br><span class="line">    <span class="keyword">return</span> balance(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码备份</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        Object value;</span><br><span class="line">        AVLNode left;</span><br><span class="line">        AVLNode right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(<span class="type">int</span> key, Object value, AVLNode left, AVLNode right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVLNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">leftRotate</span><span class="params">(AVLNode p)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">r</span> <span class="operator">=</span> p.right;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">b</span> <span class="operator">=</span> r.left;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.right = b;</span><br><span class="line">        updateHeight(p);</span><br><span class="line">        updateHeight(r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        node.height = Integer.max(height(node.left), height(node.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">rightRotate</span><span class="params">(AVLNode r)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">a</span> <span class="operator">=</span> r.left;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">b</span> <span class="operator">=</span> a.right;</span><br><span class="line">        a.right = r;</span><br><span class="line">        r.left = b;</span><br><span class="line">        updateHeight(r);</span><br><span class="line">        updateHeight(a);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">leftRightRotate</span><span class="params">(AVLNode p)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">r</span> <span class="operator">=</span> p.left;</span><br><span class="line">        p.left = leftRotate(r);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">rightLeftRotate</span><span class="params">(AVLNode p)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">r</span> <span class="operator">=</span> p.right;</span><br><span class="line">        p.right = rightRotate(r);</span><br><span class="line">        <span class="keyword">return</span> leftRotate(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node == <span class="literal">null</span> ? <span class="number">0</span> : node.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        root = doRemove(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">doRemove</span><span class="params">(AVLNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node.left = doRemove(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">            node.right = doRemove(node.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">AVLNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right;</span><br><span class="line">                <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    s = s.left;</span><br><span class="line">                &#125;</span><br><span class="line">                s.right = doRemove(node.right, s.key);</span><br><span class="line">                s.left = node.left;</span><br><span class="line">                node = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        updateHeight(node);</span><br><span class="line">        <span class="keyword">return</span> balance(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        root = doPut(root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">doPut</span><span class="params">(AVLNode node, <span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AVLNode</span>(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key == node.key) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node.left = doPut(node.left, key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.right = doPut(node.right, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        updateHeight(node);</span><br><span class="line">        <span class="keyword">return</span> balance(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bf</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height(node.left) - height(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">balance</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> bf(node);</span><br><span class="line">        <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightLeftRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leftRightRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>AVL树的优点：</p><ol><li>AVL树是一种自平衡树，保证了树的高度平衡，从而保证了树的查询和插入操作的时间复杂度均为O(logn)。</li><li>相比于一般二叉搜索树，AVL树对查询效率的提升更为显著，因为其左右子树高度的差值不会超过1，避免了二叉搜索树退化为链表的情况，使得整棵树的高度更低。</li><li>AVL树的删除操作比较简单，只需要像插入一样旋转即可，在旋转过程中树的平衡性可以得到维护。</li></ol><p>AVL树的缺点：</p><ol><li>AVL树每次插入或删除节点时需要进行旋转操作，这个操作比较耗时，因此在一些应用中不太适用。</li><li>在AVL树进行插入或删除操作时，为保持树的平衡需要不断进行旋转操作，在一些高并发环节和大数据量环境下，这可能会导致多余的写锁导致性能瓶颈。</li><li>AVL树的旋转操作相对较多，因此在一些应用中可能会造成较大的空间浪费。</li></ol><h3 id="3-红黑树"><a href="#3-红黑树" class="headerlink" title="3) 红黑树"></a>3) 红黑树</h3><h4 id="历史-2"><a href="#历史-2" class="headerlink" title="历史"></a>历史</h4><blockquote><p>红黑树是一种自平衡二叉查找树，最早由一位名叫Rudolf Bayer的德国计算机科学家于1972年发明。然而，最初的树形结构不是现在的红黑树，而是一种称为B树的结构，它是一种多叉树，可用于在磁盘上存储大量数据。</p><p>在1980年代早期，计算机科学家Leonard Adleman和Daniel Sleator推广了红黑树，并证明了它的自平衡性和高效性。从那时起，红黑树成为了最流行的自平衡二叉查找树之一，并被广泛应用于许多领域，如编译器、操作系统、数据库等。</p><p>红黑树的名字来源于红色节点和黑色节点的交替出现，它们的颜色是用来维护树的平衡性的关键。它们的颜色具有特殊的意义，黑色节点代表普通节点，而红色节点代表一个新添加的节点，它们必须满足一些特定的规则才能维持树的平衡性。</p></blockquote><p>红黑树也是一种自平衡的二叉搜索树，较之 AVL，插入和删除时旋转次数更少</p><h4 id="红黑树特性"><a href="#红黑树特性" class="headerlink" title="红黑树特性"></a>红黑树特性</h4><ol><li>所有节点都有两种颜色：红:red_circle:、黑:black_circle:</li><li>所有 null 视为黑色:black_circle:</li><li>红色:red_circle:节点不能相邻</li><li>根节点是黑色:black_circle:</li><li>从根到任意一个叶子节点，路径中的黑色:black_circle:节点数一样</li></ol><h4 id="插入情况"><a href="#插入情况" class="headerlink" title="插入情况"></a>插入情况</h4><p>插入节点均视为红色:red_circle:</p><p>case 1：插入节点为根节点，将根节点变黑:black_circle:</p><p>case 2：插入节点的父亲若为黑色:black_circle:，树的红黑性质不变，无需调整</p><p>插入节点的父亲为红色:red_circle:，触发红红相邻</p><p>case 3：叔叔为红色:red_circle:</p><ul><li><p>父亲变为黑色:black_circle:，为了保证黑色平衡，连带的叔叔也变为黑色:black_circle:</p></li><li><p>祖父如果是黑色不变，会造成这颗子树黑色过多，因此祖父节点变为红色:red_circle:</p></li><li><p>祖父如果变成红色，可能会接着触发红红相邻，因此对将祖父进行递归调整</p></li></ul><p>case 4：叔叔为黑色:black_circle:</p><ol><li>父亲为左孩子，插入节点也是左孩子，此时即 LL 不平衡<ul><li>让父亲变黑:black_circle:，为了保证这颗子树黑色不变，将祖父变成红:red_circle:，但叔叔子树少了一个黑色</li><li>祖父右旋，补齐一个黑色给叔叔，父亲旋转上去取代祖父，由于它是黑色，不会再次触发红红相邻</li></ul></li><li>父亲为左孩子，插入节点是右孩子，此时即 LR 不平衡<ul><li>父亲左旋，变成 LL 情况，按 1. 来后续处理</li></ul></li><li>父亲为右孩子，插入节点也是右孩子，此时即 RR 不平衡<ul><li>让父亲变黑:black_circle:，为了保证这颗子树黑色不变，将祖父变成红:red_circle:，但叔叔子树少了一个黑色</li><li>祖父左旋，补齐一个黑色给叔叔，父亲旋转上去取代祖父，由于它是黑色，不会再次触发红红相邻</li></ul></li><li>父亲为右孩子，插入节点是左孩子，此时即 RL 不平衡<ul><li>父亲右旋，变成 RR 情况，按 3. 来后续处理</li></ul></li></ol><h4 id="删除情况"><a href="#删除情况" class="headerlink" title="删除情况"></a>删除情况</h4><p>case0：如果删除节点有两个孩子</p><ul><li>交换删除节点和后继节点的 key，value，递归删除后继节点，直到该节点没有孩子或只剩一个孩子</li></ul><p>如果删除节点没有孩子或只剩一个孩子</p><p>case 1：删的是根节点</p><ul><li>删完了，直接将 root &#x3D; null</li><li>用剩余节点替换了根节点的 key，value，根节点孩子 &#x3D; null，颜色保持黑色:black_circle:不变</li></ul><p>删黑色会失衡，删红色不会失衡，但删黑色有一种简单情况</p><p>case 2：删的是黑:black_circle:，剩下的是红:red_circle:，剩下这个红节点变黑:black_circle:</p><p>删除节点和剩下节点都是黑:black_circle:，触发双黑，双黑意思是，<strong>少了一个黑</strong></p><p>case 3：被调整节点的兄弟为红:red_circle:，此时两个侄子定为黑 :black_circle:</p><ul><li>删除节点是左孩子，父亲左旋</li><li>删除节点是右孩子，父亲右旋</li><li>父亲和兄弟要变色，保证旋转后颜色平衡</li><li>旋转的目的是让黑侄子变为删除节点的黑兄弟，对删除节点再次递归，进入 case 4 或 case 5</li></ul><p>case 4：被调整节点的兄弟为黑:black_circle:，两个侄子都为黑 :black_circle:</p><ul><li>将兄弟变红:red_circle:，目的是将删除节点和兄弟那边的黑色高度同时减少 1</li><li>如果父亲是红:red_circle:，则需将父亲变为黑，避免红红，此时路径黑节点数目不变</li><li>如果父亲是黑:black_circle:，说明这条路径还是少黑，再次让父节点触发双黑</li></ul><p>case 5：被调整节点的兄弟为黑:black_circle:，至少一个红:red_circle:侄子</p><ul><li>如果兄弟是左孩子，左侄子是红:red_circle:，LL 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:，平衡起见，左侄子也是黑:black_circle:</li><li>原来兄弟要成为父亲，需要保留父亲颜色</li></ul></li><li>如果兄弟是左孩子，右侄子是红:red_circle:，LR 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:</li><li>右侄子会取代原来父亲，因此它保留父亲颜色</li><li>兄弟已经是黑了:black_circle:，无需改变</li></ul></li><li>如果兄弟是右孩子，右侄子是红:red_circle:，RR 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:，平衡起见，右侄子也是黑:black_circle:</li><li>原来兄弟要成为父亲，需要保留父亲颜色</li></ul></li><li>如果兄弟是右孩子，左侄子是红:red_circle:，RL 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:</li><li>左侄子会取代原来父亲，因此它保留父亲颜色</li><li>兄弟已经是黑了:black_circle:，无需改变</li></ul></li></ul><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.datastructure.redblacktree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.itheima.datastructure.redblacktree.RedBlackTree.Color.BLACK;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.itheima.datastructure.redblacktree.RedBlackTree.Color.RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;红黑树&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedBlackTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">        RED, BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        Object value;</span><br><span class="line">        Node left;</span><br><span class="line">        Node right;</span><br><span class="line">        Node parent;        <span class="comment">// 父节点</span></span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> RED;  <span class="comment">// 颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, Color color)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, Color color, Node left, Node right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.color = color;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">                left.parent = <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">                right.parent = <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否是左孩子</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isLeftChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parent != <span class="literal">null</span> &amp;&amp; parent.left == <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 叔叔</span></span><br><span class="line">        Node <span class="title function_">uncle</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent == <span class="literal">null</span> || parent.parent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parent.isLeftChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.parent.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.parent.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 兄弟</span></span><br><span class="line">        Node <span class="title function_">sibling</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isLeftChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断红</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRed</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.color == RED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断黑</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isBlack</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">//        return !isRed(node);</span></span><br><span class="line">        <span class="keyword">return</span> node == <span class="literal">null</span> || node.color == BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右旋 1. parent 的处理 2. 旋转后新根的父子关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(Node pink)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> pink.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">yellow</span> <span class="operator">=</span> pink.left;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">green</span> <span class="operator">=</span> yellow.right;</span><br><span class="line">        <span class="keyword">if</span> (green != <span class="literal">null</span>) &#123;</span><br><span class="line">            green.parent = pink;</span><br><span class="line">        &#125;</span><br><span class="line">        yellow.right = pink;</span><br><span class="line">        yellow.parent = parent;</span><br><span class="line">        pink.left = green;</span><br><span class="line">        pink.parent = yellow;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.left == pink) &#123;</span><br><span class="line">            parent.left = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.right = yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左旋</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(Node pink)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> pink.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">yellow</span> <span class="operator">=</span> pink.right;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">green</span> <span class="operator">=</span> yellow.left;</span><br><span class="line">        <span class="keyword">if</span> (green != <span class="literal">null</span>) &#123;</span><br><span class="line">            green.parent = pink;</span><br><span class="line">        &#125;</span><br><span class="line">        yellow.left = pink;</span><br><span class="line">        yellow.parent = parent;</span><br><span class="line">        pink.right = green;</span><br><span class="line">        pink.parent = yellow;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.left == pink) &#123;</span><br><span class="line">            parent.left = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.right = yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增或更新</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 正常增、遇到红红不平衡进行调整</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            parent = p;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">                p = p.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.value = value; <span class="comment">// 更新</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">inserted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = inserted;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; parent.key) &#123;</span><br><span class="line">            parent.left = inserted;</span><br><span class="line">            inserted.parent = parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.right = inserted;</span><br><span class="line">            inserted.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        fixRedRed(inserted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fixRedRed</span><span class="params">(Node x)</span> &#123;</span><br><span class="line">        <span class="comment">// case 1 插入节点是根节点，变黑即可</span></span><br><span class="line">        <span class="keyword">if</span> (x == root) &#123;</span><br><span class="line">            x.color = BLACK;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// case 2 插入节点父亲是黑色，无需调整</span></span><br><span class="line">        <span class="keyword">if</span> (isBlack(x.parent)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* case 3 当红红相邻，叔叔为红时</span></span><br><span class="line"><span class="comment">            需要将父亲、叔叔变黑、祖父变红，然后对祖父做递归处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> x.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">uncle</span> <span class="operator">=</span> x.uncle();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">grandparent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">        <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            uncle.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            fixRedRed(grandparent);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// case 4 当红红相邻，叔叔为黑时</span></span><br><span class="line">        <span class="keyword">if</span> (parent.isLeftChild() &amp;&amp; x.isLeftChild()) &#123; <span class="comment">// LL</span></span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            rightRotate(grandparent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.isLeftChild()) &#123; <span class="comment">// LR</span></span><br><span class="line">            leftRotate(parent);</span><br><span class="line">            x.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            rightRotate(grandparent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!x.isLeftChild()) &#123; <span class="comment">// RR</span></span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            leftRotate(grandparent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// RL</span></span><br><span class="line">            rightRotate(parent);</span><br><span class="line">            x.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            leftRotate(grandparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 正常删、会用到李代桃僵技巧、遇到黑黑不平衡进行调整</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">deleted</span> <span class="operator">=</span> find(key);</span><br><span class="line">        <span class="keyword">if</span> (deleted == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        doRemove(deleted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(key) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找删除节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">find</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">                p = p.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找剩余节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findReplaced</span><span class="params">(Node deleted)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (deleted.left == <span class="literal">null</span> &amp;&amp; deleted.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deleted.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> deleted.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deleted.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> deleted.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> deleted.right;</span><br><span class="line">        <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            s = s.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理双黑 (case3、case4、case5)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixDoubleBlack</span><span class="params">(Node x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> x.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">sibling</span> <span class="operator">=</span> x.sibling();</span><br><span class="line">        <span class="comment">// case 3 兄弟节点是红色</span></span><br><span class="line">        <span class="keyword">if</span> (isRed(sibling)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.isLeftChild()) &#123;</span><br><span class="line">                leftRotate(parent);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rightRotate(parent);</span><br><span class="line">            &#125;</span><br><span class="line">            parent.color = RED;</span><br><span class="line">            sibling.color = BLACK;</span><br><span class="line">            fixDoubleBlack(x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sibling != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// case 4 兄弟是黑色, 两个侄子也是黑色</span></span><br><span class="line">            <span class="keyword">if</span> (isBlack(sibling.left) &amp;&amp; isBlack(sibling.right)) &#123;</span><br><span class="line">                sibling.color = RED;</span><br><span class="line">                <span class="keyword">if</span> (isRed(parent)) &#123;</span><br><span class="line">                    parent.color = BLACK;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fixDoubleBlack(parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// case 5 兄弟是黑色, 侄子有红色</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// LL</span></span><br><span class="line">                <span class="keyword">if</span> (sibling.isLeftChild() &amp;&amp; isRed(sibling.left)) &#123;</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                    sibling.left.color = BLACK;</span><br><span class="line">                    sibling.color = parent.color;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// LR</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sibling.isLeftChild() &amp;&amp; isRed(sibling.right)) &#123;</span><br><span class="line">                    sibling.right.color = parent.color;</span><br><span class="line">                    leftRotate(sibling);</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// RL</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!sibling.isLeftChild() &amp;&amp; isRed(sibling.left)) &#123;</span><br><span class="line">                    sibling.left.color = parent.color;</span><br><span class="line">                    rightRotate(sibling);</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// RR</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                    sibling.right.color = BLACK;</span><br><span class="line">                    sibling.color = parent.color;</span><br><span class="line">                &#125;</span><br><span class="line">                parent.color = BLACK;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// @TODO 实际也不会出现，触发双黑后，兄弟节点不会为 null</span></span><br><span class="line">            fixDoubleBlack(parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">(Node deleted)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">replaced</span> <span class="operator">=</span> findReplaced(deleted);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> deleted.parent;</span><br><span class="line">        <span class="comment">// 没有孩子</span></span><br><span class="line">        <span class="keyword">if</span> (replaced == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// case 1 删除的是根节点</span></span><br><span class="line">            <span class="keyword">if</span> (deleted == root) &#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isBlack(deleted)) &#123;</span><br><span class="line">                    <span class="comment">// 双黑调整</span></span><br><span class="line">                    fixDoubleBlack(deleted);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 红色叶子, 无需任何处理</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (deleted.isLeftChild()) &#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                deleted.parent = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有一个孩子</span></span><br><span class="line">        <span class="keyword">if</span> (deleted.left == <span class="literal">null</span> || deleted.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// case 1 删除的是根节点</span></span><br><span class="line">            <span class="keyword">if</span> (deleted == root) &#123;</span><br><span class="line">                root.key = replaced.key;</span><br><span class="line">                root.value = replaced.value;</span><br><span class="line">                root.left = root.right = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (deleted.isLeftChild()) &#123;</span><br><span class="line">                    parent.left = replaced;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.right = replaced;</span><br><span class="line">                &#125;</span><br><span class="line">                replaced.parent = parent;</span><br><span class="line">                deleted.left = deleted.right = deleted.parent = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (isBlack(deleted) &amp;&amp; isBlack(replaced)) &#123;</span><br><span class="line">                    <span class="comment">// @TODO 实际不会有这种情况 因为只有一个孩子时 被删除节点是黑色 那么剩余节点只能是红色不会触发双黑</span></span><br><span class="line">                    fixDoubleBlack(replaced);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// case 2 删除是黑，剩下是红</span></span><br><span class="line">                    replaced.color = BLACK;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// case 0 有两个孩子 =&gt; 有一个孩子 或 没有孩子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> deleted.key;</span><br><span class="line">        deleted.key = replaced.key;</span><br><span class="line">        replaced.key = t;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> deleted.value;</span><br><span class="line">        deleted.value = replaced.value;</span><br><span class="line">        replaced.value = v;</span><br><span class="line">        doRemove(replaced);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上代码中的 TODO 未作改正</li></ul><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><table><thead><tr><th>维度</th><th>普通二叉搜索树</th><th>AVL树</th><th>红黑树</th></tr></thead><tbody><tr><td>查询</td><td>平均O(logn)，最坏O(n)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>插入</td><td>平均O(logn)，最坏O(n)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>删除</td><td>平均O(logn)，最坏O(n)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>平衡性</td><td>不平衡</td><td>严格平衡</td><td>近似平衡</td></tr><tr><td>结构</td><td>二叉树</td><td>自平衡的二叉树</td><td>具有红黑性质的自平衡二叉树</td></tr><tr><td>查找效率</td><td>低</td><td>高</td><td>高</td></tr><tr><td>插入删除效率</td><td>低</td><td>中等</td><td>高</td></tr></tbody></table><p>普通二叉搜索树插入、删除、查询的时间复杂度与树的高度相关，因此在最坏情况下，时间复杂度为O(n)，而且容易退化成链表，查找效率低。</p><p>AVL树是一种高度平衡的二叉搜索树，其左右子树的高度差不超过1。因此，它能够在logn的平均时间内完成插入、删除、查询操作，但是在维护平衡的过程中，需要频繁地进行旋转操作，导致插入删除效率较低。</p><p>红黑树是一种近似平衡的二叉搜索树，它在保持高度平衡的同时，又能够保持较高的插入删除效率。红黑树通过节点着色和旋转操作来维护平衡。红黑树在维护平衡的过程中，能够进行较少的节点旋转操作，因此插入删除效率较高，并且查询效率也较高。</p><p>综上所述，红黑树具有较高的综合性能，是一种广泛应用的数据结构。</p><h3 id="4-B-树"><a href="#4-B-树" class="headerlink" title="4) B 树"></a>4) B 树</h3><p>ai 问题列表</p><p>请用中文回答：B-树历史</p><p>请用中文回答：100万的数据使用 avl 树来存储，树高是多少?</p><p>请用中文回答：100万的数据，如果存储到B-树(最小度数是500)，那么树高大约是多少?</p><p>请用中文回答：B-树的特性有哪些？</p><h4 id="历史-3"><a href="#历史-3" class="headerlink" title="历史"></a>历史</h4><blockquote><p>B树（B-Tree）结构是一种高效存储和查询数据的方法，它的历史可以追溯到1970年代早期。B树的发明人Rudolf Bayer和Edward M. McCreight分别发表了一篇论文介绍了B树。这篇论文是1972年发表于《ACM Transactions on Database Systems》中的，题目为”Organization and Maintenance of Large Ordered Indexes”。</p><p>这篇论文提出了一种能够高效地维护大型有序索引的方法，这种方法的主要思想是将每个节点扩展成多个子节点，以减少查找所需的次数。B树结构非常适合应用于磁盘等大型存储器的高效操作，被广泛应用于关系数据库和文件系统中。</p><p>B树结构有很多变种和升级版，例如B+树，B*树和SB树等。这些变种和升级版本都基于B树的核心思想，通过调整B树的参数和结构，提高了B树在不同场景下的性能表现。</p><p>总的来说，B树结构是一个非常重要的数据结构，为高效存储和查询大量数据提供了可靠的方法。它的历史可以追溯到上个世纪70年代，而且在今天仍然被广泛应用于各种场景。</p></blockquote><h4 id="B-的含义"><a href="#B-的含义" class="headerlink" title="B 的含义"></a>B 的含义</h4><blockquote><p>B-树的名称是由其发明者Rudolf  Bayer提出的。Bayer和McCreight从未解释B代表什么，人们提出了许多可能的解释，比如Boeing、balanced、between、broad、bushy和Bayer等。但McCreight表示，越是思考B-trees中的B代表什么，就越能更好地理解B-trees</p></blockquote><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><p>一棵 B-树具有以下性质</p><p>特性1：每个节点 x 具有</p><ul><li>属性 n，表示节点 x 中 key 的个数</li><li>属性 leaf，表示节点是否是叶子节点</li><li>节点 key 可以有多个，以升序存储</li></ul><p>特性2：每个非叶子节点中的孩子数是 n + 1、叶子节点没有孩子</p><p>特性3：最小度数t（节点的孩子数称为度）和节点中键数量的关系如下：</p><table><thead><tr><th>最小度数t</th><th>键数量范围</th></tr></thead><tbody><tr><td>2</td><td>1 ~ 3</td></tr><tr><td>3</td><td>2 ~ 5</td></tr><tr><td>4</td><td>3 ~ 7</td></tr><tr><td>…</td><td>…</td></tr><tr><td>n</td><td>(n-1) ~ (2n-1)</td></tr></tbody></table><p>其中，当节点中键数量达到其最大值时，即 3、5、7 … 2n-1，需要分裂</p><p>特性4：叶子节点的深度都相同</p><blockquote><p>问：</p><p>B-树为什么有最小度数的限制？</p><p>答：</p><p>B树中有最小度数的限制是为了保证B树的平衡特性。</p><p>在B树中，每个节点都可以有多个子节点，这使得B树可以存储大量的键值，但也带来了一些问题。如果节点的子节点数量太少，那么就可能导致B树的高度过高，从而降低了B树的效率。此外，如果节点的子节点数量太多，那么就可能导致节点的搜索、插入和删除操作变得复杂和低效。</p><p>最小度数的限制通过限制节点的子节点数量，来平衡这些问题。在B树中，每个节点的子节点数量都必须在一定的范围内，即t到2t之间（其中t为最小度数）</p></blockquote><h4 id="定义节点-1"><a href="#定义节点-1" class="headerlink" title="定义节点"></a>定义节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">leaf</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> keyNumber;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span>[] keys;</span><br><span class="line">    Node[] children;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        <span class="built_in">this</span>.keys = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * t - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">2</span> * t];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(Arrays.copyOfRange(keys, <span class="number">0</span>, keyNumber));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leaf 表示是否为叶子节点</li><li>keyNumber 为 keys 中有效 key 数目</li><li>t 为最小度数，它决定了节点中key 的最小、最大数目，分别是 t-1 和 2t-1</li><li>keys 存储此节点的 key</li><li>children 存储此节点的 child</li><li>toString 只是为了方便调试和测试，非必须</li></ul><blockquote><p>实际 keys 应当改为 entries 以便同时保存 key 和 value，刚开始简化实现</p></blockquote><h4 id="多路查找"><a href="#多路查找" class="headerlink" title="多路查找"></a>多路查找</h4><p>为上面节点类添加 get 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; keyNumber &amp;&amp; keys[i] &lt; key) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; keyNumber &amp;&amp; keys[i] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leaf) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> children[i].get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入-key-和-child"><a href="#插入-key-和-child" class="headerlink" title="插入 key 和 child"></a>插入 key 和 child</h4><p>为上面节点类添加 insertKey 和 insertChild 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insertKey</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    System.arraycopy(keys, index, keys, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">    keys[index] = key;</span><br><span class="line">    keyNumber++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertChild</span><span class="params">(Node child, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    System.arraycopy(children, index, children, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">    children[index] = child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用是向 keys 数组或 children 数组指定 index 处插入新数据，注意</p><ul><li>由于使用了静态数组，并且不会在新增或删除时改变它的大小，因此需要额外的 keyNumber 来指定数组内有效 key 的数目<ul><li>插入时 keyNumber++</li><li>删除时减少  keyNumber 的值即可</li></ul></li><li>children 不会单独维护数目，它比 keys 多一个</li><li>如果这两个方法同时调用，注意它们的先后顺序，insertChild 后调用，因为它计算复制元素个数时用到了 keyNumber</li></ul><h4 id="定义树"><a href="#定义树" class="headerlink" title="定义树"></a>定义树</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MIN_KEY_NUMBER;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MAX_KEY_NUMBER;</span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        MIN_KEY_NUMBER = t - <span class="number">1</span>;</span><br><span class="line">        MAX_KEY_NUMBER = <span class="number">2</span> * t - <span class="number">1</span>;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    doPut(<span class="literal">null</span>, <span class="number">0</span>, root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doPut</span><span class="params">(Node parent, <span class="type">int</span> index, Node node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; node.keyNumber &amp;&amp; node.keys[i] &lt; key) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; node.keyNumber &amp;&amp; node.keys[i] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.leaf) &#123;</span><br><span class="line">        node.insertKey(key, i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doPut(node, i, node.children[i], key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFull(node)) &#123;</span><br><span class="line">        split(parent, index, node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先查找本节点中的插入位置 i，如果没有空位（key 被找到），应该走更新的逻辑，目前什么没做</li><li>接下来分两种情况<ul><li>如果节点是叶子节点，可以直接插入了</li><li>如果节点是非叶子节点，需要继续在 children[i] 处继续递归插入</li></ul></li><li>无论哪种情况，插入完成后都可能超过节点 keys 数目限制，此时应当执行节点分裂<ul><li>参数中的 parent 和 index 都是给分裂方法用的，代表当前节点父节点，和分裂节点是第几个孩子</li></ul></li></ul><p>判断依据为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node.keyNumber == MAX_KEY_NUMBER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">split</span><span class="params">(Node parent, <span class="type">int</span> index , Node left)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newRoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.t);</span><br><span class="line">        newRoot.leaf = <span class="literal">false</span>;</span><br><span class="line">        newRoot.insertChild(root, <span class="number">0</span>);</span><br><span class="line">        root = newRoot;</span><br><span class="line">        parent = newRoot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.t);</span><br><span class="line">    right.leaf = left.leaf;</span><br><span class="line">    right.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">    System.arraycopy(left.keys, t, right.keys, <span class="number">0</span>, t - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!left.leaf) &#123;</span><br><span class="line">        System.arraycopy(left.children, t, right.children, <span class="number">0</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    left.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left.keys[t - <span class="number">1</span>];</span><br><span class="line">    parent.insertKey(mid, index);</span><br><span class="line">    parent.insertChild(right, index + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分两种情况：</p><ul><li>如果 parent &#x3D;&#x3D; null 表示要分裂的是根节点，此时需要创建新根，原来的根节点作为新根的 0 孩子</li><li>否则<ul><li>创建 right 节点（分裂后大于当前 left 节点的），把 t 以后的 key 和 child 都拷贝过去</li><li>t-1 处的 key 插入到 parent 的 index 处，index 指 left 作为孩子时的索引</li><li>right 节点作为 parent 的孩子插入到 index + 1 处</li></ul></li></ul><h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><p>case 1：当前节点是叶子节点，没找到</p><p>case 2：当前节点是叶子节点，找到了</p><p>case 3：当前节点是非叶子节点，没找到</p><p>case 4：当前节点是非叶子节点，找到了</p><p>case 5：删除后 key 数目 &lt; 下限（不平衡）</p><p>case 6：根节点</p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.algorithm.btree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;B-树&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] keys; <span class="comment">// 关键字</span></span><br><span class="line">        Node[] children; <span class="comment">// 孩子</span></span><br><span class="line">        <span class="type">int</span> keyNumber; <span class="comment">// 有效关键字数目</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leaf</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// 是否是叶子节点</span></span><br><span class="line">        <span class="type">int</span> t; <span class="comment">// 最小度数 (最小孩子数)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> t)</span> &#123; <span class="comment">// t&gt;=2</span></span><br><span class="line">            <span class="built_in">this</span>.t = t;</span><br><span class="line">            <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">2</span> * t];</span><br><span class="line">            <span class="built_in">this</span>.keys = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * t - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span>[] keys)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.keys = keys;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.toString(Arrays.copyOfRange(keys, <span class="number">0</span>, keyNumber));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多路查找</span></span><br><span class="line">        Node <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; keyNumber) &#123;</span><br><span class="line">                <span class="keyword">if</span> (keys[i] == key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (keys[i] &gt; key) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行到此时 keys[i]&gt;key 或 i==keyNumber</span></span><br><span class="line">            <span class="keyword">if</span> (leaf) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 非叶子情况</span></span><br><span class="line">            <span class="keyword">return</span> children[i].get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 keys 指定索引处插入 key</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">insertKey</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            System.arraycopy(keys, index, keys, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">            keys[index] = key;</span><br><span class="line">            keyNumber++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 children 指定索引处插入 child</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">insertChild</span><span class="params">(Node child, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            System.arraycopy(children, index, children, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">            children[index] = child;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">removeKey</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> keys[index];</span><br><span class="line">            System.arraycopy(keys, index + <span class="number">1</span>, keys, index, --keyNumber - index);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">removeLeftmostKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeKey(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">removeRightmostKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeKey(keyNumber - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">removeChild</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> children[index];</span><br><span class="line">            System.arraycopy(children, index + <span class="number">1</span>, children, index, keyNumber - index);</span><br><span class="line">            children[keyNumber] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">removeLeftmostChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeChild(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">removeRightmostChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeChild(keyNumber);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">moveToLeft</span><span class="params">(Node left)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> left.keyNumber;</span><br><span class="line">            <span class="keyword">if</span> (!leaf) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= keyNumber; i++) &#123;</span><br><span class="line">                    left.children[start + i] = children[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; keyNumber; i++) &#123;</span><br><span class="line">                left.keys[left.keyNumber++] = keys[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">leftSibling</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index &gt; <span class="number">0</span> ? children[index - <span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">rightSibling</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index == keyNumber ? <span class="literal">null</span> : children[index + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t; <span class="comment">// 树中节点最小度数</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MIN_KEY_NUMBER; <span class="comment">// 最小key数目</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MAX_KEY_NUMBER; <span class="comment">// 最大key数目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">        MAX_KEY_NUMBER = <span class="number">2</span> * t - <span class="number">1</span>;</span><br><span class="line">        MIN_KEY_NUMBER = t - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.get(key) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 新增</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        doPut(root, key, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doPut</span><span class="params">(Node node, <span class="type">int</span> key, Node parent, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; node.keyNumber) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.keys[i] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 更新</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.keys[i] &gt; key) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到了插入位置，即为此时的 i</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.leaf) &#123;</span><br><span class="line">            node.insertKey(key, i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doPut(node.children[i], key, node, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.keyNumber == MAX_KEY_NUMBER) &#123;</span><br><span class="line">            split(node, parent, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;h3&gt;分裂方法&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left   要分裂的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 分裂节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index  分裂节点是第几个孩子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(Node left, Node parent, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 分裂的是根节点</span></span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">newRoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">            newRoot.leaf = <span class="literal">false</span>;</span><br><span class="line">            newRoot.insertChild(left, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.root = newRoot;</span><br><span class="line">            parent = newRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1. 创建 right 节点，把 left 中 t 之后的 key 和 child 移动过去</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">        right.leaf = left.leaf;</span><br><span class="line">        System.arraycopy(left.keys, t, right.keys, <span class="number">0</span>, t - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 分裂节点是非叶子的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!left.leaf) &#123;</span><br><span class="line">            System.arraycopy(left.children, t, right.children, <span class="number">0</span>, t);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= left.keyNumber; i++) &#123;</span><br><span class="line">                left.children[i] = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        right.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">        left.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 2. 中间的 key （t-1 处）插入到父节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left.keys[t - <span class="number">1</span>];</span><br><span class="line">        parent.insertKey(mid, index);</span><br><span class="line">        <span class="comment">// 3. right 节点作为父节点的孩子</span></span><br><span class="line">        parent.insertChild(right, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        doRemove(root, key, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">(Node node, <span class="type">int</span> key, Node parent, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; node.keyNumber) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.keys[i] &gt;= key) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.leaf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (notFound(node, key, i)) &#123; <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node.removeKey(i);  <span class="comment">// case 2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (notFound(node, key, i)) &#123; <span class="comment">// case 3</span></span><br><span class="line">                doRemove(node.children[i], key, node, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// case 4</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.children[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span> (!s.leaf) &#123;</span><br><span class="line">                    s = s.children[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> s.keys[<span class="number">0</span>];</span><br><span class="line">                node.keys[i] = k;</span><br><span class="line">                doRemove(node.children[i + <span class="number">1</span>], k, node, i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.keyNumber &lt; MIN_KEY_NUMBER) &#123; <span class="comment">// case 5</span></span><br><span class="line">            balance(node, parent, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">notFound</span><span class="params">(Node node, <span class="type">int</span> key, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= node.keyNumber || (i &lt; node.keyNumber &amp;&amp; node.keys[i] != key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">balance</span><span class="params">(Node node, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == root) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.keyNumber == <span class="number">0</span> &amp;&amp; root.children[<span class="number">0</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.children[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">leftSibling</span> <span class="operator">=</span> parent.leftSibling(i);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">rightSibling</span> <span class="operator">=</span> parent.rightSibling(i);</span><br><span class="line">        <span class="keyword">if</span> (leftSibling != <span class="literal">null</span> &amp;&amp; leftSibling.keyNumber &gt; MIN_KEY_NUMBER) &#123;</span><br><span class="line">            rightRotate(node, leftSibling, parent, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightSibling != <span class="literal">null</span> &amp;&amp; rightSibling.keyNumber &gt; MIN_KEY_NUMBER) &#123;</span><br><span class="line">            leftRotate(node, rightSibling, parent, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftSibling != <span class="literal">null</span>) &#123;</span><br><span class="line">            mergeToLeft(leftSibling, parent, i - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeToLeft(node, parent, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeToLeft</span><span class="params">(Node left, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> parent.removeChild(i + <span class="number">1</span>);</span><br><span class="line">        left.insertKey(parent.removeKey(i), left.keyNumber);</span><br><span class="line">        right.moveToLeft(left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(Node node, Node leftSibling, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        node.insertKey(parent.keys[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!leftSibling.leaf) &#123;</span><br><span class="line">            node.insertChild(leftSibling.removeRightmostChild(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.keys[i - <span class="number">1</span>] = leftSibling.removeRightmostKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(Node node, Node rightSibling, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        node.insertKey(parent.keys[i], node.keyNumber);</span><br><span class="line">        <span class="keyword">if</span> (!rightSibling.leaf) &#123;</span><br><span class="line">            node.insertChild(rightSibling.removeLeftmostChild(), node.keyNumber + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.keys[i] = rightSibling.removeLeftmostKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-树与-2-3-树、2-3-4-树的关系"><a href="#B-树与-2-3-树、2-3-4-树的关系" class="headerlink" title="B-树与 2-3 树、2-3-4 树的关系"></a>B-树与 2-3 树、2-3-4 树的关系</h4><p>可以这样总结它们之间的关系：</p><ol><li>2-3树是最小度数为2的B树，其中每个节点可以包含2个或3个子节点。</li><li>2-3-4树是最小度数为2的B树的一种特殊情况，其中每个节点可以包含2个、3个或4个子节点。</li><li>B树是一种更加一般化的平衡树，可以适应不同的应用场景，其节点可以包含任意数量的键值，节点的度数取决于最小度数t的设定。</li></ol><h3 id="5-哈希表"><a href="#5-哈希表" class="headerlink" title="5) 哈希表"></a>5) 哈希表</h3><h4 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h4><p>未考虑 hash 码的生成，假定该 hash 码由我们提供</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> &#123;</span><br><span class="line">        <span class="type">int</span> hash; <span class="comment">// 哈希码</span></span><br><span class="line">        Object key; <span class="comment">// 键</span></span><br><span class="line">        Object value; <span class="comment">// 值</span></span><br><span class="line">        Entry next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Entry</span><span class="params">(<span class="type">int</span> hash, Object key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] table = <span class="keyword">new</span> <span class="title class_">Entry</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 元素个数</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> <span class="number">0.75f</span>; <span class="comment">// 12 阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> (<span class="type">int</span>) (loadFactor * table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 求模运算替换为位运算</span></span><br><span class="line"><span class="comment">        - 前提：数组长度是 2 的 n 次方</span></span><br><span class="line"><span class="comment">        - hash % 数组长度 等价于 hash &amp; (数组长度-1)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 hash 码获取 value</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (table[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[idx];</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> p.value;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向 hash 表存入新 key value，如果 key 重复，则更新 value</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> hash, Object key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (table[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. idx 处有空位, 直接新增</span></span><br><span class="line">            table[idx] = <span class="keyword">new</span> <span class="title class_">Entry</span>(hash, key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. idx 处无空位, 沿链表查找 有重复key更新，否则新增</span></span><br><span class="line">            <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[idx];</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.key.equals(key)) &#123;</span><br><span class="line">                    p.value = value; <span class="comment">// 更新</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="title class_">Entry</span>(hash, key, value); <span class="comment">// 新增</span></span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold) &#123;</span><br><span class="line">            resize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">()</span> &#123;</span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> <span class="title class_">Entry</span>[table.length &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[i]; <span class="comment">// 拿到每个链表头</span></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                拆分链表，移动到新数组，拆分规律</span></span><br><span class="line"><span class="comment">                * 一个链表最多拆成两个</span></span><br><span class="line"><span class="comment">                * hash &amp; table.length == 0 的一组</span></span><br><span class="line"><span class="comment">                * hash &amp; table.length != 0 的一组</span></span><br><span class="line"><span class="comment">                                          p</span></span><br><span class="line"><span class="comment">                0-&gt;8-&gt;16-&gt;24-&gt;32-&gt;40-&gt;48-&gt;null</span></span><br><span class="line"><span class="comment">                            a</span></span><br><span class="line"><span class="comment">                0-&gt;16-&gt;32-&gt;48-&gt;null</span></span><br><span class="line"><span class="comment">                        b</span></span><br><span class="line"><span class="comment">                8-&gt;24-&gt;40-&gt;null</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">                <span class="type">Entry</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">aHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">bHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((p.hash &amp; table.length) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">                            a.next = p;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            aHead = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        a = p; <span class="comment">// 分配到a</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                            b.next = p;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            bHead = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        b = p; <span class="comment">// 分配到b</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 规律： a 链表保持索引位置不变，b 链表索引位置+table.length</span></span><br><span class="line">                <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">                    a.next = <span class="literal">null</span>;</span><br><span class="line">                    newTable[i] = aHead;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                    b.next = <span class="literal">null</span>;</span><br><span class="line">                    newTable[i + table.length] = bHead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (<span class="type">int</span>) (loadFactor * table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 hash 码删除，返回删除的 value</span></span><br><span class="line">    Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (table[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[idx];</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.key.equals(key)) &#123;</span><br><span class="line">                <span class="comment">// 找到了, 删除</span></span><br><span class="line">                <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123; <span class="comment">// 链表头</span></span><br><span class="line">                    table[idx] = p.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非链表头</span></span><br><span class="line">                    prev.next = p.next;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> p.value;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成-hashCode"><a href="#生成-hashCode" class="headerlink" title="生成 hashCode"></a>生成 hashCode</h4><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230424083655435.png" alt="image-20230424083655435"></p><p>hash 算法是将任意对象，分配一个<strong>编号</strong>的过程，其中编号是一个有限范围内的数字（如 int 范围内）</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230424090603325.png" alt="image-20230424090603325"></p><p><strong>Object.hashCode</strong></p><ul><li>Object 的 hashCode 方法默认是生成随机数作为 hash 值（会缓存在对象头当中）</li><li>缺点是包含相同<strong>值</strong>的不同对象，他们的 hashCode 不一样，不能够用 hash 值来反映对象的<strong>值</strong>特征，因此诸多子类都会重写 hashCode 方法</li></ul><p><strong>String.hashCode</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;bac&quot;</span>;                     </span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);         </span><br><span class="line"></span><br><span class="line">    System.out.println(s1.hashCode());</span><br><span class="line">    System.out.println(s2.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原则：值相同的字符串生成相同的 hash 码, 尽量让值不同的字符串生成不同的 hash 码</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对于 abc  a * 100 + b * 10 + c</span></span><br><span class="line"><span class="comment">    对于 bac  b * 100 + a * 10 + c</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s1.charAt(i);</span><br><span class="line">        System.out.println((<span class="type">int</span>) c);</span><br><span class="line">        <span class="comment">// (a*10 + b)*10 + c  ==&gt;  a*100 + b*10 + c  2^5</span></span><br><span class="line">        hash = (hash &lt;&lt; <span class="number">5</span>) - hash + c;     </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>经验表明如果每次乘的是较大质数，可以有更好地降低 hash 冲突，因此改【乘 10】为【乘 31】</li><li>【乘 31】可以等价为【乘 32 - hash】，进一步可以转为更高效地【左移5位 - hash】</li></ul><p><strong>检查 hash 表的分散性</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[table.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[i];</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            sum[i]++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(sum));</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Long&gt; result = Arrays.stream(sum).boxed()</span><br><span class="line">        .collect(Collectors.groupingBy(s -&gt; s, Collectors.counting()));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 测试 Object.hashCode</span></span><br><span class="line">    <span class="type">HashTable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashTable</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        table.put(obj, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    table.print();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试 String.hashCode</span></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">HashTable</span>();</span><br><span class="line">    List&lt;String&gt; strings = Files.readAllLines(Path.of(<span class="string">&quot;words&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        table.put(string, string);</span><br><span class="line">    &#125;</span><br><span class="line">    table.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MurmurHash</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230425084247888.png" alt="image-20230425084247888"></p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ol><li>我们的代码里使用了尾插法，如果改成头插法呢？</li><li>JDK 的 HashMap 中采用了将对象 hashCode 高低位相互异或的方式减少冲突，怎么理解</li><li>我们的 HashTable 中表格容量是 2 的 n 次方，很多优化都是基于这个前提，能否不用 2 的 n 次方作为表格容量？</li><li>JDK 的 HashMap 在链表长度过长会转换成红黑树，对此你怎么看</li></ol><h2 id="3-排序算法"><a href="#3-排序算法" class="headerlink" title="3. 排序算法"></a>3. 排序算法</h2><p>基于比较的排序算法，常见有</p><table><thead><tr><th align="center">算法</th><th align="center">最好</th><th align="center">最坏</th><th align="center">平均</th><th align="center">空间</th><th align="center">稳定</th><th align="center">思想</th><th align="center">注意事项</th></tr></thead><tbody><tr><td align="center">冒泡</td><td align="center">O(n)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O(1)</td><td align="center">Y</td><td align="center">比较</td><td align="center">最好情况需要额外判断</td></tr><tr><td align="center">选择</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O(1)</td><td align="center">N</td><td align="center">比较</td><td align="center">顺序选择元素，交换次数较多，不适合大规模数据</td></tr><tr><td align="center">堆</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O(1)</td><td align="center">N</td><td align="center">选择</td><td align="center">堆排序的辅助性较强，理解前先理解堆的数据结构</td></tr><tr><td align="center">插入</td><td align="center">O(n)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O(1)</td><td align="center">Y</td><td align="center">比较</td><td align="center">插入排序对于近乎有序的数据处理速度比较快，复杂度有所下降，可以提前结束</td></tr><tr><td align="center">希尔</td><td align="center">O(nlogn)</td><td align="center">O($n^2$)</td><td align="center">O($nlogn$)</td><td align="center">O(1)</td><td align="center">N</td><td align="center">插入</td><td align="center">gap序列的构造有多种方式，不同方式处理的数据复杂度可能不同</td></tr><tr><td align="center">归并</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O(n)</td><td align="center">Y</td><td align="center">归并</td><td align="center">需要额外的O(n)的存储空间</td></tr><tr><td align="center">快速</td><td align="center">O($nlogn$)</td><td align="center">O($n^2$)</td><td align="center">O($nlogn$)</td><td align="center">O(logn)</td><td align="center">N</td><td align="center">分治</td><td align="center">快排可能存在最坏情况，需要把枢轴值选取得尽量随机化来缓解最坏情况下的时间复杂度</td></tr></tbody></table><h3 id="稳定-vs-不稳定"><a href="#稳定-vs-不稳定" class="headerlink" title="稳定 vs 不稳定"></a>稳定 vs 不稳定</h3><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/stability_playing_cards.svg.png" alt="stability_playing_cards.svg"></p><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1) 冒泡排序"></a>1) 冒泡排序</h3><p>要点</p><ul><li>每轮冒泡不断地比较<strong>相邻</strong>的两个元素，如果它们是逆序的，则交换它们的位置</li><li>下一轮冒泡，可以调整未排序的右边界，减少不必要比较</li></ul><p>以数组 3、2、1 的冒泡排序为例，第一轮冒泡</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504153631958.png" alt="image-20230504153631958"></p><p>第二轮冒泡</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504154044402.png" alt="image-20230504154044402"></p><p>未排序区域内就剩一个元素，结束</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504154213239.png" alt="image-20230504154213239"></p><p>优化手段：每次循环时，若能确定<strong>更合适的</strong>右边界，则可以减少冒泡轮数</p><p>以数组 3、2、1、4、5 为例，第一轮结束后记录的 x，即为右边界</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504161136854.png" alt="image-20230504161136854"></p><p>非递归版代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">                    a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                    a[i + <span class="number">1</span>] = t;</span><br><span class="line">                    x = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j = x;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        bubble(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2) 选择排序"></a>2) 选择排序</h3><h1 id="二-题目"><a href="#二-题目" class="headerlink" title="二. 题目"></a>二. 题目</h1><h2 id="1-二叉搜索树-1"><a href="#1-二叉搜索树-1" class="headerlink" title="1. 二叉搜索树"></a>1. 二叉搜索树</h2><h3 id="E01-删除节点-力扣-450-题"><a href="#E01-删除节点-力扣-450-题" class="headerlink" title="E01. 删除节点-力扣 450 题"></a>E01. 删除节点-力扣 450 题</h3><p>例题已经讲过，用非递归和递归均可实现，这里只给出递归参考代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.val) &#123;</span><br><span class="line">        node.left = deleteNode(node.left, key);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt; key) &#123;</span><br><span class="line">        node.right = deleteNode(node.right, key);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123; <span class="comment">// 情况1 - 只有右孩子</span></span><br><span class="line">        <span class="keyword">return</span> node.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123; <span class="comment">// 情况2 - 只有左孩子</span></span><br><span class="line">        <span class="keyword">return</span> node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right; <span class="comment">// 情况3 - 有两个孩子</span></span><br><span class="line">    <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        s = s.left;</span><br><span class="line">    &#125;</span><br><span class="line">    s.right = deleteNode(node.right, s.val);</span><br><span class="line">    s.left = node.left;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>树节点 TreeNode 相当于例题中的 BSTNode</p><ul><li>TreeNode  有属性：val, left, right，并未区分键值</li><li>BSTNode 有属性：key, value, left, right，区分了键值</li></ul></li><li><p>它的 TreeNode 没有 key，比较用的是 TreeNode.val 属性与待删除 key 进行比较</p></li></ul><h3 id="E02-新增节点-力扣-701-题"><a href="#E02-新增节点-力扣-701-题" class="headerlink" title="E02. 新增节点-力扣 701 题"></a>E02. 新增节点-力扣 701 题</h3><p>例题也讲过了（put），下面给出递归实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode node, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; node.val) &#123;</span><br><span class="line">        node.left = insertIntoBST(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.val &lt; val) &#123;</span><br><span class="line">        node.right = insertIntoBST(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意事项与上题相同，不再赘述</li><li>题目提示输入的 val 一定与树中节点不同，因此只需考虑<strong>新增</strong>情况，不会出现<strong>更新</strong>情况</li></ul><h3 id="E03-查询节点-力扣-700-题"><a href="#E03-查询节点-力扣-700-题" class="headerlink" title="E03. 查询节点-力扣 700 题"></a>E03. 查询节点-力扣 700 题</h3><p>例题讲过，下面给出递归实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode node, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; node.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.val &lt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(node.right, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-验证二叉搜索树-力扣-98-题"><a href="#E04-验证二叉搜索树-力扣-98-题" class="headerlink" title="E04. 验证二叉搜索树-力扣 98 题"></a>E04. 验证二叉搜索树-力扣 98 题</h3><p><strong>中序非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">long</span> <span class="variable">prev</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (prev &gt;= pop.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = pop.val;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>记录 prev 需要用 long，否则若测试用例中最小的节点为 Integer.MIN_VALUE 则测试会失败</li><li>注意，如果相邻两个节点相等，也不应当通过测试，例如，下面的树也是不合法的</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">  / </span><br><span class="line"> 2 </span><br></pre></td></tr></table></figure><p><strong>中序递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doValid(<span class="keyword">new</span> <span class="title class_">AtomicLong</span>(Long.MIN_VALUE),root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doValid</span><span class="params">(AtomicLong prev, TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> doValid(prev, node.left);</span><br><span class="line">    <span class="keyword">if</span> (prev.get() &gt;= node.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prev.set(node.val);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> doValid(prev, node.right);</span><br><span class="line">    <span class="keyword">return</span> a &amp;&amp; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为何不能用 Long 或 long？因为它们都是局部变量且不可变，因此每次赋值时，并不会改变其它方法调用时的 prev</p></li><li><p>要么把 prev 设置为 AtomicLong，要么把 prev 设置为全局变量，而不要采用方法参数这样的局部变量</p></li><li><p>上述代码并不是最有效率的，分析过程见视频讲解</p></li></ul><p><strong>上下限递归</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doValid(node, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">doValid</span><span class="params">(TreeNode node, <span class="type">long</span> min, <span class="type">long</span> max)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt;= min || node.val &gt;= max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doValid(node.left, min, node.val) &amp;&amp; doValid(node.right, node.val, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设每个节点必须在一个范围内：$(min, max)$，不包含边界，若节点值超过这个范围，则返回 false</li><li>对于 node.left 范围肯定是 $(min, node.val)$</li><li>对于 node.right 范围肯定是 $(node.val, max)$</li><li>一开始不知道 min，max 则取 java 中长整数的最小、最大值</li><li>本质是前序遍历 + 剪枝</li></ul><h3 id="E05-求范围和-力扣-938-题"><a href="#E05-求范围和-力扣-938-题" class="headerlink" title="E05. 求范围和-力扣 938 题"></a>E05. 求范围和-力扣 938 题</h3><p><strong>中序递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode node, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> rangeSumBST(node.left, low, high);</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.val &gt;= low &amp;&amp; node.val &lt;= high) &#123;</span><br><span class="line">        b = node.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b + rangeSumBST(node.right, low, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode node, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> node;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.val &gt; high) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pop.val &gt;= low) &#123;</span><br><span class="line">                sum += pop.val;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leedcode 执行耗时 4ms</li></ul><p><strong>上下限递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode node, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt; low) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(node.right, low, high);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (node.val &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(node.left, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.val + </span><br><span class="line">        rangeSumBST(node.left, low, high) + </span><br><span class="line">        rangeSumBST(node.right, low, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leetcode 执行耗时 0 ms</li><li>node.val &lt; low 只需考虑它右子树的累加结果</li><li>node.val &gt; high 只需考虑它左子树的累加结果</li><li>node.val 在范围内，需要把当前节点的值加上其左右子树的累加结果</li></ul><h3 id="E06-根据前序遍历结果构造二叉搜索树-力扣-1008-题"><a href="#E06-根据前序遍历结果构造二叉搜索树-力扣-1008-题" class="headerlink" title="E06. 根据前序遍历结果构造二叉搜索树-力扣 1008 题"></a>E06. 根据前序遍历结果构造二叉搜索树-力扣 1008 题</h3><p><strong>直接插入</strong></p><p>注意：根据前序遍历的结果，可以唯一地构造出一个二叉搜索树</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> insert(<span class="literal">null</span>, preorder[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; preorder.length; i++) &#123;</span><br><span class="line">        insert(root, preorder[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(TreeNode node, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; node.val) &#123;</span><br><span class="line">        node.left = insert(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.val &lt; val)&#123;</span><br><span class="line">        node.right = insert(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上限法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> insert(preorder, Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == preorder.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> preorder[i];</span><br><span class="line">    System.out.println(val + String.format(<span class="string">&quot;[%d]&quot;</span>, max));</span><br><span class="line">    <span class="keyword">if</span> (val &gt; max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    i++;</span><br><span class="line">    node.left = insert(preorder, node.val); </span><br><span class="line">    node.right = insert(preorder, max);     </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次处理 prevorder 中每个值, 返回创建好的节点或 null 作为上个节点的孩子</p><ol><li>如果超过上限, 返回 null</li><li>如果没超过上限, 创建节点, 并将其左右孩子设置完整后返回<ul><li>i++ 需要放在设置左右孩子之前，意思是从剩下的元素中挑选左右孩子</li></ul></li></ol><p><strong>分治法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> partition(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[start]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> start + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder[index] &gt; preorder[start]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// index 就是右子树的起点</span></span><br><span class="line">    root.left = partition(preorder, start + <span class="number">1</span>, index - <span class="number">1</span>);</span><br><span class="line">    root.right = partition(preorder, index, end);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>刚开始 8, 5, 1, 7, 10, 12，方法每次执行，确定本次的根节点和左右子树的分界线</li><li>第一次确定根节点为 8，左子树 5, 1, 7，右子树 10, 12</li><li>对 5, 1, 7 做递归操作，确定根节点是 5， 左子树是 1， 右子树是 7</li><li>对 1 做递归操作，确定根节点是 1，左右子树为 null</li><li>对 7 做递归操作，确定根节点是 7，左右子树为 null</li><li>对 10, 12 做递归操作，确定根节点是 10，左子树为 null，右子树为 12</li><li>对 12 做递归操作，确定根节点是 12，左右子树为 null</li><li>递归结束，返回本范围内的根节点</li></ul><h3 id="E07-二叉搜索树的最近公共祖先-力扣-235-题"><a href="#E07-二叉搜索树的最近公共祖先-力扣-235-题" class="headerlink" title="E07. 二叉搜索树的最近公共祖先-力扣 235 题"></a>E07. 二叉搜索树的最近公共祖先-力扣 235 题</h3><p>要点：若 p，q 在 ancestor 的两侧，则 ancestor 就是它们的最近公共祖先</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ancestor</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (ancestor.val &gt; p.val &amp;&amp; ancestor.val &gt; q.val || </span><br><span class="line">           ancestor.val &lt; p.val &amp;&amp; ancestor.val &lt; q.val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ancestor.val &gt; p.val) &#123;</span><br><span class="line">            ancestor = ancestor.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ancestor = ancestor.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ancestor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最近公共祖先-力扣-236-题"><a href="#二叉树的最近公共祖先-力扣-236-题" class="headerlink" title="二叉树的最近公共祖先-力扣 236 题"></a>二叉树的最近公共祖先-力扣 236 题</h3><h3 id="二叉树展开为链表-力扣-114-题"><a href="#二叉树展开为链表-力扣-114-题" class="headerlink" title="二叉树展开为链表-力扣 114 题"></a>二叉树展开为链表-力扣 114 题</h3><h3 id="有序数组构造平衡二叉搜索树-力扣-108-题"><a href="#有序数组构造平衡二叉搜索树-力扣-108-题" class="headerlink" title="有序数组构造平衡二叉搜索树-力扣 108 题"></a>有序数组构造平衡二叉搜索树-力扣 108 题</h3><h3 id="二叉搜索树变为平衡-力扣-1382-题"><a href="#二叉搜索树变为平衡-力扣-1382-题" class="headerlink" title="二叉搜索树变为平衡-力扣  1382 题"></a>二叉搜索树变为平衡-力扣  1382 题</h3><h2 id="2-hash-表"><a href="#2-hash-表" class="headerlink" title="2. hash 表"></a>2. hash 表</h2><h3 id="E01-两数之和-力扣-1-题"><a href="#E01-两数之和-力扣-1-题" class="headerlink" title="E01. 两数之和-力扣 1 题"></a>E01. 两数之和-力扣 1 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E01Leetcode1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(k)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, map.get(k)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：题目明确说明<strong>只会存在一个有效答案</strong>，因此不会执行到最后的 return null</li></ul><h3 id="E02-无重复字符的最长字串-力扣-3-题"><a href="#E02-无重复字符的最长字串-力扣-3-题" class="headerlink" title="E02. 无重复字符的最长字串-力扣 3 题"></a>E02. 无重复字符的最长字串-力扣 3 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(ch)) &#123; <span class="comment">// 重复时调整 begin</span></span><br><span class="line">            begin = Math.max(begin, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">            map.put(ch, end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不重复</span></span><br><span class="line">            map.put(ch, end);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.substring(begin, end + <span class="number">1</span>));</span><br><span class="line">        maxLength = Math.max(maxLength, end - begin + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>begin 调整时的解释，遇到重复的 begin 应该向右调整，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abca</span><br></pre></td></tr></table></figure><ul><li>遇到重复的 a，这时 begin 应该调整到上个重复字符 a 索引加 1 处，即 map.get(‘a’) + 1 &#x3D; 1，</li></ul><p>但还有一种情况需要考虑，就是连续遇到两次重复，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abba</span><br></pre></td></tr></table></figure><ul><li>遇到重复的 b，这时 begin 应该调整到上个重复字符 b 索引加 1 处，即 map.get(‘b’) + 1 &#x3D; 2</li><li>不过接下来，又遇到了重复的 a，此时若还执行 map.get(‘a’) + 1 &#x3D; 1，则 begin 相当于向左退了，不对</li><li>应该是 Math.max(2, map.get(‘a’) + 1)，即 begin 应该是两个重复字符索引中更靠右者</li></ul><p>题目中说明 s 由英文字母、数字、符号和空格组成，因此它的范围是有限的（在 0 ~127 之内），可以用数组来替代 HashMap 优化，如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">    Arrays.fill(map, -<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">        <span class="keyword">if</span> (map[ch] != -<span class="number">1</span>) &#123; <span class="comment">// 重复时调整 begin</span></span><br><span class="line">            begin = Math.max(begin, map[ch] + <span class="number">1</span>);</span><br><span class="line">            map[ch] = end;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不重复</span></span><br><span class="line">            map[ch] = end;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.substring(begin, end + <span class="number">1</span>));</span><br><span class="line">        maxLength = Math.max(maxLength, end - begin + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E03-字母异位词分组-力扣-49-题"><a href="#E03-字母异位词分组-力扣-49-题" class="headerlink" title="E03. 字母异位词分组-力扣 49 题"></a>E03. 字母异位词分组-力扣 49 题</h3><p>解法1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        List&lt;String&gt; strings = map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        strings.add(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrayKey</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] key = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayKey</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            key[ch - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayKey</span> <span class="variable">arrayKey</span> <span class="operator">=</span> (ArrayKey) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(key, arrayKey.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    HashMap&lt;ArrayKey, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        List&lt;String&gt; strings = map.computeIfAbsent(<span class="keyword">new</span> <span class="title class_">ArrayKey</span>(str), k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        strings.add(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-判断有没有重复元素-力扣-217"><a href="#E04-判断有没有重复元素-力扣-217" class="headerlink" title="E04. 判断有没有重复元素-力扣 217"></a>E04. 判断有没有重复元素-力扣 217</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123; <span class="comment">// 5ms</span></span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> key : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E05-找出出现一次的数字-力扣-136"><a href="#E05-找出出现一次的数字-力扣-136" class="headerlink" title="E05. 找出出现一次的数字-力扣 136"></a>E05. 找出出现一次的数字-力扣 136</h3><p>解法1：用 HashSet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">            set.remove(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>])[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2：用 xor</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        num = num ^ nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E06-判断字母异位词-力扣-242"><a href="#E06-判断字母异位词-力扣-242" class="headerlink" title="E06. 判断字母异位词-力扣 242"></a>E06. 判断字母异位词-力扣 242</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123; <span class="comment">// 1ms</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.equals(getKey(s), getKey(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getKey(String s) &#123;</span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : chars) &#123;</span><br><span class="line">        array[ch - <span class="number">97</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中用 s.toCharArray() 性能明显高于用 s.charAt() 一个个获取字符</li></ul><h3 id="E07-第一个不重复字符-力扣-387"><a href="#E07-第一个不重复字符-力扣-387" class="headerlink" title="E07. 第一个不重复字符-力扣 387"></a>E07. 第一个不重复字符-力扣 387</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : chars) &#123;</span><br><span class="line">        array[ch-<span class="number">97</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        <span class="keyword">if</span> (array[ch - <span class="number">97</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E08-出现次数最多的单词-力扣-819"><a href="#E08-出现次数最多的单词-力扣-819" class="headerlink" title="E08. 出现次数最多的单词-力扣 819"></a>E08. 出现次数最多的单词-力扣 819</h3><p>简洁解法 14 ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; banSet = Set.of(banned);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">String[] split = paragraph.toLowerCase().split(<span class="string">&quot;[^A-Za-z]+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : split) &#123;</span><br><span class="line">        <span class="keyword">if</span>(banSet.contains(key)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.compute(key, (k, v) -&gt; v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">Optional&lt;Map.Entry&lt;String, Integer&gt;&gt; optional = map.entrySet().stream().max(Map.Entry.comparingByValue());</span><br><span class="line">    <span class="keyword">return</span> optional.map(Map.Entry::getKey).orElse(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后两行避免 lambda，12 ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; banSet = Set.of(banned);</span><br><span class="line">    String[] split = paragraph.toLowerCase().split(<span class="string">&quot;[^A-Za-z]+&quot;</span>);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String key : split) &#123;</span><br><span class="line">        <span class="keyword">if</span>(banSet.contains(key)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.compute(key, (k, v) -&gt; v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.entrySet()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">        <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">            max = value;</span><br><span class="line">            maxKey = e.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免正则匹配 5ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; banSet = Set.of(banned);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] chars = paragraph.toLowerCase().toCharArray();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            put(banSet, map, sb);</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    put(banSet, map, sb);</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.entrySet()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">        <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">            max = value;</span><br><span class="line">            maxKey = e.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Set&lt;String&gt; banSet, HashMap&lt;String, Integer&gt; map, StringBuilder sb)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sb.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        <span class="keyword">if</span>(!banSet.contains(key)) &#123;</span><br><span class="line">            map.compute(key, (k, v) -&gt; v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sb 避免每次新建 4ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sb.setLength(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="E09-Leetcode105Improved"><a href="#E09-Leetcode105Improved" class="headerlink" title="E09. Leetcode105Improved"></a>E09. Leetcode105Improved</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E09Leetcode105Improved</span> &#123;</span><br><span class="line">    <span class="comment">//  用 hashmap 改善查找性能，其中 key 是 inOrder 值， value 是 inOrder 索引</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preOrder, <span class="type">int</span>[] inOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">            map.put(inOrder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(preOrder, <span class="number">0</span>, <span class="number">0</span>, inOrder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preBegin 决定了每次在 preOrder 中找到根元素</span></span><br><span class="line">    <span class="comment">// inBegin 和 inEnd 可以用来获取区间内元素个数，结束递归等</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] preOrder, <span class="type">int</span> preBegin, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt; inEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> preOrder[preBegin];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> map.get(rootValue);</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> i - inBegin;</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; left[&quot;</span> + (preBegin + <span class="number">1</span>) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + inBegin + <span class="string">&quot;~&quot;</span> + (i - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; right[&quot;</span> + (preBegin + <span class="number">1</span> + leftSize) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;~&quot;</span> + inEnd + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        root.left = helper(preOrder, preBegin + <span class="number">1</span>, inBegin, i - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(preOrder, preBegin + <span class="number">1</span> + leftSize, i + <span class="number">1</span>, inEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] preOrder = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] inOrder = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        例如：</span></span><br><span class="line"><span class="comment">        根据根节点[1] 到中序遍历数组中一分为2，首次递归</span></span><br><span class="line"><span class="comment">            [1] 2  4  3  6  7  前</span></span><br><span class="line"><span class="comment">            0   1  2  3  4  5  前索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            4  2  [1] 6  3  7  中</span></span><br><span class="line"><span class="comment">            0  1  2   3  4  5  中索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            确定 preOrder 中 left 和 right 的递归起始索引，当然也要确定 inOrder 对应的两个索引位置</span></span><br><span class="line"><span class="comment">                left    right</span></span><br><span class="line"><span class="comment">            1   [2]  4  [3]  6  7  前</span></span><br><span class="line"><span class="comment">            0   1    2  3    4  5  前索引</span></span><br><span class="line"><span class="comment">            left  inOrder 索引范围： 0~1</span></span><br><span class="line"><span class="comment">            right inOrder 索引范围： 3~5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E09Leetcode105Improved</span>().buildTree(preOrder, inOrder);</span><br><span class="line">        System.out.println(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E10-E10Leetcode106Improved"><a href="#E10-E10Leetcode106Improved" class="headerlink" title="E10. E10Leetcode106Improved"></a>E10. E10Leetcode106Improved</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E10Leetcode106Improved</span> &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inOrder, <span class="type">int</span>[] postOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">            map.put(inOrder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(postOrder, postOrder.length - <span class="number">1</span>, <span class="number">0</span>, inOrder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        inOrder = &#123;4,2,1,6,3,7&#125;</span></span><br><span class="line"><span class="comment">        postOrder = &#123;4,2,6,7,3,1&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] postOrder, <span class="type">int</span> postEnd, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt; inEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> postOrder[postEnd];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> map.get(rootValue);</span><br><span class="line"><span class="comment">//        int leftSize = i - inBegin;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightSize</span> <span class="operator">=</span> inEnd - i;</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; left[&quot;</span> + (postEnd - <span class="number">1</span> - rightSize) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + inBegin + <span class="string">&quot;~&quot;</span> + (i - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; right[&quot;</span> + (postEnd - <span class="number">1</span>) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;~&quot;</span> + inEnd + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        root.left = helper(postOrder, postEnd - <span class="number">1</span> - rightSize, inBegin, i - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(postOrder, postEnd - <span class="number">1</span>, i + <span class="number">1</span>, inEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] postOrder = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] inOrder = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E10Leetcode106Improved</span>().buildTree(inOrder, postOrder);</span><br><span class="line">        System.out.println(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Delaunay三角网</title>
      <link href="/posts/65ce02f4/"/>
      <url>/posts/65ce02f4/</url>
      
        <content type="html"><![CDATA[<h3 id="Delaunay-三角网"><a href="#Delaunay-三角网" class="headerlink" title="Delaunay 三角网"></a>Delaunay 三角网</h3><p>Delaunay 三角网是计算几何学中的一种三角剖分方法，用于将给定的点集合连接成不重叠且无内部点的三角形组成的网格结构。Delaunay 三角网具有一些重要的性质，使其在许多应用领域中得到广泛应用，例如计算机图形学、计算机视觉、地理信息系统和有限元分析等。</p><p>Delaunay 三角网的生成过程基于以下原则：给定一组点，如果点集中没有任何点在某个三角形的外接圆内部，则该三角形属于 Delaunay 三角网。换句话说，Delaunay 三角网中的任何一个三角形都满足其外接圆不包含其他点。这个性质使得 Delaunay 三角网具有最大化最小角的特点，使得三角形的形状更加均匀和稳定。</p><p>Delaunay 三角网的生成可以使用多种算法，其中最常用的是Bowyer-Watson算法，其基本思想如下：</p><ol><li><p>初始化：将点集中的几个点组成一个超级三角形，该超级三角形完全包含所有的点。</p></li><li><p>逐点插入：对于点集中的每个点，将其插入到当前的 Delaunay 三角网中。</p></li><li><p>修复：对于每个新插入的点，需要更新 Delaunay 三角网，确保满足 Delaunay 性质。这涉及到删除包含新点的三角形，然后重新连接形成新的三角形。</p></li><li><p>结束：当所有点都被插入并且网格满足 Delaunay 性质时，生成的三角网即为 Delaunay 三角网。</p></li></ol><p>Delaunay 三角网具有许多重要的性质，使其在实际应用中得到广泛应用：</p><ol><li><p>最大化最小角：Delaunay 三角网的三角形具有最大化最小角的特点，使得网格中的三角形形状更加均匀和稳定，有利于数值计算和模拟分析。</p></li><li><p>最小化边长：Delaunay 三角网的边长相对较小，可以提高网格的精度和拟合性能。</p></li><li><p>惟一性：给定一组点，对应的 Delaunay 三角网是唯一的，无论使用何种算法生成。</p></li><li><p>局部特性：Delaunay 三角网的局部结构与周围的点有关，当添加、删除或移动一个点时，只需要更新相邻的三角形，而不需要对整个网格进行重新计算。</p></li></ol><p>Delaunay 三</p><p>角网在许多领域中有广泛的应用，包括但不限于以下几个方面：</p><ol><li><p>计算机图形学：Delaunay 三角网可以用于生成高质量的三角网格，用于三维建模、形状重建、表面重建和体积渲染等任务。它能够确保生成的三角形形状合理，且没有不良的尖角或扭曲。</p></li><li><p>计算机视觉：Delaunay 三角网在图像处理和计算机视觉中扮演重要角色。例如，在图像拼接和图像配准中，可以使用 Delaunay 三角网进行特征点匹配和对齐。</p></li><li><p>地理信息系统（GIS）：Delaunay 三角网可用于对地理数据进行空间分析和处理。它可以用于地形建模、地貌分析、地理插值和地图绘制等任务。</p></li><li><p>有限元分析：Delaunay 三角网可作为有限元方法中的基础网格。它能够提供高质量的网格，用于模拟和分析复杂结构的物理行为，如弹性力学、流体力学和电磁场分析。</p></li><li><p>最近邻搜索：Delaunay 三角网的拓扑结构可以用于高效地搜索点集中某个点的最近邻。这在模式识别、数据挖掘和机器学习中是一个常见的任务。</p></li><li><p>仿真与优化：Delaunay 三角网可以作为仿真和优化算法的输入数据结构。它可以用于优化路径规划、传感器布局、机器人导航等应用，以提高系统的效率和性能。</p></li></ol><p>总结而言，Delaunay 三角网是一种强大的几何计算工具，具有均匀性、稳定性和最优化性质。它在计算机图形学、计算机视觉、地理信息系统、有限元分析等领域发挥着重要作用，并提供了许多实际问题的解决方案。</p><p><img src="/rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230706110328246.png" alt="image-20230706110328246"></p>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法1</title>
      <link href="/posts/239d0cb7/"/>
      <url>/posts/239d0cb7/</url>
      
        <content type="html"><![CDATA[<h1 id="一-初识算法"><a href="#一-初识算法" class="headerlink" title="一. 初识算法"></a>一. 初识算法</h1><h2 id="1-1-什么是算法？"><a href="#1-1-什么是算法？" class="headerlink" title="1.1 什么是算法？"></a>1.1 什么是算法？</h2><p><strong>定义</strong></p><p>在数学和计算机科学领域，算法是一系列有限的严谨指令，通常用于解决一类特定问题或执行计算</p><blockquote><p>In mathematics and computer science, an <strong>algorithm</strong> (&#x2F;ˈælɡərɪðəm&#x2F;) is a finite sequence of rigorous instructions, typically used to solve a class of specific problems or to perform a computation.[^1]</p></blockquote><p><strong>Introduction to Algorithm[^2]</strong></p><p>不正式的说，算法就是任何定义优良的计算过程：接收一些值作为输入，在有限的时间内，产生一些值作为输出。</p><blockquote><p>Informally, an algorithm is any well-defined computational procedure that takes some value, or set of values, as input and produces some value, or set of values, as output in a finite amount of time.</p></blockquote><h2 id="1-2-什么是数据结构？"><a href="#1-2-什么是数据结构？" class="headerlink" title="1.2 什么是数据结构？"></a>1.2 什么是数据结构？</h2><p><strong>定义</strong></p><p>在计算机科学领域，数据结构是一种数据组织、管理和存储格式，通常被选择用来高效访问数据</p><blockquote><p>In computer science, a <strong>data structure</strong> is a data organization, management, and storage format that is usually chosen for efficient access to data</p></blockquote><p><strong>Introduction to Algorithm[^2]</strong></p><p>数据结构是一种存储和组织数据的方式，旨在便于访问和修改</p><blockquote><p>A data structure is a way to store and organize data in order to facilitate access and modifications</p></blockquote><p>接下来我们通过对一个非常著名的二分查找算法的讲解来认识一下算法</p><h2 id="1-3-二分查找-3"><a href="#1-3-二分查找-3" class="headerlink" title="1.3 二分查找 [^3]"></a>1.3 二分查找 [^3]</h2><p>二分查找算法也称折半查找，是一种非常高效的工作于有序数组的查找算法。后续的课程中还会学习更多的查找算法，但在此之前，不妨用它作为入门。</p><h3 id="二分查找基础版"><a href="#二分查找基础版" class="headerlink" title="二分查找基础版"></a>二分查找基础版</h3><p>需求：在<strong>有序</strong>数组 $A$ 内，查找值 $target$</p><ul><li>如果找到返回索引</li><li>如果找不到返回 $-1$</li></ul><table><thead><tr><th>算法描述</th><th></th></tr></thead><tbody><tr><td>前提</td><td>给定一个内含 $n$ 个元素的有序数组 $A$，满足 $A_{0}\leq A_{1}\leq A_{2}\leq \cdots \leq A_{n-1}$，一个待查值 $target$</td></tr><tr><td>1</td><td>设置 $i&#x3D;0$，$j&#x3D;n-1$</td></tr><tr><td>2</td><td>如果 $i \gt j$，结束查找，没找到</td></tr><tr><td>3</td><td>设置 $m &#x3D; floor(\frac {i+j}{2})$ ，$m$ 为中间索引，$floor$ 是向下取整（$\leq \frac {i+j}{2}$ 的最小整数）</td></tr><tr><td>4</td><td>如果 $target &lt; A_{m}$ 设置 $j &#x3D; m - 1$，跳到第2步</td></tr><tr><td>5</td><td>如果 $A_{m} &lt; target$ 设置 $i &#x3D; m + 1$，跳到第2步</td></tr><tr><td>6</td><td>如果 $A_{m} &#x3D; target$，结束查找，找到了</td></tr></tbody></table><p>java 实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;<span class="comment">// 在左边</span></span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;<span class="comment">// 在右边</span></span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>$i,j$ 对应着搜索区间 $[0,a.length-1]$（注意是闭合的区间），$i&lt;&#x3D;j$ 意味着搜索区间内还有未比较的元素，$i,j$ 指向的元素也可能是比较的目标<ul><li>思考：如果不加 $i&#x3D;&#x3D;j$ 行不行？</li><li>回答：不行，因为这意味着 $i,j$ 指向的元素会漏过比较</li></ul></li><li>$m$ 对应着中间位置，中间位置左边和右边的元素可能不相等（差一个），不会影响结果</li><li>如果某次未找到，那么缩小后的区间内不包含 $m$</li></ul><h3 id="二分查找改变版"><a href="#二分查找改变版" class="headerlink" title="二分查找改变版"></a>二分查找改变版</h3><p>另一种写法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;<span class="comment">// 在左边</span></span><br><span class="line">            j = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;<span class="comment">// 在右边</span></span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>$i,j$ 对应着搜索区间 $[0,a.length)$（注意是左闭右开的区间），$i&lt;j$ 意味着搜索区间内还有未比较的元素，$j$ 指向的<strong>一定不是</strong>查找目标<ul><li>思考：为啥这次不加 $i&#x3D;&#x3D;j$ 的条件了？</li><li>回答：这回 $j$ 指向的不是查找目标，如果还加 $i&#x3D;&#x3D;j$ 条件，就意味着 $j$ 指向的还会再次比较，找不到时，会死循环</li></ul></li><li>如果某次要缩小右边界，那么 $j&#x3D;m$，因为此时的 $m$ 已经<strong>不是</strong>查找目标了</li></ul><h3 id="衡量算法好坏"><a href="#衡量算法好坏" class="headerlink" title="衡量算法好坏"></a>衡量算法好坏</h3><p><strong>时间复杂度</strong></p><p>下面的查找算法也能得出与之前二分查找一样的结果，那你能说出它差在哪里吗？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        i &lt; a.length;</span><br><span class="line">        i++</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑最坏情况下（没找到）例如 <code>[1,2,3,4]</code> 查找 5</p><ul><li><code>int i = 0</code> 只执行一次</li><li><code>i &lt; a.length</code> 受数组元素个数 $n$ 的影响，比较 $n+1$ 次</li><li><code>i++</code> 受数组元素个数 $n$ 的影响，自增 $n$ 次</li><li><code>a[i] == k</code> 受元素个数 $n$ 的影响，比较 $n$ 次</li><li><code>return -1</code>，执行一次</li></ul><p>粗略认为每行代码执行时间是 $t$，假设 $n&#x3D;4$ 那么</p><ul><li>总执行时间是 $(1+4+1+4+4+1)*t &#x3D; 15t$</li><li>可以推导出更一般地公式为，$T &#x3D; (3*n+3)t$</li></ul><p>如果套用二分查找算法，还是 <code>[1,2,3,4]</code> 查找 5</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;<span class="comment">// 在左边</span></span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;<span class="comment">// 在右边</span></span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>int i = 0, j = a.length - 1</code> 各执行 1 次</p></li><li><p><code>i &lt;= j</code> 比较 $floor(\log_{2}(n)+1)$ 再加 1 次</p></li><li><p><code>(i + j) &gt;&gt;&gt; 1</code> 计算 $floor(\log_{2}(n)+1)$ 次</p></li><li><p>接下来 <code>if() else if() else</code> 会执行 $3* floor(\log_{2}(n)+1)$ 次，分别为</p><ul><li>if 比较</li><li>else if 比较</li><li>else if 比较成立后的赋值语句</li></ul></li><li><p><code>return -1</code>，执行一次</p></li></ul><p>结果：</p><ul><li>总执行时间为 $(2 + (1+3) + 3 + 3 * 3 +1)*t &#x3D; 19t$</li><li>更一般地公式为 $(4 + 5 * floor(\log_{2}(n)+1))*t$</li></ul><blockquote><p><strong>注意：</strong></p><p>左侧未找到和右侧未找到结果不一样，这里不做分析</p></blockquote><p>两个算法比较，可以看到 $n$ 在较小的时候，二者花费的次数差不多</p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221108095747933.png" alt="image-20221108095747933" style="zoom:50%;" /><p>但随着 $n$ 越来越大，比如说 $n&#x3D;1000$ 时，用二分查找算法（红色）也就是 $54t$，而蓝色算法则需要 $3003t$</p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221108100014451.png" alt="image-20221108100014451" style="zoom:50%;" /><blockquote><p>画图采用的是 <a href="https://www.desmos.com/calculator?lang=zh-CN">Desmos | 图形计算器</a></p></blockquote><p>计算机科学中，<strong>时间复杂度</strong>是用来衡量：一个算法的执行，随数据规模增大，而增长的时间成本</p><ul><li>不依赖于环境因素</li></ul><p>如何表示时间复杂度呢？</p><ul><li><p>假设算法要处理的数据规模是 $n$，代码总的执行行数用函数 $f(n)$ 来表示，例如：</p><ul><li>线性查找算法的函数 $f(n) &#x3D; 3*n + 3$</li><li>二分查找算法的函数 $f(n) &#x3D; (floor(log_2(n)) + 1) * 5 + 4$</li></ul></li><li><p>为了对 $f(n)$ 进行化简，应当抓住主要矛盾，找到一个变化趋势与之相近的表示法</p></li></ul><p><strong>大 $O$ 表示法[^4]</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221108103846566.png" alt="image-20221108103846566"></p><p>其中</p><ul><li>$c, c_1, c_2$ 都为一个常数</li><li>$f(n)$ 是实际执行代码行数与 n 的函数</li><li>$g(n)$ 是经过化简，变化趋势与 $f(n)$ 一致的 n 的函数</li></ul><p><strong>渐进上界</strong></p><p>渐进上界（asymptotic upper bound）：从某个常数 $n_0$开始，$c*g(n)$ 总是位于 $f(n)$ 上方，那么记作 $O(g(n))$</p><ul><li>代表算法执行的最差情况</li></ul><p>例1</p><ul><li>$f(n) &#x3D; 3*n+3$ </li><li>$g(n) &#x3D; n$</li><li>取 $c&#x3D;4$，在$n_0&#x3D;3$ 之后，$g(n)$ 可以作为 $f(n)$ 的渐进上界，因此表示法写作 $O(n)$</li></ul><p>例2</p><ul><li>$f(n) &#x3D; 5*floor(log_2(n)) + 9$</li><li>$g(n) &#x3D; log_2(n)$</li><li>$O(log_2(n))$</li></ul><p>已知 $f(n)$ 来说，求 $g(n)$</p><ul><li>表达式中相乘的常量，可以省略，如<ul><li>$f(n) &#x3D; 100*n^2$ 中的 $100$</li></ul></li><li>多项式中数量规模更小（低次项）的表达式，如<ul><li>$f(n)&#x3D;n^2+n$ 中的 $n$</li><li>$f(n) &#x3D; n^3 + n^2$ 中的 $n^2$</li></ul></li><li>不同底数的对数，渐进上界可以用一个对数函数 $\log n$ 表示<ul><li>例如：$log_2(n)$ 可以替换为 $log_{10}(n)$，因为 $log_2(n) &#x3D; \frac{log_{10}(n)}{log_{10}(2)}$，相乘的常量 $\frac{1}{log_{10}(2)}$ 可以省略</li></ul></li><li>类似的，对数的常数次幂可省略<ul><li>如：$log(n^c) &#x3D; c * log(n)$</li></ul></li></ul><p><strong>常见大 $O$ 表示法</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221108114915524.png" alt="image-20221108114915524"></p><p> 按时间复杂度从低到高</p><ul><li>黑色横线 $O(1)$，常量时间，意味着算法时间并不随数据规模而变化</li><li>绿色 $O(log(n))$，对数时间</li><li>蓝色 $O(n)$，线性时间，算法时间与数据规模成正比</li><li>橙色 $O(n*log(n))$，拟线性时间</li><li>红色 $O(n^2)$ 平方时间</li><li>黑色朝上 $O(2^n)$ 指数时间</li><li>没画出来的 $O(n!)$</li></ul><p><strong>渐进下界</strong></p><p>渐进下界（asymptotic lower bound）：从某个常数 $n_0$开始，$c*g(n)$ 总是位于 $f(n)$ 下方，那么记作 $\Omega(g(n))$</p><p><strong>渐进紧界</strong></p><p>渐进紧界（asymptotic tight bounds）：从某个常数 $n_0$开始，$f(n)$ 总是在 $c_1<em>g(n)$ 和 $c_2</em>g(n)$ 之间，那么记作 $\Theta(g(n))$</p><p><strong>空间复杂度</strong></p><p>与时间复杂度类似，一般也使用大 $O$ 表示法来衡量：一个算法执行随数据规模增大，而增长的<strong>额外</strong>空间成本</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchBasic</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;    <span class="comment">// 设置指针和初值</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;                <span class="comment">// i~j 范围内有东西</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; a[m]) &#123;         <span class="comment">// 目标在左边</span></span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123; <span class="comment">// 目标在右边</span></span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                    <span class="comment">// 找到了</span></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二分查找性能</strong></p><p>下面分析二分查找算法的性能</p><p>时间复杂度</p><ul><li>最坏情况：$O(\log n)$</li><li>最好情况：如果待查找元素恰好在数组中央，只需要循环一次 $O(1)$</li></ul><p>空间复杂度</p><ul><li>需要常数个指针 $i,j,m$，因此额外占用的空间是 $O(1)$</li></ul><h3 id="二分查找平衡版"><a href="#二分查找平衡版" class="headerlink" title="二分查找平衡版"></a>二分查找平衡版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchBalance</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt; j - i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (a[i] == target) ? i : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思想：</p><ol><li>左闭右开的区间，$i$ 指向的可能是目标，而 $j$ 指向的不是目标</li><li>不奢望循环内通过 $m$ 找出目标, 缩小区间直至剩 1 个, 剩下的这个可能就是要找的（通过 $i$）<ul><li>$j - i &gt; 1$ 的含义是，在范围内待比较的元素个数 &gt; 1</li></ul></li><li>改变 $i$ 边界时，它指向的可能是目标，因此不能 $m+1$</li><li>循环内的平均比较次数减少了</li><li>时间复杂度 $\Theta(log(n))$</li></ol><h3 id="二分查找-Java-版"><a href="#二分查找-Java-版" class="headerlink" title="二分查找 Java 版"></a>二分查找 Java 版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch0</span><span class="params">(<span class="type">long</span>[] a, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex,</span></span><br><span class="line"><span class="params">                                     <span class="type">long</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> fromIndex;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">midVal</span> <span class="operator">=</span> a[mid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (midVal &lt; key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">// key found</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// key not found.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例如 $[1,3,5,6]$ 要插入 $2$ 那么就是找到一个位置，这个位置左侧元素都比它小<ul><li>等循环结束，若没找到，low 左侧元素肯定都比 target 小，因此 low 即插入点</li></ul></li><li>插入点取负是为了与找到情况区分</li><li>-1 是为了把索引 0 位置的插入点与找到的情况进行区分</li></ul><h3 id="Leftmost-与-Rightmost"><a href="#Leftmost-与-Rightmost" class="headerlink" title="Leftmost 与 Rightmost"></a>Leftmost 与 Rightmost</h3><p>有时我们希望返回的是最左侧的重复元素，如果用 Basic 二分查找</p><ul><li><p>对于数组 $[1, 2, 3, 4, 4, 5, 6, 7]$，查找元素4，结果是索引3</p></li><li><p>对于数组 $[1, 2, 4, 4, 4, 5, 6, 7]$，查找元素4，结果也是索引3，并不是最左侧的元素</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchLeftmost1</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            candidate = m; <span class="comment">// 记录候选位置</span></span><br><span class="line">            j = m - <span class="number">1</span>;     <span class="comment">// 继续向左</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望返回的是最右侧元素</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRightmost1</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            candidate = m; <span class="comment">// 记录候选位置</span></span><br><span class="line">            i = m + <span class="number">1</span>;   <span class="comment">// 继续向右</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><p>对于 Leftmost 与 Rightmost，可以返回一个比 -1 更有用的值</p><p>Leftmost 改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchLeftmost</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leftmost 返回值的另一层含义：$\lt target$ 的元素个数</li><li>小于等于中间值，都要向左找</li></ul><p>Rightmost 改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRightmost</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大于等于中间值，都要向右找</li></ul><p>几个名词</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221125174155058.png" alt="image-20221125174155058"></p><p><strong>范围查询</strong>：</p><ul><li>查询 $x \lt 4$，$0 .. leftmost(4) - 1$</li><li>查询 $x \leq 4$，$0 .. rightmost(4)$</li><li>查询 $4 \lt x$，$rightmost(4) + 1 .. \infty $</li><li>查询 $4 \leq x$， $leftmost(4) .. \infty$</li><li>查询 $4 \leq x \leq 7$，$leftmost(4) .. rightmost(7)$</li><li>查询 $4 \lt x \lt 7$，$rightmost(4)+1 .. leftmost(7)-1$</li></ul><p><strong>求排名</strong>：$leftmost(target) + 1$</p><ul><li>$target$ 可以不存在，如：$leftmost(5)+1 &#x3D; 6$</li><li>$target$ 也可以存在，如：$leftmost(4)+1 &#x3D; 3$</li></ul><p><strong>求前任（predecessor）</strong>：$leftmost(target) - 1$</p><ul><li>$leftmost(3) - 1 &#x3D; 1$，前任 $a_1 &#x3D; 2$</li><li>$leftmost(4) - 1 &#x3D; 1$，前任 $a_1 &#x3D; 2$</li></ul><p><strong>求后任（successor）</strong>：$rightmost(target)+1$</p><ul><li>$rightmost(5) + 1 &#x3D; 5$，后任 $a_5 &#x3D; 7$</li><li>$rightmost(4) + 1 &#x3D; 5$，后任 $a_5 &#x3D; 7$</li></ul><p><strong>求最近邻居</strong>：</p><ul><li>前任和后任距离更近者</li></ul><h1 id="二-基础数据结构"><a href="#二-基础数据结构" class="headerlink" title="二. 基础数据结构"></a>二. 基础数据结构</h1><h2 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1 数组"></a>2.1 数组</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>定义</strong></p><p>在计算机科学中，数组是由一组元素（值或变量）组成的数据结构，每个元素有至少一个索引或键来标识</p><blockquote><p>In computer science, an <strong>array</strong> is a data structure consisting of a collection of <em>elements</em> (values or variables), each identified by at least one <em>array index</em> or <em>key</em></p></blockquote><p>因为数组内的元素是<strong>连续存储</strong>的，所以数组中元素的地址，可以通过其索引计算出来，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>知道了数组的<strong>数据</strong>起始地址 $BaseAddress$，就可以由公式 $BaseAddress + i * size$ 计算出索引 $i$ 元素的地址</p><ul><li>$i$ 即索引，在 Java、C 等语言都是从 0 开始</li><li>$size$ 是每个元素占用字节，例如 $int$ 占 $4$，$double$ 占 $8$</li></ul><p><strong>小测试</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>已知 array 的<strong>数据</strong>的起始地址是 0x7138f94c8，那么元素 3 的地址是什么？</p><blockquote><p>答：0x7138f94c8 + 2 * 1 &#x3D; 0x7138f94ca</p></blockquote><p><strong>空间占用</strong></p><p>Java 中数组结构为</p><ul><li>8 字节 markword</li><li>4 字节 class 指针（压缩 class 指针的情况）</li><li>4 字节 数组大小（决定了数组最大容量是 $2^{32}$）</li><li>数组元素 + 对齐字节（java 中所有对象大小都是 8 字节的整数倍[^12]，不足的要用对齐字节补足）</li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>的大小为 40 个字节，组成如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8 + 4 + 4 + 5*4 + 4(alignment)</span><br></pre></td></tr></table></figure><p><strong>随机访问性能</strong></p><p>即根据索引查找元素，时间复杂度是 $O(1)$</p><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p><strong>java 版本</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicArray</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 逻辑大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">8</span>; <span class="comment">// 容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向最后位置 [size] 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 待添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> element)</span> &#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向 [0 .. size] 位置添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 待添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> element)</span> &#123;</span><br><span class="line">        checkAndGrow();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size) &#123;</span><br><span class="line">            <span class="comment">// 向后挪动, 空出待插入位置</span></span><br><span class="line">            System.arraycopy(array, index,</span><br><span class="line">                    array, index + <span class="number">1</span>, size - index);</span><br><span class="line">        &#125;</span><br><span class="line">        array[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAndGrow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 容量检查</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            array = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            <span class="comment">// 进行扩容, 1.5 1.618 2</span></span><br><span class="line">            capacity += capacity &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] newArray = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">            System.arraycopy(array, <span class="number">0</span>,</span><br><span class="line">                    newArray, <span class="number">0</span>, size);</span><br><span class="line">            array = newArray;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 [0 .. size) 范围删除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被删除元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">// [0..size)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removed</span> <span class="operator">=</span> array[index];</span><br><span class="line">        <span class="keyword">if</span> (index &lt; size - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 向前挪动</span></span><br><span class="line">            System.arraycopy(array, index + <span class="number">1</span>,</span><br><span class="line">                    array, index, size - index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> removed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置, 在 [0..size) 区间内</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 该索引位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历方法1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumer 遍历要执行的操作, 入参: 每个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foreach</span><span class="params">(Consumer&lt;Integer&gt; consumer)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">// 提供 array[i]</span></span><br><span class="line">            <span class="comment">// 返回 void</span></span><br><span class="line">            consumer.accept(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历方法2 - 迭代器遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123; <span class="comment">// 有没有下一个元素</span></span><br><span class="line">                <span class="keyword">return</span> i &lt; size;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123; <span class="comment">// 返回当前元素,并移动到下一个元素</span></span><br><span class="line">                <span class="keyword">return</span> array[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历方法3 - stream 遍历</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> stream 流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> IntStream <span class="title function_">stream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IntStream.of(Arrays.copyOfRange(array, <span class="number">0</span>, size));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这些方法实现，都简化了 index 的有效性判断，假设输入的 index 都是合法的</li></ul><p><strong>插入或删除性能</strong></p><p>头部位置，时间复杂度是 $O(n)$</p><p>中间位置，时间复杂度是 $O(n)$</p><p>尾部位置，时间复杂度是 $O(1)$（均摊来说）</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] array = &#123;</span><br><span class="line">    &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>&#125;,</span><br><span class="line">    &#123;<span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内存图如下</p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221104114132056.png" alt="image-20221104114132056" style="zoom:67%;" /><ul><li><p>二维数组占 32 个字节，其中 array[0]，array[1]，array[2] 三个元素分别保存了指向三个一维数组的引用</p></li><li><p>三个一维数组各占 40 个字节</p></li><li><p>它们在内层布局上是<strong>连续</strong>的</p></li></ul><p>更一般的，对一个二维数组 $Array[m][n]$</p><ul><li>$m$ 是外层数组的长度，可以看作 row 行</li><li>$n$ 是内层数组的长度，可以看作 column 列</li><li>当访问 $Array[i][j]$，$0\leq i \lt m, 0\leq j \lt n$时，就相当于<ul><li>先找到第 $i$ 个内层数组（行）</li><li>再找到此内层数组中第 $j$ 个元素（列）</li></ul></li></ul><p><strong>小测试</strong></p><p>Java 环境下（不考虑类指针和引用压缩，此为默认情况），有下面的二维数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[][] array = &#123;</span><br><span class="line">    &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>&#125;,</span><br><span class="line">    &#123;<span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>已知 array <strong>对象</strong>起始地址是 0x1000，那么 23 这个元素的地址是什么？</p><blockquote><p>答：</p><ul><li>起始地址 0x1000</li><li>外层数组大小：16字节对象头 + 3元素 * 每个引用4字节 + 4 对齐字节 &#x3D; 32 &#x3D; 0x20</li><li>第一个内层数组大小：16字节对象头 + 5元素 * 每个byte1字节 + 3 对齐字节 &#x3D; 24 &#x3D; 0x18</li><li>第二个内层数组，16字节对象头 &#x3D; 0x10，待查找元素索引为 2</li><li>最后结果 &#x3D; 0x1000 + 0x20 + 0x18 + 0x10 + 2*1 &#x3D; 0x104a</li></ul></blockquote><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>这里只讨论空间局部性</p><ul><li>cpu 读取内存（速度慢）数据后，会将其放入高速缓存（速度快）当中，如果后来的计算再用到此数据，在缓存中能读到的话，就不必读内存了</li><li>缓存的最小存储单位是缓存行（cache line），一般是 64 bytes，一次读的数据少了不划算啊，因此最少读 64 bytes 填满一个缓存行，因此读入某个数据时也会读取其<strong>临近的数据</strong>，这就是所谓<strong>空间局部性</strong></li></ul><p><strong>对效率的影响</strong></p><p>比较下面 ij 和 ji 两个方法的执行效率</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">columns</span> <span class="operator">=</span> <span class="number">14</span>;</span><br><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[rows][columns];</span><br><span class="line"></span><br><span class="line"><span class="type">StopWatch</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">sw.start(<span class="string">&quot;ij&quot;</span>);</span><br><span class="line">ij(a, rows, columns);</span><br><span class="line">sw.stop();</span><br><span class="line">sw.start(<span class="string">&quot;ji&quot;</span>);</span><br><span class="line">ji(a, rows, columns);</span><br><span class="line">sw.stop();</span><br><span class="line">System.out.println(sw.prettyPrint());</span><br></pre></td></tr></table></figure><p>ij 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ij</span><span class="params">(<span class="type">int</span>[][] a, <span class="type">int</span> rows, <span class="type">int</span> columns)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">            sum += a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ji 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ji</span><span class="params">(<span class="type">int</span>[][] a, <span class="type">int</span> rows, <span class="type">int</span> columns)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            sum += a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">StopWatch &#x27;&#x27;: running time = 96283300 ns</span><br><span class="line">---------------------------------------------</span><br><span class="line">ns         %     Task name</span><br><span class="line">---------------------------------------------</span><br><span class="line">016196200  017%  ij</span><br><span class="line">080087100  083%  ji</span><br></pre></td></tr></table></figure><p>可以看到 ij 的效率比 ji 快很多，为什么呢？</p><ul><li>缓存是有限的，当新数据来了后，一些旧的缓存行数据就会被覆盖</li><li>如果不能充分利用缓存的数据，就会造成效率低下</li></ul><p>以 ji 执行为例，第一次内循环要读入 $[0,0]$ 这条数据，由于局部性原理，读入 $[0,0]$ 的同时也读入了 $[0,1] … [0,13]$，如图所示</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221104164329026.png" alt="image-20221104164329026"></p><p>但很遗憾，第二次内循环要的是 $[1,0]$ 这条数据，缓存中没有，于是再读入了下图的数据</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221104164716282.png" alt="image-20221104164716282"></p><p>这显然是一种浪费，因为 $[0,1] … [0,13]$ 包括 $[1,1] … [1,13]$ 这些数据虽然读入了缓存，却没有及时用上，而缓存的大小是有限的，等执行到第九次内循环时</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221104164947154.png" alt="image-20221104164947154"></p><p>缓存的第一行数据已经被新的数据 $[8,0] … [8,13]$ 覆盖掉了，以后如果再想读，比如 $[0,1]$，又得到内存去读了</p><p>同理可以分析 ij 函数则能充分利用局部性原理加载到的缓存数据</p><p><strong>举一反三</strong></p><ol><li><p>I&#x2F;O 读写时同样可以体现局部性原理</p></li><li><p>数组可以充分利用局部性原理，那么链表呢？</p><blockquote><p>答：链表不行，因为链表的元素并非相邻存储</p></blockquote></li></ol><h3 id="越界检查"><a href="#越界检查" class="headerlink" title="越界检查"></a>越界检查</h3><p>java 中对数组元素的读写都有越界检查，类似于下面的代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_within_bounds</span><span class="params">(<span class="type">int</span> index)</span> <span class="type">const</span>        </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= index &amp;&amp; index &lt; <span class="built_in">length</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码位置：<code>openjdk\src\hotspot\share\oops\arrayOop.hpp</code></li></ul><p>只不过此检查代码，不需要由程序员自己来调用，JVM 会帮我们调用</p><h2 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><strong>定义</strong></p><p>在计算机科学中，链表是数据元素的线性集合，其每个元素都指向下一个元素，元素存储上并不连续</p><blockquote><p>In computer science, a <strong>linked list</strong> is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. </p></blockquote><p>可以分类为[^5]</p><ul><li>单向链表，每个元素只知道其下一个元素是谁</li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221110083407176.png" alt="image-20221110083407176"></p><ul><li>双向链表，每个元素知道其上一个元素和下一个元素</li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221110083427372.png" alt="image-20221110083427372"></p><ul><li>循环链表，通常的链表尾节点 tail 指向的都是 null，而循环链表的 tail 指向的是头节点 head</li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221110083538273.png" alt="image-20221110083538273"></p><p>链表内还有一种特殊的节点称为哨兵（Sentinel）节点，也叫做哑元（ Dummy）节点，它不存储数据，通常用作头尾，用来简化边界判断，如下图所示</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221110084611550.png" alt="image-20221110084611550"></p><p><strong>随机访问性能</strong></p><p>根据 index 查找，时间复杂度 $O(n)$</p><p><strong>插入或删除性能</strong></p><ul><li>起始位置：$O(1)$</li><li>结束位置：如果已知 tail 尾节点是 $O(1)$，不知道 tail 尾节点是 $O(n)$</li><li>中间位置：根据 index 查找时间 + $O(1)$</li></ul><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>根据单向链表的定义，首先定义一个存储 value 和 next 指针的类 Node，和一个描述头部节点的引用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node head; <span class="comment">// 头部节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">// 节点类</span></span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Node 定义为内部类，是为了对外<strong>隐藏</strong>实现细节，没必要让类的使用者关心 Node 结构</li><li>定义为 static 内部类，是因为 Node <strong>不需要</strong>与 SinglyLinkedList 实例相关，多个 SinglyLinkedList实例能共用 Node 类定义</li></ul><p><strong>头部添加</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(value, <span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 this.head &#x3D;&#x3D; null，新增节点指向 null，并作为新的 this.head</li><li>如果 this.head !&#x3D; null，新增节点指向原来的 this.head，并作为新的 this.head<ul><li>注意赋值操作执行顺序是从右到左</li></ul></li></ul><p><strong>while 遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 做一些事</span></span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for 遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="built_in">this</span>.head; curr != <span class="literal">null</span>; curr = curr.next) &#123;</span><br><span class="line">            <span class="comment">// 做一些事</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上两种遍历都可以把<strong>要做的事</strong>以 Consumer 函数的方式传递进来<ul><li>Consumer 的规则是<strong>一个参数</strong>，<strong>无返回值</strong>，因此像 System.out::println 方法等都是 Consumer</li><li>调用 Consumer 时，将当前节点 curr.value 作为参数传递给它</li></ul></li></ul><p><strong>迭代器遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NodeIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Integer&gt; &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> curr != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> curr.value;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NodeIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hasNext 用来判断是否还有必要调用 next</li><li>next 做两件事<ul><li>返回当前节点的 value</li><li>指向下一个节点</li></ul></li><li>NodeIterator 要定义为<strong>非 static 内部类</strong>，是因为它与 SinglyLinkedList 实例相关，是对某个 SinglyLinkedList 实例的迭代</li></ul><p><strong>递归遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        recursion(<span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recursion</span><span class="params">(Node curr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (curr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面做些事</span></span><br><span class="line">        recursion(curr.next);</span><br><span class="line">        <span class="comment">// 后面做些事</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾部添加</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node curr;</span><br><span class="line">        <span class="keyword">for</span> (curr = <span class="built_in">this</span>.head; curr.next != <span class="literal">null</span>; ) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> findLast();</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>) &#123;</span><br><span class="line">            addFirst(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last.next = <span class="keyword">new</span> <span class="title class_">Node</span>(value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，找最后一个节点，终止条件是 curr.next &#x3D;&#x3D; null </li><li>分成两个方法是为了代码清晰，而且 findLast() 之后还能复用</li></ul><p><strong>尾部添加多个</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> first, <span class="type">int</span>... rest)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">sublist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(first, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> sublist;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : rest) &#123;</span><br><span class="line">            curr.next = <span class="keyword">new</span> <span class="title class_">Node</span>(value, <span class="literal">null</span>);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> findLast();</span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = sublist;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last.next = sublist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先串成一串 sublist</li><li>再作为一个整体添加</li></ul><p><strong>根据索引获取</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">findNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="built_in">this</span>.head; curr != <span class="literal">null</span>; curr = curr.next, i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == i) &#123;</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IllegalArgumentException <span class="title function_">illegalIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;index [%d] 不合法%n&quot;</span>, index));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> findNode(index);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同样，分方法可以实现复用</li></ul><p><strong>插入</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            addFirst(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> findNode(index - <span class="number">1</span>); <span class="comment">// 找到上一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123; <span class="comment">// 找不到</span></span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">        prev.next = <span class="keyword">new</span> <span class="title class_">Node</span>(value, prev.next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入包括下面的删除，都必须找到上一个节点</li></ul><p><strong>删除</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.head != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> findNode(index - <span class="number">1</span>);</span><br><span class="line">        Node curr;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="literal">null</span> &amp;&amp; (curr = prev.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            prev.next = curr.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一个 if 块对应着 removeFirst 情况</li><li>最后一个 if 块对应着至少得两个节点的情况<ul><li>不仅仅判断上一个节点非空，还要保证当前节点非空</li></ul></li></ul><h3 id="单向链表（带哨兵）"><a href="#单向链表（带哨兵）" class="headerlink" title="单向链表（带哨兵）"></a>单向链表（带哨兵）</h3><p>观察之前单向链表的实现，发现每个方法内几乎都有判断是不是 head 这样的代码，能不能简化呢？</p><p>用一个不参与数据存储的特殊 Node 作为哨兵，它一般被称为哨兵或哑元，拥有哨兵节点的链表称为带头链表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedListSentinel</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Integer.MIN_VALUE, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体存什么值无所谓，因为不会用到它的值</li></ul><p>加入哨兵节点后，代码会变得比较简单，先看几个工具方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedListSentinel</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据索引获取节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="built_in">this</span>.head; curr != <span class="literal">null</span>; curr = curr.next, i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                <span class="keyword">return</span> curr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取最后一个节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findLast</span><span class="params">()</span> &#123;</span><br><span class="line">        Node curr;</span><br><span class="line">        <span class="keyword">for</span> (curr = <span class="built_in">this</span>.head; curr.next != <span class="literal">null</span>; ) &#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>findNode 与之前类似，只是 i 初始值设置为 -1 对应哨兵，实际传入的 index 也是 $[-1, \infty)$</li><li>findLast 绝不会返回 null 了，就算没有其它节点，也会返回哨兵作为最后一个节点</li></ul><p>这样，代码简化为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglyLinkedListSentinel</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> findLast();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        改动前</span></span><br><span class="line"><span class="comment">        if (last == null) &#123;</span></span><br><span class="line"><span class="comment">            this.head = new Node(value, null);</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        last.next = <span class="keyword">new</span> <span class="title class_">Node</span>(value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        改动前</span></span><br><span class="line"><span class="comment">        if (index == 0) &#123;</span></span><br><span class="line"><span class="comment">            this.head = new Node(value, this.head);</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// index 传入 0 时，返回的是哨兵</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> findNode(index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">            prev.next = <span class="keyword">new</span> <span class="title class_">Node</span>(value, prev.next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        改动前</span></span><br><span class="line"><span class="comment">        if (index == 0) &#123;</span></span><br><span class="line"><span class="comment">            if (this.head != null) &#123;</span></span><br><span class="line"><span class="comment">                this.head = this.head.next;</span></span><br><span class="line"><span class="comment">                return;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                throw illegalIndex(index);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// index 传入 0 时，返回的是哨兵</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> findNode(index - <span class="number">1</span>);</span><br><span class="line">        Node curr;</span><br><span class="line">        <span class="keyword">if</span> (prev != <span class="literal">null</span> &amp;&amp; (curr = prev.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            prev.next = curr.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        改动前</span></span><br><span class="line"><span class="comment">        this.head = new Node(value, this.head);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="built_in">this</span>.head.next = <span class="keyword">new</span> <span class="title class_">Node</span>(value, <span class="built_in">this</span>.head.next);</span><br><span class="line">        <span class="comment">// 也可以视为 insert 的特例, 即 insert(0, value);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于删除，前面说了【最后一个 if 块对应着至少得两个节点的情况】，现在有了哨兵，就凑足了两个节点</li></ul><h3 id="双向链表（带哨兵）"><a href="#双向链表（带哨兵）" class="headerlink" title="双向链表（带哨兵）"></a>双向链表（带哨兵）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublyLinkedListSentinel</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoublyLinkedListSentinel</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, <span class="number">666</span>, <span class="literal">null</span>);</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, <span class="number">888</span>, <span class="literal">null</span>);</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head; p != tail; p = p.next, i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) &#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        insert(<span class="number">0</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">added</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(prev, value, tail);</span><br><span class="line">        prev.next = added;</span><br><span class="line">        tail.prev = added;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">removed</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        <span class="keyword">if</span> (removed == head) &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> removed.prev;</span><br><span class="line">        prev.next = tail;</span><br><span class="line">        tail.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> findNode(index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> prev.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">inserted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(prev, value, next);</span><br><span class="line">        prev.next = inserted;</span><br><span class="line">        next.prev = inserted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> findNode(index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">removed</span> <span class="operator">=</span> prev.next;</span><br><span class="line">        <span class="keyword">if</span> (removed == tail) &#123;</span><br><span class="line">            <span class="keyword">throw</span> illegalIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> removed.next;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IllegalArgumentException <span class="title function_">illegalIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                String.format(<span class="string">&quot;index [%d] 不合法%n&quot;</span>, index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> p.value;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Node prev;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node prev, <span class="type">int</span> value, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环形链表（带哨兵）"><a href="#环形链表（带哨兵）" class="headerlink" title="环形链表（带哨兵）"></a>环形链表（带哨兵）</h3><p>双向环形链表带哨兵，这时哨兵<strong>既作为头，也作为尾</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221229144232651.png" alt="image-20221229144232651"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221229143756065.png" alt="image-20221229143756065"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221229153338425.png" alt="image-20221229153338425"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221229154248800.png" alt="image-20221229154248800"></p><p>参考实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublyLinkedListSentinel</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Integer&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;&gt;() &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> sentinel.next;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != sentinel;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> p.value;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Node prev;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        Node next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node prev, <span class="type">int</span> value, Node next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">sentinel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, -<span class="number">1</span>, <span class="literal">null</span>); <span class="comment">// 哨兵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoublyLinkedListSentinel</span><span class="params">()</span> &#123;</span><br><span class="line">        sentinel.next = sentinel;</span><br><span class="line">        sentinel.prev = sentinel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加到第一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 待添加值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> sentinel.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> sentinel;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">added</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(prev, value, next);</span><br><span class="line">        prev.next = added;</span><br><span class="line">        next.prev = added;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加到最后一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 待添加值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> sentinel.prev;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> sentinel;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">added</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(prev, value, next);</span><br><span class="line">        prev.next = added;</span><br><span class="line">        next.prev = added;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除第一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">removed</span> <span class="operator">=</span> sentinel.next;</span><br><span class="line">        <span class="keyword">if</span> (removed == sentinel) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a</span> <span class="operator">=</span> sentinel;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> removed.next;</span><br><span class="line">        a.next = b;</span><br><span class="line">        b.prev = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除最后一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">removed</span> <span class="operator">=</span> sentinel.prev;</span><br><span class="line">        <span class="keyword">if</span> (removed == sentinel) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a</span> <span class="operator">=</span> removed.prev;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">b</span> <span class="operator">=</span> sentinel;</span><br><span class="line">        a.next = b;</span><br><span class="line">        b.prev = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据值删除节点</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;假定 value 在链表中作为 key, 有唯一性&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 待删除值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">removed</span> <span class="operator">=</span> findNodeByValue(value);</span><br><span class="line">        <span class="keyword">if</span> (removed != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> removed.prev;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> removed.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findNodeByValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> sentinel.next;</span><br><span class="line">        <span class="keyword">while</span> (p != sentinel) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.value == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-递归"><a href="#2-3-递归" class="headerlink" title="2.3 递归"></a>2.3 递归</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><strong>定义</strong></p><p>计算机科学中，递归是一种解决计算问题的方法，其中解决方案取决于同一类问题的更小子集</p><blockquote><p>In computer science, <strong>recursion</strong> is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem.</p></blockquote><p>比如单链表递归遍历的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">f</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;before:&quot;</span> + node.value)</span><br><span class="line">    f(node.next);</span><br><span class="line">    println(<span class="string">&quot;after:&quot;</span> + node.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>自己调用自己，如果说每个函数对应着一种解决方案，自己调用自己意味着解决方案是一样的（有规律的）</li><li>每次调用，函数处理的数据会较上次缩减（子集），而且最后会缩减至无需继续递归</li><li>内层函数调用（子集处理）完成，外层函数才能算调用完成</li></ol><p><strong>原理</strong></p><p>假设链表中有 3 个节点，value 分别为 1，2，3，以上代码的执行流程就类似于下面的<strong>伪码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 -&gt; 2 -&gt; 3 -&gt; null  f(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">f</span><span class="params">(Node node = <span class="number">1</span>)</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;before:&quot;</span> + node.value) <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(Node node = <span class="number">2</span>)</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;before:&quot;</span> + node.value) <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(Node node = <span class="number">3</span>)</span> &#123;</span><br><span class="line">            println(<span class="string">&quot;before:&quot;</span> + node.value) <span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(Node node = <span class="literal">null</span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            println(<span class="string">&quot;after:&quot;</span> + node.value) <span class="comment">// 3</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">&quot;after:&quot;</span> + node.value) <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;after:&quot;</span> + node.value) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><ol><li>确定能否使用递归求解</li><li>推导出递推关系，即父问题与子问题的关系，以及递归的结束条件</li></ol><p>例如之前遍历链表的递推关系为<br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>停止&amp; n &#x3D; null \<br>f(n.next) &amp; n \neq null<br>\end{cases}<br>$$</p><ul><li>深入到最里层叫做<strong>递</strong></li><li>从最里层出来叫做<strong>归</strong></li><li>在<strong>递</strong>的过程中，外层函数内的局部变量（以及方法参数）并未消失，<strong>归</strong>的时候还可以用到</li></ul><h3 id="单路递归-Single-Recursion"><a href="#单路递归-Single-Recursion" class="headerlink" title="单路递归 Single Recursion"></a>单路递归 Single Recursion</h3><p><strong>E01. 阶乘</strong></p><p>用递归方法求阶乘 </p><ul><li><p>阶乘的定义 $n!&#x3D; 1⋅2⋅3⋯(n-2)⋅(n-1)⋅n$，其中 $n$ 为自然数，当然 $0! &#x3D; 1$</p></li><li><p>递推关系</p></li></ul><p>$$<br>f(n) &#x3D;<br>\begin{cases}<br>1 &amp; n &#x3D; 1\<br>n * f(n-1) &amp; n &gt; 1<br>\end{cases}<br>$$</p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * f(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆解<strong>伪码</strong>如下，假设 n 初始值为 3</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">3</span>) &#123; <span class="comment">// 解决不了,递</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * f(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">2</span>) &#123; <span class="comment">// 解决不了,继续递</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * f(<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">1</span>) &#123; <span class="comment">// 可以解决, 开始归</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>E02. 反向打印字符串</strong></p><p>用递归反向打印字符串，n 为字符在整个字符串 str 中的索引位置</p><ul><li><strong>递</strong>：n 从 0 开始，每次 n + 1，一直递到 n &#x3D;&#x3D; str.length() - 1</li><li><strong>归</strong>：从 n &#x3D;&#x3D; str.length() 开始归，从归打印，自然是逆序的</li></ul><p>递推关系<br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>停止 &amp; n &#x3D; str.length() \<br>f(n+1) &amp; 0 \leq n \leq str.length() - 1<br>\end{cases}<br>$$<br>代码为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(String str, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index == str.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reversePrint(str, index + <span class="number">1</span>);</span><br><span class="line">    System.out.println(str.charAt(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拆解<strong>伪码</strong>如下，假设字符串为 “abc”</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(String str, <span class="type">int</span> index = <span class="number">0</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(String str, <span class="type">int</span> index = <span class="number">1</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(String str, <span class="type">int</span> index = <span class="number">2</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(String str, <span class="type">int</span> index = <span class="number">3</span>)</span> &#123; </span><br><span class="line">                <span class="keyword">if</span> (index == str.length()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>; <span class="comment">// 开始归</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(str.charAt(index)); <span class="comment">// 打印 c</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str.charAt(index)); <span class="comment">// 打印 b</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str.charAt(index)); <span class="comment">// 打印 a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多路递归-Multi-Recursion"><a href="#多路递归-Multi-Recursion" class="headerlink" title="多路递归 Multi Recursion"></a>多路递归 Multi Recursion</h3><p><strong>E01. 斐波那契数列</strong></p><ul><li>之前的例子是每个递归函数只包含一个自身的调用，这称之为 single recursion</li><li>如果每个递归函数例包含多个自身调用，称之为 multi recursion</li></ul><p><strong>递推关系</strong><br>$$<br>f(n) &#x3D;<br>\begin{cases}<br>0 &amp; n&#x3D;0 \<br>1 &amp; n&#x3D;1 \<br>f(n-1) + f(n-2) &amp; n&gt;1<br>\end{cases}<br>$$</p><p>下面的表格列出了数列的前几项</p><table><thead><tr><th><em>F</em>0</th><th><em>F</em>1</th><th><em>F</em>2</th><th><em>F</em>3</th><th><em>F</em>4</th><th><em>F</em>5</th><th><em>F</em>6</th><th><em>F</em>7</th><th><em>F</em>8</th><th><em>F</em>9</th><th><em>F</em>10</th><th><em>F</em>11</th><th><em>F</em>12</th><th><em>F</em>13</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td><td>144</td><td>233</td></tr></tbody></table><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong></p><p><img src="/./imgs/2.gif"></p><ul><li>绿色代表正在执行（对应递），灰色代表执行结束（对应归）</li><li>递不到头，不能归，对应着深度优先搜索</li></ul><p><strong>时间复杂度</strong></p><ul><li>递归的次数也符合斐波那契规律，$2 * f(n+1)-1$</li><li>时间复杂度推导过程<ul><li>斐波那契通项公式 $f(n) &#x3D; \frac{1}{\sqrt{5}}*({\frac{1+\sqrt{5}}{2}}^n - {\frac{1-\sqrt{5}}{2}}^n)$</li><li>简化为：$f(n) &#x3D; \frac{1}{2.236}*({1.618}^n - {(-0.618)}^n)$</li><li>带入递归次数公式 $2<em>\frac{1}{2.236}</em>({1.618}^{n+1} - {(-0.618)}^{n+1})-1$</li><li>时间复杂度为 $\Theta(1.618^n)$</li></ul></li></ul><blockquote><ol><li>更多 Fibonacci 参考[^8][^9][^10]</li><li>以上时间复杂度分析，未考虑大数相加的因素</li></ol></blockquote><p><strong>变体1 - 兔子问题[^8]</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221110155655827.png" alt="image-20221110155655827"></p><ul><li>第一个月，有一对未成熟的兔子（黑色，注意图中个头较小）</li><li>第二个月，它们成熟</li><li>第三个月，它们能产下一对新的小兔子（蓝色）</li><li>所有兔子遵循相同规律，求第 $n$ 个月的兔子数</li></ul><p><strong>分析</strong></p><p>兔子问题如何与斐波那契联系起来呢？设第 n 个月兔子数为 $f(n)$</p><ul><li>$f(n)$ &#x3D; 上个月兔子数 + 新生的小兔子数</li><li>而【新生的小兔子数】实际就是【上个月成熟的兔子数】</li><li>因为需要一个月兔子就成熟，所以【上个月成熟的兔子数】也就是【上上个月的兔子数】</li><li>上个月兔子数，即 $f(n-1)$</li><li>上上个月的兔子数，即 $f(n-2)$</li></ul><p>因此本质还是斐波那契数列，只是从其第一项开始</p><p><strong>变体2 - 青蛙爬楼梯</strong></p><ul><li>楼梯有 $n$ 阶</li><li>青蛙要爬到楼顶，可以一次跳一阶，也可以一次跳两阶</li><li>只能向上跳，问有多少种跳法</li></ul><p><strong>分析</strong></p><table><thead><tr><th>n</th><th>跳法</th><th>规律</th></tr></thead><tbody><tr><td>1</td><td>(1)</td><td>暂时看不出</td></tr><tr><td>2</td><td>(1,1)  (2)</td><td>暂时看不出</td></tr><tr><td>3</td><td>(1,1,1)  (1,2)  (2,1)</td><td>暂时看不出</td></tr><tr><td>4</td><td>(1,1,1,1)    (1,2,1)    (2,1,1)<br />(1,1,2)  (2,2)</td><td>最后一跳，跳一个台阶的，基于f(3)<br />最后一跳，跳两个台阶的，基于f(2)</td></tr><tr><td>5</td><td>…</td><td>…</td></tr></tbody></table><ul><li><p>因此本质上还是斐波那契数列，只是从其第二项开始</p></li><li><p>对应 leetcode 题目 <a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯 - 力扣（LeetCode）</a></p></li></ul><h3 id="递归优化-记忆法"><a href="#递归优化-记忆法" class="headerlink" title="递归优化-记忆法"></a>递归优化-记忆法</h3><p>上述代码存在很多重复的计算，例如求 $f(5)$ 递归分解过程</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221207092417933.png" alt="image-20221207092417933"></p><p>可以看到（颜色相同的是重复的）：</p><ul><li>$f(3)$ 重复了 2 次</li><li>$f(2)$ 重复了 3 次</li><li>$f(1)$ 重复了 5 次</li><li>$f(0)$ 重复了 3 次</li></ul><p>随着  $n$ 的增大，重复次数非常可观，如何优化呢？</p><p><strong>Memoization</strong> 记忆法（也称备忘录）是一种优化技术，通过存储函数调用结果（通常比较昂贵），当再次出现相同的输入（子问题）时，就能实现加速效果，改进后的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="type">int</span>[] cache = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(cache, -<span class="number">1</span>);</span><br><span class="line">    cache[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    cache[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    System.out.println(f(cache, n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>[] cache, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache[n] != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cache[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cache[n] = f(cache, n - <span class="number">1</span>) + f(cache, n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> cache[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后的图示，只要结果被缓存，就<strong>不会执行其子问题</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221213173225807.png" alt="image-20221213173225807"></p><ul><li>改进后的时间复杂度为 $O(n)$</li><li>请自行验证改进后的效果</li><li>请自行分析改进后的空间复杂度</li></ul><blockquote><p><strong>注意</strong></p><ol><li>记忆法是动态规划的一种情况，强调的是自顶向下的解决</li><li>记忆法的本质是空间换时间</li></ol></blockquote><h3 id="递归优化-尾递归"><a href="#递归优化-尾递归" class="headerlink" title="递归优化-尾递归"></a>递归优化-尾递归</h3><p><strong>爆栈</strong></p><p>用递归做 $n + (n-1) + (n-2) … + 1$</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + sum(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我的机器上  $n &#x3D; 12000$ 时，爆栈了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class="line">at Test.sum(Test.java:10)</span><br><span class="line">at Test.sum(Test.java:10)</span><br><span class="line">at Test.sum(Test.java:10)</span><br><span class="line">at Test.sum(Test.java:10)</span><br><span class="line">at Test.sum(Test.java:10)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为什么呢？</p><ul><li>每次方法调用是需要消耗一定的栈内存的，这些内存用来存储方法参数、方法内局部变量、返回地址等等</li><li>方法调用占用的内存需要等到<strong>方法结束时</strong>才会释放</li><li>而递归调用我们之前讲过，不到最深不会回头，最内层方法没完成之前，外层方法都结束不了<ul><li>例如，$sum(3)$ 这个方法内有个需要执行 $3 + sum(2)$，$sum(2)$ 没返回前，加号前面的 $3$ 不能释放 </li><li>看下面伪码</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n = <span class="number">3</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> + <span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n = <span class="number">2</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> + <span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n = <span class="number">1</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾调用</strong></p><p>如果函数的最后一步是调用一个函数，那么称为尾调用，例如</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">b</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面三段代码<strong>不能</strong>叫做尾调用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="title function_">b</span>()</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为最后一步并非调用函数</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">b</span>() + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后一步执行的是加法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">b</span>() + x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后一步执行的是加法</li></ul><p><strong>一些语言</strong>[^11]的编译器能够对尾调用做优化，例如</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 做前面的事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">b</span>() </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 做前面的事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">c</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">a</span>()</span><br></pre></td></tr></table></figure><p>没优化之前的<strong>伪码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后<strong>伪码</strong>如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">a</span>()</span><br><span class="line"><span class="title function_">b</span>()</span><br><span class="line"><span class="title function_">c</span>()</span><br></pre></td></tr></table></figure><p>为何尾递归才能优化？</p><p>调用 a 时</p><ul><li>a 返回时发现：没什么可留给 b 的，将来返回的结果 b 提供就可以了，用不着我 a 了，我的内存就可以释放</li></ul><p>调用 b 时</p><ul><li>b 返回时发现：没什么可留给 c 的，将来返回的结果 c 提供就可以了，用不着我 b 了，我的内存就可以释放</li></ul><p>如果调用 a 时</p><ul><li>不是尾调用，例如 return b() + 1，那么 a 就不能提前结束，因为它还得利用 b 的结果做加法</li></ul><p><strong>尾递归</strong></p><p>尾递归是尾调用的一种特例，也就是最后一步执行的是同一个函数</p><p><strong>尾递归避免爆栈</strong></p><p>安装 Scala</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221111122709227.png" alt="image-20221111122709227"></p><p>Scala 入门</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello Scala&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Scala 是 java 的近亲，java 中的类都可以拿来重用</li><li>类型是放在变量后面的</li><li>Unit 表示无返回值，类似于 void</li><li>不需要以分号作为结尾，当然加上也对</li></ul><p>还是先写一个会爆栈的函数</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + sum(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Scala 最后一行代码若作为返回值，可以省略 return</li></ul><p>不出所料，在 $n &#x3D; 11000$ 时，还是出了异常</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(sum(<span class="number">11000</span>))</span><br><span class="line"></span><br><span class="line"><span class="type">Exception</span> in thread <span class="string">&quot;main&quot;</span> java.lang.<span class="type">StackOverflowError</span></span><br><span class="line">at <span class="type">Main</span>$.sum(<span class="type">Main</span>.scala:<span class="number">25</span>)</span><br><span class="line">at <span class="type">Main</span>$.sum(<span class="type">Main</span>.scala:<span class="number">25</span>)</span><br><span class="line">at <span class="type">Main</span>$.sum(<span class="type">Main</span>.scala:<span class="number">25</span>)</span><br><span class="line">at <span class="type">Main</span>$.sum(<span class="type">Main</span>.scala:<span class="number">25</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这是因为以上代码，还不是尾调用，要想成为尾调用，那么：</p><ol><li>最后一行代码，必须是一次函数调用</li><li>内层函数必须<strong>摆脱</strong>与外层函数的关系，内层函数<strong>执行后</strong>不依赖于外层的变量或常量</li></ol><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + sum(n - <span class="number">1</span>)  <span class="comment">// 依赖于外层函数的 n 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何让它执行后就摆脱对 n 的依赖呢？</p><ul><li>不能等递归回来再做加法，那样就必须保留外层的 n</li><li>把 n 当做内层函数的一个参数传进去，这时 n 就属于内层函数了</li><li>传参时就完成累加, 不必等回来时累加</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum(n - 1, n + 累加器)</span><br></pre></td></tr></table></figure><p>改写后代码如下</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@tailrec</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n: <span class="type">Long</span>, accumulator: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + accumulator</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>, n + accumulator)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>accumulator 作为累加器</li><li>@tailrec 注解是 scala 提供的，用来检查方法是否符合尾递归</li><li>这回 sum(10000000, 0) 也没有问题，打印 50000005000000</li></ul><p>执行流程如下，以<strong>伪码</strong>表示 $sum(4, 0)$</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首次调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n = <span class="number">4</span>, accumulator = <span class="number">0</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">4</span> - <span class="number">1</span>, <span class="number">4</span> + accumulator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来调用内层 sum, 传参时就完成了累加, 不必等回来时累加，当内层 sum 调用后，外层 sum 空间没必要保留</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n = <span class="number">3</span>, accumulator = <span class="number">4</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">3</span> - <span class="number">1</span>, <span class="number">3</span> + accumulator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续调用内层 sum</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n = <span class="number">2</span>, accumulator = <span class="number">7</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> sum(<span class="number">2</span> - <span class="number">1</span>, <span class="number">2</span> + accumulator)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续调用内层 sum, 这是最后的 sum 调用完就返回最后结果 10, 前面所有其它 sum 的空间早已释放</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n = <span class="number">1</span>, accumulator = <span class="number">9</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + accumulator</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上，尾递归优化是将函数的<strong>递归</strong>调用，变成了函数的<strong>循环</strong>调用</p><p><strong>改循环避免爆栈</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100000000</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归时间复杂度-Master-theorem-14"><a href="#递归时间复杂度-Master-theorem-14" class="headerlink" title="递归时间复杂度-Master theorem[^14]"></a>递归时间复杂度-Master theorem[^14]</h3><p>若有递归式<br>$$<br>T(n) &#x3D; aT(\frac{n}{b}) + f(n)<br>$$<br>其中 </p><ul><li>$T(n)$ 是问题的运行时间，$n$ 是数据规模</li><li>$a$ 是子问题个数</li><li>$T(\frac{n}{b})$ 是子问题运行时间，每个子问题被拆成原问题数据规模的 $\frac{n}{b}$</li><li>$f(n)$ 是除递归外执行的计算</li></ul><p>令 $x &#x3D; \log_{b}{a}$，即 $x &#x3D; \log_{子问题缩小倍数}{子问题个数}$</p><p>那么<br>$$<br>T(n) &#x3D;<br>\begin{cases}<br>\Theta(n^x) &amp; f(n) &#x3D; O(n^c) 并且 c \lt x\<br>\Theta(n^x\log{n}) &amp; f(n) &#x3D; \Theta(n^x)\<br>\Theta(n^c) &amp; f(n) &#x3D; \Omega(n^c) 并且 c \gt x<br>\end{cases}<br>$$</p><p><strong>例1</strong></p><p>$T(n) &#x3D; 2T(\frac{n}{2}) + n^4$ </p><ul><li>此时 $x &#x3D; 1 &lt; 4$，由后者决定整个时间复杂度 $\Theta(n^4)$</li><li>如果觉得对数不好算，可以换为求【$b$ 的几次方能等于 $a$】</li></ul><p><strong>例2</strong></p><p>$T(n) &#x3D; T(\frac{7n}{10}) + n$</p><ul><li>$a&#x3D;1, b&#x3D;\frac{10}{7}, x&#x3D;0, c&#x3D;1$</li><li>此时 $x &#x3D; 0 &lt; 1$，由后者决定整个时间复杂度 $\Theta(n)$</li></ul><p><strong>例3</strong></p><p>$T(n) &#x3D; 16T(\frac{n}{4}) + n^2$</p><ul><li>$a&#x3D;16, b&#x3D;4, x&#x3D;2, c&#x3D;2$</li><li>此时 $x&#x3D;2 &#x3D; c$，时间复杂度 $\Theta(n^2 \log{n})$</li></ul><p><strong>例4</strong></p><p>$T(n)&#x3D;7T(\frac{n}{3}) + n^2$</p><ul><li>$a&#x3D;7, b&#x3D;3, x&#x3D;1.?, c&#x3D;2$</li><li>此时 $x &#x3D; \log_{3}{7} &lt; 2$，由后者决定整个时间复杂度 $\Theta(n^2)$</li></ul><p><strong>例5</strong></p><p>$T(n) &#x3D; 7T(\frac{n}{2}) + n^2$</p><ul><li>$a&#x3D;7, b&#x3D;2, x&#x3D;2.?, c&#x3D;2$</li><li>此时 $x &#x3D; log_2{7} &gt; 2$，由前者决定整个时间复杂度 $\Theta(n^{\log_2{7}})$</li></ul><p><strong>例6</strong></p><p>$T(n) &#x3D; 2T(\frac{n}{4}) + \sqrt{n}$</p><ul><li>$a&#x3D;2, b&#x3D;4, x &#x3D; 0.5, c&#x3D;0.5$</li><li>此时 $x &#x3D; 0.5 &#x3D; c$，时间复杂度 $\Theta(\sqrt{n}\ \log{n})$</li></ul><p><strong>例7. 二分查找递归</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; j) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">        <span class="keyword">return</span> f(a, target, i, m - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> f(a, target, m + <span class="number">1</span>, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子问题个数 $a &#x3D; 1$</li><li>子问题数据规模缩小倍数 $b &#x3D; 2$</li><li>除递归外执行的计算是常数级 $c&#x3D;0$</li></ul><p>$T(n) &#x3D; T(\frac{n}{2}) + n^0$</p><ul><li>此时 $x&#x3D;0 &#x3D; c$，时间复杂度 $\Theta(\log{n})$</li></ul><p><strong>例8. 归并排序递归</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">void split(B[], i, j, A[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (j - i &lt;= <span class="number">1</span>)                    </span><br><span class="line">        <span class="keyword">return</span>;                                </span><br><span class="line">    m = (i + j) / <span class="number">2</span>;             </span><br><span class="line">    </span><br><span class="line">    // 递归</span><br><span class="line">    split(A, i, m, B);  </span><br><span class="line">    split(A, m, j, B); </span><br><span class="line">    </span><br><span class="line">    // 合并</span><br><span class="line">    merge(B, i, m, j, A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子问题个数 $a&#x3D;2$</li><li>子问题数据规模缩小倍数 $b&#x3D;2$</li><li>除递归外，主要时间花在合并上，它可以用 $f(n) &#x3D; n$ 表示</li></ul><p>$T(n) &#x3D; 2T(\frac{n}{2}) + n$</p><ul><li>此时 $x&#x3D;1&#x3D;c$，时间复杂度 $\Theta(n\log{n})$</li></ul><p><strong>例9. 快速排序递归</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">algorithm quicksort(A, lo, hi) <span class="keyword">is</span> </span><br><span class="line">  <span class="keyword">if</span> lo &gt;= hi || lo &lt; <span class="number">0</span> then </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line">  // 分区</span><br><span class="line">  p := partition(A, lo, hi) </span><br><span class="line">  </span><br><span class="line">  // 递归</span><br><span class="line">  quicksort(A, lo, p - <span class="number">1</span>) </span><br><span class="line">  quicksort(A, p + <span class="number">1</span>, hi) </span><br></pre></td></tr></table></figure><ul><li>子问题个数 $a&#x3D;2$</li><li>子问题数据规模缩小倍数<ul><li>如果分区分的好，$b&#x3D;2$</li><li>如果分区没分好，例如分区1 的数据是 0，分区 2 的数据是 $n-1$</li></ul></li><li>除递归外，主要时间花在分区上，它可以用 $f(n) &#x3D; n$ 表示</li></ul><p>情况1 - 分区分的好</p><p>$T(n) &#x3D; 2T(\frac{n}{2}) + n$</p><ul><li>此时 $x&#x3D;1&#x3D;c$，时间复杂度 $\Theta(n\log{n})$</li></ul><p>情况2 - 分区没分好</p><p>$T(n) &#x3D; T(n-1) + T(1) + n$</p><ul><li>此时不能用主定理求解</li></ul><h3 id="递归时间复杂度-展开求解"><a href="#递归时间复杂度-展开求解" class="headerlink" title="递归时间复杂度-展开求解"></a>递归时间复杂度-展开求解</h3><p>像下面的递归式，都不能用主定理求解</p><p><strong>例1 - 递归求和</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n + sum(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$T(n) &#x3D; T(n-1) + c$，$T(1) &#x3D; c$</p><p>下面为展开过程</p><p>$T(n) &#x3D; T(n-2) + c + c$</p><p>$T(n) &#x3D; T(n-3) + c + c + c$</p><p>…</p><p>$T(n) &#x3D; T(n-(n-1)) + (n-1)c$ </p><ul><li>其中 $T(n-(n-1))$ 即 $T(1)$</li><li>带入求得 $T(n) &#x3D; c + (n-1)c &#x3D; nc$</li></ul><p>时间复杂度为 $O(n)$</p><p><strong>例2 - 递归冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == high) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; high; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            swap(a, i, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bubble(a, high - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$T(n) &#x3D; T(n-1) + n$，$T(1) &#x3D; c$</p><p>下面为展开过程</p><p>$T(n) &#x3D; T(n-2) + (n-1) + n$</p><p>$T(n) &#x3D; T(n-3) + (n-2) + (n-1) + n$</p><p>…</p><p>$T(n) &#x3D; T(1) + 2 + … + n &#x3D; T(1) + (n-1)\frac{2+n}{2} &#x3D; c + \frac{n^2}{2} + \frac{n}{2} -1$</p><p>时间复杂度 $O(n^2)$</p><blockquote><p>注：</p><ul><li>等差数列求和为 $个数*\frac{\vert首项-末项\vert}{2}$</li></ul></blockquote><p><strong>例3 - 递归快排</strong></p><p>快速排序分区没分好的极端情况</p><p>$T(n) &#x3D; T(n-1) + T(1) + n$，$T(1) &#x3D; c$</p><p>$T(n) &#x3D; T(n-1) + c + n$</p><p>下面为展开过程</p><p>$T(n) &#x3D; T(n-2) + c + (n-1) + c + n$</p><p>$T(n) &#x3D; T(n-3) + c + (n-2) + c + (n-1) + c + n$</p><p>…</p><p>$T(n) &#x3D; T(n-(n-1)) + (n-1)c + 2+…+n &#x3D; \frac{n^2}{2} + \frac{2cn+n}{2} -1$</p><p>时间复杂度 $O(n^2)$</p><p>不会推导的同学可以进入 <a href="https://www.wolframalpha.com/">https://www.wolframalpha.com/</a></p><ul><li>例1 输入 f(n) &#x3D; f(n - 1) + c, f(1) &#x3D; c</li><li>例2 输入 f(n) &#x3D; f(n - 1) + n, f(1) &#x3D; c</li><li>例3 输入 f(n) &#x3D; f(n - 1) + n + c, f(1) &#x3D; c</li></ul><h2 id="2-4-队列"><a href="#2-4-队列" class="headerlink" title="2.4 队列"></a>2.4 队列</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>计算机科学中，queue 是以顺序的方式维护的一组数据集合，在一端添加数据，从另一端移除数据。习惯来说，添加的一端称为<strong>尾</strong>，移除的一端称为<strong>头</strong>，就如同生活中的排队买商品</p><blockquote><p>In computer science, a <strong>queue</strong> is a collection of entities that are maintained in a sequence and can be modified by  the addition of entities at one end of the sequence and the removal of  entities from the other end of the sequence</p></blockquote><p>先定义一个简化的队列接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Queue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向队列尾插入值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 待插入值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入成功返回 true, 插入失败返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从对列头获取值, 并移除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果队列非空返回对头值, 否则返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    E <span class="title function_">poll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从对列头获取值, 不移除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果队列非空返回对头值, 否则返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    E <span class="title function_">peek</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空返回 true, 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查队列是否已满</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 满返回 true, 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h3><p>下面以<strong>单向环形带哨兵</strong>链表方式来实现队列</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221230150105089.png" alt="image-20221230150105089"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221230150141318.png" alt="image-20221230150141318"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221230150153271.png" alt="image-20221230150153271"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListQueue</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E value;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E value, Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; tail = head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        tail.next = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedListQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedListQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; added = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value, head);</span><br><span class="line">        tail.next = added;</span><br><span class="line">        tail = added;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; first = head.next;</span><br><span class="line">        head.next = first.next;</span><br><span class="line">        <span class="keyword">if</span> (first == tail) &#123;</span><br><span class="line">            tail = head;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> first.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            Node&lt;E&gt; p = head.next;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> p.value;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环形数组实现"><a href="#环形数组实现" class="headerlink" title="环形数组实现"></a>环形数组实现</h3><p><strong>好处</strong></p><ol><li>对比普通数组，起点和终点更为自由，不用考虑数据移动</li><li>“环”意味着不会存在【越界】问题</li><li>数组性能更佳</li><li>环形数组比较适合实现有界队列、RingBuffer 等</li></ol><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221228175413998.png" alt="image-20221228175413998"></p><p><strong>下标计算</strong></p><p>例如，数组长度是 5，当前位置是 3 ，向前走 2 步，此时下标为 $(3 + 2)%5 &#x3D; 0$</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221228180357257.png" alt="image-20221228180357257"></p><p>$$<br>(cur + step) % length<br>$$</p><ul><li>cur 当前指针位置</li><li>step 前进步数</li><li>length 数组长度</li></ul><blockquote><p>注意：</p><ul><li>如果 step &#x3D; 1，也就是一次走一步，可以在 &gt;&#x3D; length 时重置为 0 即可</li></ul></blockquote><p><strong>判断空</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221231081009018.png" alt="image-20221231081009018"></p><p><strong>判断满</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221231080909475.png" alt="image-20221231080909475"></p><p>满之后的策略可以根据业务需求决定</p><ul><li>例如我们要实现的环形队列，满之后就拒绝入队</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        length = capacity + <span class="number">1</span>;</span><br><span class="line">        array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[tail] = value;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % length;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[head];</span><br><span class="line">        head = (head + <span class="number">1</span>) % length;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[head];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail == head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (tail + <span class="number">1</span>) % length == head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[p];</span><br><span class="line">                p = (p + <span class="number">1</span>) % array.length;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断空、满方法2</strong></p><p>引入 size </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue2</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue2</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[tail] = value;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % capacity;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[head];</span><br><span class="line">        head = (head + <span class="number">1</span>) % capacity;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[head];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[p];</span><br><span class="line">                p = (p + <span class="number">1</span>) % capacity;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断空、满方法3</strong></p><ul><li><p>head 和 tail 不断递增，用到索引时，再用它们进行计算，两个问题</p><ul><li><p>如何保证 head 和 tail 自增超过正整数最大值的正确性</p></li><li><p>如何让取模运算性能更高</p></li></ul></li><li><p>答案：让 capacity 为 2 的幂</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue3</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue3</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((capacity &amp; capacity - <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;capacity 必须为 2 的幂&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[tail &amp; capacity - <span class="number">1</span>] = value;</span><br><span class="line">        tail++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[head &amp; capacity - <span class="number">1</span>];</span><br><span class="line">        head++;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[head &amp; capacity - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail - head == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail - head == capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[p &amp; capacity - <span class="number">1</span>];</span><br><span class="line">                p++;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-栈"><a href="#2-5-栈" class="headerlink" title="2.5 栈"></a>2.5 栈</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>计算机科学中，<strong>stack</strong> 是一种线性的数据结构，只能在其一端添加数据和移除数据。习惯来说，这一端称之为<strong>栈顶</strong>，另一端不能操作数据的称之为<strong>栈底</strong>，就如同生活中的一摞书</p><p>先提供一个栈接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stack</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向栈顶压入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 待压入值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 压入成功返回 true, 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(E value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从栈顶弹出元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 栈非空返回栈顶元素, 栈为空返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    E <span class="title function_">pop</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回栈顶元素, 不弹出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 栈非空返回栈顶元素, 栈为空返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    E <span class="title function_">peek</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空返回 true, 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否已满</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 满返回 true, 否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表实现-1"><a href="#链表实现-1" class="headerlink" title="链表实现"></a>链表实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListStack</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Stack</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;E&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedListStack</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value, head.next);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; first = head.next;</span><br><span class="line">        head.next = first.next;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> first.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            Node&lt;E&gt; p = head.next;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> p.value;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E value;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E value, Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStack</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Stack</span>&lt;E&gt;, Iterable&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[top++] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[--top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[top-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> top;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> array[--p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>模拟如下方法调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;main2&quot;</span>);</span><br><span class="line">    method1();</span><br><span class="line">    method2();</span><br><span class="line">    System.out.println(<span class="string">&quot;main3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">    method3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;method2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;method3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">        <span class="type">int</span> exit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Frame</span><span class="params">(<span class="type">int</span> exit)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.exit = exit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 模拟程序计数器 Program counter</span></span><br><span class="line">    <span class="keyword">static</span> ArrayStack&lt;Frame&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;(<span class="number">100</span>); <span class="comment">// 模拟方法调用栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">Frame</span>(-<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (pc) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;main1&quot;</span>);</span><br><span class="line">                    pc++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;main2&quot;</span>);</span><br><span class="line">                    pc++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span> -&gt; &#123;</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">Frame</span>(pc + <span class="number">1</span>));</span><br><span class="line">                    pc = <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span> -&gt; &#123;</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">Frame</span>(pc + <span class="number">1</span>));</span><br><span class="line">                    pc = <span class="number">200</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;main3&quot;</span>);</span><br><span class="line">                    pc = stack.pop().exit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">100</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">Frame</span>(pc + <span class="number">1</span>));</span><br><span class="line">                    pc = <span class="number">300</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">101</span> -&gt; &#123;</span><br><span class="line">                    pc = stack.pop().exit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">200</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;method2&quot;</span>);</span><br><span class="line">                    pc = stack.pop().exit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">300</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;method3&quot;</span>);</span><br><span class="line">                    pc = stack.pop().exit;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-双端队列"><a href="#2-6-双端队列" class="headerlink" title="2.6 双端队列"></a>2.6 双端队列</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>双端队列、队列、栈对比</p><table><thead><tr><th></th><th>定义</th><th>特点</th></tr></thead><tbody><tr><td>队列</td><td>一端删除（头）另一端添加（尾）</td><td>First In First Out</td></tr><tr><td>栈</td><td>一端删除和添加（顶）</td><td>Last In First Out</td></tr><tr><td>双端队列</td><td>两端都可以删除、添加</td><td></td></tr><tr><td>优先级队列</td><td></td><td>优先级高者先出队</td></tr><tr><td>延时队列</td><td></td><td>根据延时时间确定优先级</td></tr><tr><td>并发非阻塞队列</td><td>队列空或满时不阻塞</td><td></td></tr><tr><td>并发阻塞队列</td><td>队列空时删除阻塞、队列满时添加阻塞</td><td></td></tr></tbody></table><blockquote><p>注1：</p><ul><li>Java 中 LinkedList 即为典型双端队列实现，不过它同时实现了 Queue 接口，也提供了栈的 push pop 等方法</li></ul><p>注2：</p><ul><li><p>不同语言，操作双端队列的方法命名有所不同，参见下表</p><table><thead><tr><th>操作</th><th>Java</th><th>JavaScript</th><th>C++</th><th>leetCode 641</th></tr></thead><tbody><tr><td>尾部插入</td><td>offerLast</td><td>push</td><td>push_back</td><td>insertLast</td></tr><tr><td>头部插入</td><td>offerFirst</td><td>unshift</td><td>push_front</td><td>insertFront</td></tr><tr><td>尾部移除</td><td>pollLast</td><td>pop</td><td>pop_back</td><td>deleteLast</td></tr><tr><td>头部移除</td><td>pollFirst</td><td>shift</td><td>pop_front</td><td>deleteFront</td></tr><tr><td>尾部获取</td><td>peekLast</td><td>at(-1)</td><td>back</td><td>getRear</td></tr><tr><td>头部获取</td><td>peekFirst</td><td>at(0)</td><td>front</td><td>getFront</td></tr></tbody></table></li><li><p>吐槽一下 leetCode 命名比较 low</p></li><li><p>常见的单词还有 enqueue 入队、dequeue 出队</p></li></ul></blockquote><p><strong>接口定义</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Deque</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">offerFirst</span><span class="params">(E e)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">offerLast</span><span class="params">(E e)</span>;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">pollFirst</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">pollLast</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">peekFirst</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">peekLast</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表实现-2"><a href="#链表实现-2" class="headerlink" title="链表实现"></a>链表实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于环形链表的双端队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt; 元素类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListDeque</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Deque</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        Node&lt;E&gt; a = sentinel;</span><br><span class="line">        Node&lt;E&gt; b = sentinel.next;</span><br><span class="line">        Node&lt;E&gt; offered = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(a, e, b);</span><br><span class="line">        a.next = offered;</span><br><span class="line">        b.prev = offered;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        Node&lt;E&gt; a = sentinel.prev;</span><br><span class="line">        Node&lt;E&gt; b = sentinel;</span><br><span class="line">        Node&lt;E&gt; offered = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(a, e, b);</span><br><span class="line">        a.next = offered;</span><br><span class="line">        b.prev = offered;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pollFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; a = sentinel;</span><br><span class="line">        Node&lt;E&gt; polled = sentinel.next;</span><br><span class="line">        Node&lt;E&gt; b = polled.next;</span><br><span class="line">        a.next = b;</span><br><span class="line">        b.prev = a;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> polled.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pollLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; polled = sentinel.prev;</span><br><span class="line">        Node&lt;E&gt; a = polled.prev;</span><br><span class="line">        Node&lt;E&gt; b = sentinel;</span><br><span class="line">        a.next = b;</span><br><span class="line">        b.prev = a;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> polled.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peekFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peekLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sentinel.prev.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            Node&lt;E&gt; p = sentinel.next;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != sentinel;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> p.value;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        E value;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Node&lt;E&gt; prev, E value, Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; sentinel = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedListDeque</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        sentinel.next = sentinel;</span><br><span class="line">        sentinel.prev = sentinel;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组实现-1"><a href="#数组实现-1" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于循环数组实现, 特点</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;tail 停下来的位置不存储, 会浪费一个位置&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDeque1</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Deque</span>&lt;E&gt;, Iterable&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    h</span></span><br><span class="line"><span class="comment">            t</span></span><br><span class="line"><span class="comment">        0   1   2   3</span></span><br><span class="line"><span class="comment">        b           a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = dec(head, array.length);</span><br><span class="line">        array[head] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[tail] = e;</span><br><span class="line">        tail = inc(tail, array.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pollFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> array[head];</span><br><span class="line">        array[head] = <span class="literal">null</span>;</span><br><span class="line">        head = inc(head, array.length);</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pollLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = dec(tail, array.length);</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> array[tail];</span><br><span class="line">        array[tail] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peekFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[head];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peekLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[dec(tail, array.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tail &gt; head) &#123;</span><br><span class="line">            <span class="keyword">return</span> tail - head == array.length - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tail &lt; head) &#123;</span><br><span class="line">            <span class="keyword">return</span> head - tail == <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;E&gt;() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p != tail;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> array[p];</span><br><span class="line">                p = inc(p, array.length);</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    E[] array;</span><br><span class="line">    <span class="type">int</span> head;</span><br><span class="line">    <span class="type">int</span> tail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayDeque1</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">inc</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dec</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> length - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组实现中，如果存储的是基本类型，那么无需考虑内存释放，例如</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230110084245095.png" alt="image-20230110084245095"></p><p>但如果存储的是引用类型，应当设置该位置的引用为 null，以便内存及时释放</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230110084632543.png" alt="image-20230110084632543"></p><h2 id="2-7-优先级队列"><a href="#2-7-优先级队列" class="headerlink" title="2.7 优先级队列"></a>2.7 优先级队列</h2><h3 id="无序数组实现"><a href="#无序数组实现" class="headerlink" title="无序数组实现"></a>无序数组实现</h3><p><strong>要点</strong></p><ol><li>入队保持顺序</li><li>出队前找到优先级最高的出队，相当于一次选择排序</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue1</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Priority</span>&gt; <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Priority[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue1</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Priority</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// O(1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回优先级最高的索引值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">selectMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i].priority() &gt; array[max].priority()) &#123;</span><br><span class="line">                max = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// O(n)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> selectMax();</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) array[max];</span><br><span class="line">        remove(max);</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; size - <span class="number">1</span>) &#123;</span><br><span class="line">            System.arraycopy(array, index + <span class="number">1</span>,</span><br><span class="line">                    array, index, size - <span class="number">1</span> - index);</span><br><span class="line">        &#125;</span><br><span class="line">        array[--size] = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> selectMax();</span><br><span class="line">        <span class="keyword">return</span> (E) array[max];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>视频中忘记了 help GC，注意一下</li></ul><h3 id="有序数组实现"><a href="#有序数组实现" class="headerlink" title="有序数组实现"></a>有序数组实现</h3><p><strong>要点</strong></p><ol><li>入队后排好序，优先级最高的排列在尾部</li><li>出队只需删除尾部元素即可</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue2</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Priority</span>&gt; <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Priority[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue2</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Priority</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(n)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        insert(e);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一轮插入排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; array[i].priority() &gt; e.priority()) &#123;</span><br><span class="line">            array[i + <span class="number">1</span>] = array[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[i + <span class="number">1</span>] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(1)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) array[size - <span class="number">1</span>];</span><br><span class="line">        array[--size] = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E) array[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆实现"><a href="#堆实现" class="headerlink" title="堆实现"></a>堆实现</h3><p>计算机科学中，堆是一种基于树的数据结构，通常用<strong>完全二叉树</strong>实现。堆的特性如下</p><ul><li>在大顶堆中，任意节点 C 与它的父节点 P 符合 $P.value \geq C.value$</li><li>而小顶堆中，任意节点 C 与它的父节点 P 符合 $P.value \leq C.value$</li><li>最顶层的节点（没有父亲）称之为 root 根节点</li></ul><blockquote><p>In computer science, a <strong>heap</strong> is a specialized tree-based data structure which is essentially an almost complete tree that satisfies the <strong>heap property</strong>: in a <em>max heap</em>, for any given node C, if P is a parent node of C, then the <em>key</em> (the <em>value</em>) of P is greater than or equal to the key of C. In a <em>min heap</em>, the key of P is less than or equal to the key of C. The node at the “top” of the heap (with no parents) is called the <strong>root</strong> node</p></blockquote><p>例1 - 满二叉树（Full Binary Tree）特点：每一层都是填满的</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230112171444699.png" alt="image-20230112171444699"></p><p>例2 - 完全二叉树（Complete Binary Tree）特点：最后一层可能未填满，靠左对齐</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230112171917135.png" alt="image-20230112171917135"></p><p>例3 - 大顶堆</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230112170242265.png" alt="image-20230112170242265"></p><p>例4 - 小顶堆</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230112171236067.png" alt="image-20230112171236067"></p><p>完全二叉树可以使用数组来表示</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230112174351649.png" alt="image-20230112174351649"></p><p>特征</p><ul><li>如果从索引 0 开始存储节点数据<ul><li>节点 $i$ 的父节点为 $floor((i-1)&#x2F;2)$，当 $i&gt;0$ 时</li><li>节点 $i$ 的左子节点为 $2i+1$，右子节点为 $2i+2$，当然它们得 $&lt; size$</li></ul></li><li>如果从索引 1 开始存储节点数据<ul><li>节点 $i$ 的父节点为 $floor(i&#x2F;2)$，当 $i &gt; 1$ 时</li><li>节点 $i$ 的左子节点为 $2i$，右子节点为 $2i+1$，同样得 $&lt; size$</li></ul></li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue4</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Priority</span>&gt; <span class="keyword">implements</span> <span class="title class_">Queue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Priority[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue4</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Priority</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E offered)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> size++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (child &gt; <span class="number">0</span> &amp;&amp; offered.priority() &gt; array[parent].priority()) &#123;</span><br><span class="line">            array[child] = array[parent];</span><br><span class="line">            child = parent;</span><br><span class="line">            parent = (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[child] = offered;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Priority</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(<span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        <span class="type">Priority</span> <span class="variable">e</span> <span class="operator">=</span> array[size];</span><br><span class="line">        array[size] = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        shiftDown(<span class="number">0</span>);        </span><br><span class="line">        <span class="keyword">return</span> (E) e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shiftDown</span><span class="params">(<span class="type">int</span> parent)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> parent;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; size &amp;&amp; array[left].priority() &gt; array[max].priority()) &#123;</span><br><span class="line">            max = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; array[right].priority() &gt; array[max].priority()) &#123;</span><br><span class="line">            max = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max != parent) &#123;</span><br><span class="line">            swap(max, parent);</span><br><span class="line">            shiftDown(max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E) array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-阻塞队列"><a href="#2-8-阻塞队列" class="headerlink" title="2.8 阻塞队列"></a>2.8 阻塞队列</h2><p>之前的队列在很多场景下都不能很好地工作，例如</p><ol><li>大部分场景要求分离向队列放入（生产者）、从队列拿出（消费者）两个角色、它们得由不同的线程来担当，而之前的实现根本没有考虑线程安全问题</li><li>队列为空，那么在之前的实现里会返回 null，如果就是硬要拿到一个元素呢？只能不断循环尝试</li><li>队列为满，那么再之前的实现里会返回 false，如果就是硬要塞入一个元素呢？只能不断循环尝试</li></ol><p>因此我们需要解决的问题有</p><ol><li>用锁保证线程安全</li><li>用条件变量让<strong>等待非空线程</strong>与<strong>等待不满线程</strong>进入<strong>等待</strong>状态，而不是不断循环尝试，让 CPU 空转</li></ol><p>有同学对线程安全还没有足够的认识，下面举一个反例，两个线程都要执行入队操作（几乎在同一时刻）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThreadUnsafe</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] array = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(String e)</span> &#123;</span><br><span class="line">        array[tail] = e;</span><br><span class="line">        tail++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThreadUnsafe</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThreadUnsafe</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; queue.offer(<span class="string">&quot;e1&quot;</span>), <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; queue.offer(<span class="string">&quot;e2&quot;</span>), <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的时间序列如下，假设初始状态 tail &#x3D; 0，在执行过程中由于 CPU 在两个线程之间切换，造成了指令交错</p><table><thead><tr><th>线程1</th><th>线程2</th><th>说明</th></tr></thead><tbody><tr><td>array[tail]&#x3D;e1</td><td></td><td>线程1 向 tail 位置加入 e1 这个元素，但还没来得及执行  tail++</td></tr><tr><td></td><td>array[tail]&#x3D;e2</td><td>线程2 向 tail 位置加入 e2 这个元素，覆盖掉了 e1</td></tr><tr><td></td><td>tail++</td><td>tail 自增为1</td></tr><tr><td>tail++</td><td></td><td>tail 自增为2</td></tr><tr><td></td><td></td><td>最后状态 tail 为 2，数组为 [e2, null, null …]</td></tr></tbody></table><p>糟糕的是，由于指令交错的顺序不同，得到的结果不止以上一种，宏观上造成混乱的效果</p><h3 id="单锁实现"><a href="#单锁实现" class="headerlink" title="单锁实现"></a>单锁实现</h3><p>Java 中要防止代码段交错执行，需要使用锁，有两种选择</p><ul><li>synchronized 代码块，属于关键字级别提供锁保护，功能少</li><li>ReentrantLock 类，功能丰富</li></ul><p>以 ReentrantLock 为例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(String e)</span> &#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        array[tail] = e;</span><br><span class="line">        tail++;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要两个线程执行上段代码时，锁对象是同一个，就能保证 try 块内的代码的执行不会出现指令交错现象，即执行顺序只可能是下面两种情况之一</p><table><thead><tr><th>线程1</th><th>线程2</th><th>说明</th></tr></thead><tbody><tr><td>lock.lockInterruptibly()</td><td></td><td>t1对锁对象上锁</td></tr><tr><td>array[tail]&#x3D;e1</td><td></td><td></td></tr><tr><td></td><td>lock.lockInterruptibly()</td><td>即使 CPU 切换到线程2，但由于t1已经对该对象上锁，因此线程2卡在这儿进不去</td></tr><tr><td>tail++</td><td></td><td>切换回线程1 执行后续代码</td></tr><tr><td>lock.unlock()</td><td></td><td>线程1 解锁</td></tr><tr><td></td><td>array[tail]&#x3D;e2</td><td>线程2 此时才能获得锁，执行它的代码</td></tr><tr><td></td><td>tail++</td><td></td></tr></tbody></table><ul><li>另一种情况是线程2 先获得锁，线程1 被挡在外面</li><li>要明白<strong>保护的本质</strong>，本例中是保护的是 tail 位置读写的安全</li></ul><p>事情还没有完，上面的例子是队列还没有放满的情况，考虑下面的代码（这回锁同时保护了 tail 和 size 的读写安全）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(String e)</span> &#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">            <span class="comment">// 满了怎么办?</span></span><br><span class="line">        &#125;</span><br><span class="line">        array[tail] = e;</span><br><span class="line">        tail++;</span><br><span class="line">        </span><br><span class="line">        size++;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == array.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前是返回 false 表示添加失败，前面分析过想达到这么一种效果：</p><ul><li>在队列满时，不是立刻返回，而是当前线程进入等待</li><li>什么时候队列不满了，再唤醒这个等待的线程，从上次的代码处继续向下运行</li></ul><p>ReentrantLock 可以配合条件变量来实现，代码进化为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="type">Condition</span> <span class="variable">tailWaits</span> <span class="operator">=</span> lock.newCondition(); <span class="comment">// 条件变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(String e)</span> &#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">            tailWaits.await();<span class="comment">// 当队列满时, 当前线程进入 tailWaits 等待</span></span><br><span class="line">        &#125;</span><br><span class="line">        array[tail] = e;</span><br><span class="line">        tail++;</span><br><span class="line">        </span><br><span class="line">        size++;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> size == array.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>条件变量底层也是个队列，用来存储这些需要等待的线程，当队列满了，就会将 offer 线程加入条件队列，并暂时释放锁</li><li>将来我们的队列如果不满了（由 poll 线程那边得知）可以调用 tailWaits.signal() 来唤醒 tailWaits 中首个等待的线程，被唤醒的线程会再次抢到锁，从上次 await 处继续向下运行</li></ul><p>思考为何要用 while 而不是 if，设队列容量是 3</p><table><thead><tr><th>操作前</th><th>offer(4)</th><th>offer(5)</th><th>poll()</th><th>操作后</th></tr></thead><tbody><tr><td>[1 2 3]</td><td>队列满，进入tailWaits 等待</td><td></td><td></td><td>[1 2 3]</td></tr><tr><td>[1 2 3]</td><td></td><td></td><td>取走 1，队列不满，唤醒线程</td><td>[2 3]</td></tr><tr><td>[2 3]</td><td></td><td>抢先获得锁，发现不满，放入 5</td><td></td><td>[2 3 5]</td></tr><tr><td>[2 3 5]</td><td>从上次等待处直接向下执行</td><td></td><td></td><td>[2 3 5 ?]</td></tr></tbody></table><p>关键点：</p><ul><li>从 tailWaits 中唤醒的线程，会与新来的 offer 的线程争抢锁，谁能抢到是不一定的，如果后者先抢到，就会导致条件又发生变化</li><li>这种情况称之为<strong>虚假唤醒</strong>，唤醒后应该重新检查条件，看是不是得重新进入等待</li></ul><p>最后的实现代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单锁实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt; 元素类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueue1</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockingQueue1</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">tailWaits</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">headWaits</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">                tailWaits.await();</span><br><span class="line">            &#125;</span><br><span class="line">            array[tail] = e;</span><br><span class="line">            <span class="keyword">if</span> (++tail == array.length) &#123;</span><br><span class="line">                tail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            headWaits.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E e, <span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t</span> <span class="operator">=</span> TimeUnit.MILLISECONDS.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t = tailWaits.awaitNanos(t);</span><br><span class="line">            &#125;</span><br><span class="line">            array[tail] = e;</span><br><span class="line">            <span class="keyword">if</span> (++tail == array.length) &#123;</span><br><span class="line">                tail = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            headWaits.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isEmpty()) &#123;</span><br><span class="line">                headWaits.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> array[head];</span><br><span class="line">            array[head] = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">            <span class="keyword">if</span> (++head == array.length) &#123;</span><br><span class="line">                head = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            tailWaits.signal();</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public void offer(E e, long timeout) throws InterruptedException 是带超时的版本，可以只等待一段时间，而不是永久等下去，类似的 poll 也可以做带超时的版本，这个留给大家了</li></ul><blockquote><p><strong>注意</strong></p><ul><li>JDK 中 BlockingQueue 接口的方法命名与我的示例有些差异<ul><li>方法 offer(E e) 是非阻塞的实现，阻塞实现方法为 put(E e)</li><li>方法 poll() 是非阻塞的实现，阻塞实现方法为 take()</li></ul></li></ul></blockquote><h3 id="双锁实现"><a href="#双锁实现" class="headerlink" title="双锁实现"></a>双锁实现</h3><p>单锁的缺点在于：</p><ul><li>生产和消费几乎是不冲突的，唯一冲突的是生产者和消费者它们有可能同时修改 size</li><li>冲突的主要是生产者之间：多个 offer 线程修改 tail</li><li>冲突的还有消费者之间：多个 poll 线程修改 head</li></ul><p>如果希望进一步提高性能，可以用两把锁</p><ul><li>一把锁保护 tail</li><li>另一把锁保护 head</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">headLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();  <span class="comment">// 保护 head 的锁</span></span><br><span class="line"><span class="type">Condition</span> <span class="variable">headWaits</span> <span class="operator">=</span> headLock.newCondition(); <span class="comment">// 队列空时，需要等待的线程集合</span></span><br><span class="line"></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">tailLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();  <span class="comment">// 保护 tail 的锁</span></span><br><span class="line"><span class="type">Condition</span> <span class="variable">tailWaits</span> <span class="operator">=</span> tailLock.newCondition(); <span class="comment">// 队列满时，需要等待的线程集合</span></span><br></pre></td></tr></table></figure><p>先看看 offer 方法的初步实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    tailLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 队列满等待</span></span><br><span class="line">        <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">            tailWaits.await();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不满则入队</span></span><br><span class="line">        array[tail] = e;</span><br><span class="line">        <span class="keyword">if</span> (++tail == array.length) &#123;</span><br><span class="line">            tail = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改 size （有问题）</span></span><br><span class="line">        size++;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        tailLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的缺点是 size 并不受 tailLock 保护，tailLock 与 headLock 是两把不同的锁，并不能实现互斥的效果。因此，size 需要用下面的代码保证原子性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">size</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);   <span class="comment">// 保护 size 的原子变量</span></span><br><span class="line"></span><br><span class="line">size.getAndIncrement(); <span class="comment">// 自增</span></span><br><span class="line">size.getAndDecrement(); <span class="comment">// 自减</span></span><br></pre></td></tr></table></figure><p>代码修改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    tailLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 队列满等待</span></span><br><span class="line">        <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">            tailWaits.await();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不满则入队</span></span><br><span class="line">        array[tail] = e;</span><br><span class="line">        <span class="keyword">if</span> (++tail == array.length) &#123;</span><br><span class="line">            tail = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改 size</span></span><br><span class="line">        size.getAndIncrement();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        tailLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对称地，可以写出 poll 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    E e;</span><br><span class="line">    headLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 队列空等待</span></span><br><span class="line">        <span class="keyword">while</span> (isEmpty()) &#123;</span><br><span class="line">            headWaits.await();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不空则出队</span></span><br><span class="line">        e = array[head];</span><br><span class="line">        <span class="keyword">if</span> (++head == array.length) &#123;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改 size</span></span><br><span class="line">        size.getAndDecrement();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        headLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来看一个难题，就是如何通知 headWaits 和 tailWaits 中等待的线程，比如 poll 方法拿走一个元素，通知 tailWaits：我拿走一个，不满了噢，你们可以放了，因此代码改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    E e;</span><br><span class="line">    headLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 队列空等待</span></span><br><span class="line">        <span class="keyword">while</span> (isEmpty()) &#123;</span><br><span class="line">            headWaits.await();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不空则出队</span></span><br><span class="line">        e = array[head];</span><br><span class="line">        <span class="keyword">if</span> (++head == array.length) &#123;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改 size</span></span><br><span class="line">        size.getAndDecrement();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通知 tailWaits 不满（有问题）</span></span><br><span class="line">        tailWaits.signal();</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        headLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题在于要使用这些条件变量的 await()， signal() 等方法需要先获得与之关联的锁，上面的代码若直接运行会出现以下错误</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalMonitorStateException</span><br></pre></td></tr></table></figure><p>那有同学说，加上锁不就行了吗，于是写出了下面的代码</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230208160343493.png" alt="image-20230208160343493"></p><p>发现什么问题了？两把锁这么嵌套使用，非常容易出现死锁，如下所示</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230208160143386.png" alt="image-20230208160143386"></p><p>因此得避免嵌套，两段加锁的代码变成了下面平级的样子</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230208162857435.png" alt="image-20230208162857435"></p><p>性能还可以进一步提升</p><ol><li><p>代码调整后 offer 并没有同时获取 tailLock 和 headLock 两把锁，因此两次加锁之间会有<strong>空隙</strong>，这个空隙内可能有其它的 offer 线程添加了更多的元素，那么这些线程都要执行 signal()，通知 poll 线程队列非空吗？</p><ul><li>每次调用 signal() 都需要这些 offer 线程先获得 headLock 锁，成本较高，要想法减少 offer 线程获得 headLock 锁的次数</li><li>可以加一个条件：当 offer 增加前队列为空，即从 0 变化到不空，才由此 offer 线程来通知 headWaits，其它情况不归它管</li></ul></li><li><p>队列从 0 变化到不空，会唤醒一个等待的 poll 线程，这个线程被唤醒后，肯定能拿到 headLock 锁，因此它具备了唤醒 headWaits 上其它 poll 线程的先决条件。如果检查出此时有其它 offer 线程新增了元素（不空，但不是从0变化而来），那么不妨由此 poll 线程来唤醒其它 poll 线程</p></li></ol><p>这个技巧被称之为级联通知（cascading notifies），类似的原因</p><ol start="3"><li>在 poll 时队列从满变化到不满，才由此 poll 线程来唤醒一个等待的 offer 线程，目的也是为了减少 poll 线程对 tailLock 上锁次数，剩下等待的 offer 线程由这个 offer 线程间接唤醒</li></ol><p>最终的代码为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueue2</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">size</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">headLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">headWaits</span> <span class="operator">=</span> headLock.newCondition();</span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">tailLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">tailWaits</span> <span class="operator">=</span> tailLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockingQueue2</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> c;</span><br><span class="line">        tailLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isFull()) &#123;</span><br><span class="line">                tailWaits.await();</span><br><span class="line">            &#125;</span><br><span class="line">            array[tail] = e;</span><br><span class="line">            <span class="keyword">if</span> (++tail == array.length) &#123;</span><br><span class="line">                tail = <span class="number">0</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">            c = size.getAndIncrement();</span><br><span class="line">            <span class="comment">// a. 队列不满, 但不是从满-&gt;不满, 由此offer线程唤醒其它offer线程</span></span><br><span class="line">            <span class="keyword">if</span> (c + <span class="number">1</span> &lt; array.length) &#123;</span><br><span class="line">                tailWaits.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            tailLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// b. 从0-&gt;不空, 由此offer线程唤醒等待的poll线程</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            headLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                headWaits.signal();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                headLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        E e;</span><br><span class="line">        <span class="type">int</span> c;</span><br><span class="line">        headLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isEmpty()) &#123;</span><br><span class="line">                headWaits.await(); </span><br><span class="line">            &#125;</span><br><span class="line">            e = array[head]; </span><br><span class="line">            <span class="keyword">if</span> (++head == array.length) &#123;</span><br><span class="line">                head = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c = size.getAndDecrement();</span><br><span class="line">            <span class="comment">// b. 队列不空, 但不是从0变化到不空，由此poll线程通知其它poll线程</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                headWaits.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            headLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// a. 从满-&gt;不满, 由此poll线程唤醒等待的offer线程</span></span><br><span class="line">        <span class="keyword">if</span> (c == array.length) &#123;</span><br><span class="line">            tailLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tailWaits.signal();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                tailLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size.get() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size.get() == array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双锁实现的非常精巧，据说作者 Doug Lea 花了一年的时间才完善了此段代码</p><h2 id="2-9-堆"><a href="#2-9-堆" class="headerlink" title="2.9 堆"></a>2.9 堆</h2><p>以大顶堆为例，相对于之前的优先级队列，增加了堆化等方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取堆顶元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 堆顶元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除堆顶元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 堆顶元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        swap(<span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定索引处元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被删除元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deleted</span> <span class="operator">=</span> array[index];</span><br><span class="line">        swap(index, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        down(index);</span><br><span class="line">        <span class="keyword">return</span> deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换堆顶元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replaced 新元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(<span class="type">int</span> replaced)</span> &#123;</span><br><span class="line">        array[<span class="number">0</span>] = replaced;</span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆的尾部添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offered 新元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否添加成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(<span class="type">int</span> offered)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == array.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        up(offered);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 offered 元素上浮: 直至 offered 小于父元素或到堆顶</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">up</span><span class="params">(<span class="type">int</span> offered)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> size;</span><br><span class="line">        <span class="keyword">while</span> (child &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (offered &gt; array[parent]) &#123;</span><br><span class="line">                array[child] = array[parent];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            child = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        array[child] = offered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MaxHeap</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">        <span class="built_in">this</span>.size = array.length;</span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如何找到最后这个非叶子节点  size / 2 - 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            down(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 parent 索引处的元素下潜: 与两个孩子较大者交换, 直至没孩子或孩子没它大</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span> parent)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> parent;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; size &amp;&amp; array[left] &gt; array[max]) &#123;</span><br><span class="line">            max = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; array[right] &gt; array[max]) &#123;</span><br><span class="line">            max = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max != parent) &#123; <span class="comment">// 找到了更大的孩子</span></span><br><span class="line">            swap(max, parent);</span><br><span class="line">            down(max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个索引处的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">MaxHeap</span> <span class="variable">maxHeap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaxHeap</span>(array);</span><br><span class="line">        System.out.println(Arrays.toString(maxHeap.array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建堆</strong></p><p>Floyd 建堆算法作者（也是之前龟兔赛跑判环作者）：</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230213095110902.png" alt="image-20230213095110902"></p><ol><li>找到最后一个非叶子节点</li><li>从后向前，对每个节点执行下潜</li></ol><p>一些规律</p><ul><li>一棵满二叉树节点个数为 $2^h-1$，如下例中高度 $h&#x3D;3$ 节点数是 $2^3-1&#x3D;7$</li><li>非叶子节点范围为 $[0, size&#x2F;2-1]$</li></ul><p>算法时间复杂度分析</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230213114024607.png" alt="image-20230213114024607"></p><p>下面看交换次数的推导：设节点高度为 3</p><table><thead><tr><th></th><th>本层节点数</th><th>高度</th><th>下潜最多交换次数（高度-1）</th></tr></thead><tbody><tr><td>4567 这层</td><td>4</td><td>1</td><td>0</td></tr><tr><td>23这层</td><td>2</td><td>2</td><td>1</td></tr><tr><td>1这层</td><td>1</td><td>3</td><td>2</td></tr></tbody></table><p>每一层的交换次数为：$节点个数*此节点交换次数$，总的交换次数为<br>$$<br>\begin{aligned}<br>&amp; 4 * 0 + 2 * 1 + 1 * 2 \</p><p>&amp; \frac{8}{2}*0 + \frac{8}{4}*1 + \frac{8}{8}*2 \</p><p>&amp; \frac{8}{2^1}*0 + \frac{8}{2^2}*1 + \frac{8}{2^3}*2\</p><p>\end{aligned}<br>$$<br>即<br>$$<br>\sum_{i&#x3D;1}^{h}(\frac{2^h}{2^i}*(i-1))<br>$$<br>在 <a href="https://www.wolframalpha.com/">https://www.wolframalpha.com/</a> 输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sum[\(40)Divide[Power[2,x],Power[2,i]]*\(40)i-1\(41)\(41),&#123;i,1,x&#125;]</span><br></pre></td></tr></table></figure><p>推导出<br>$$<br>2^h -h -1<br>$$<br>其中 $2^h \approx n$，$h \approx \log_2{n}$，因此有时间复杂度 $O(n)$</p><h2 id="2-10-二叉树"><a href="#2-10-二叉树" class="headerlink" title="2.10 二叉树"></a>2.10 二叉树</h2><p>二叉树是这么一种树状结构：每个节点最多有两个孩子，左孩子和右孩子</p><p>重要的二叉树结构</p><ul><li>完全二叉树（complete binary tree）是一种二叉树结构，除最后一层以外，每一层都必须填满，填充时要遵从先左后右</li><li>平衡二叉树（balance binary tree）是一种二叉树结构，其中每个节点的左右子树高度相差不超过 1</li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>存储方式分为两种</p><ol><li>定义树节点与左、右孩子引用（TreeNode）</li><li>使用数组，前面讲堆时用过，若以 0 作为树的根，索引可以通过如下方式计算<ul><li>父 &#x3D; floor((子 - 1) &#x2F; 2)</li><li>左孩子 &#x3D; 父 * 2 + 1</li><li>右孩子 &#x3D; 父 * 2 + 2</li></ul></li></ol><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>遍历也分为两种</p><ol><li>广度优先遍历（Breadth-first order）：尽可能先访问距离根最近的节点，也称为层序遍历</li><li>深度优先遍历（Depth-first order）：对于二叉树，可以进一步分成三种（要深入到叶子节点）<ol><li>pre-order 前序遍历，对于每一棵子树，先访问该节点，然后是左子树，最后是右子树</li><li>in-order 中序遍历，对于每一棵子树，先访问左子树，然后是该节点，最后是右子树</li><li>post-order 后序遍历，对于每一棵子树，先访问左子树，然后是右子树，最后是该节点</li></ol></li></ol><h4 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h4><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230216153607396.png" alt="image-20230216153607396"></p><table><thead><tr><th>本轮开始时队列</th><th>本轮访问节点</th></tr></thead><tbody><tr><td>[1]</td><td>1</td></tr><tr><td>[2, 3]</td><td>2</td></tr><tr><td>[3, 4]</td><td>3</td></tr><tr><td>[4, 5, 6]</td><td>4</td></tr><tr><td>[5, 6]</td><td>5</td></tr><tr><td>[6, 7, 8]</td><td>6</td></tr><tr><td>[7, 8]</td><td>7</td></tr><tr><td>[8]</td><td>8</td></tr><tr><td>[]</td><td></td></tr></tbody></table><ol><li>初始化，将根节点加入队列</li><li>循环处理队列中每个节点，直至队列为空</li><li>每次循环内处理节点后，将它的孩子节点（即下一层的节点）加入队列</li></ol><blockquote><p>注意</p><ul><li><p>以上用队列来层序遍历是针对  TreeNode 这种方式表示的二叉树</p></li><li><p>对于数组表现的二叉树，则直接遍历数组即可，自然为层序遍历的顺序</p></li></ul></blockquote><h4 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h4><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230221110443230.png" alt="image-20230221110443230"></p><table><thead><tr><th>栈暂存</th><th>已处理</th><th>前序遍历</th><th>中序遍历</th></tr></thead><tbody><tr><td>[1]</td><td>1 ✔️ 左💤 右💤</td><td>1</td><td></td></tr><tr><td>[1, 2]</td><td>2✔️ 左💤 右💤<br />1✔️ 左💤 右💤</td><td>2</td><td></td></tr><tr><td>[1, 2, 4]</td><td>4✔️ 左✔️ 右✔️<br />2✔️ 左💤 右💤<br />1✔️ 左💤 右💤</td><td>4</td><td>4</td></tr><tr><td>[1, 2]</td><td>2✔️ 左✔️ 右✔️<br />1✔️ 左💤 右💤</td><td></td><td>2</td></tr><tr><td>[1]</td><td>1✔️ 左✔️ 右💤</td><td></td><td>1</td></tr><tr><td>[1, 3]</td><td>3✔️ 左💤 右💤<br />1✔️ 左✔️ 右💤</td><td>3</td><td></td></tr><tr><td>[1, 3, 5]</td><td>5✔️ 左✔️ 右✔️<br />3✔️ 左💤 右💤<br />1✔️ 左✔️ 右💤</td><td>5</td><td>5</td></tr><tr><td>[1, 3]</td><td>3✔️ 左✔️ 右💤<br />1✔️ 左✔️ 右💤</td><td></td><td>3</td></tr><tr><td>[1, 3, 6]</td><td>6✔️ 左✔️ 右✔️<br />3✔️ 左✔️ 右💤<br />1✔️ 左✔️ 右💤</td><td>6</td><td>6</td></tr><tr><td>[1, 3]</td><td>3✔️ 左✔️ 右✔️<br />1✔️ 左✔️ 右💤</td><td></td><td></td></tr><tr><td>[1]</td><td>1✔️ 左✔️ 右✔️</td><td></td><td></td></tr><tr><td>[]</td><td></td><td></td><td></td></tr></tbody></table><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;前序遍历&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(node.val + <span class="string">&quot;\t&quot;</span>); <span class="comment">// 值</span></span><br><span class="line">    preOrder(node.left); <span class="comment">// 左</span></span><br><span class="line">    preOrder(node.right); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;中序遍历&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inOrder(node.left); <span class="comment">// 左</span></span><br><span class="line">    System.out.print(node.val + <span class="string">&quot;\t&quot;</span>); <span class="comment">// 值</span></span><br><span class="line">    inOrder(node.right); <span class="comment">// 右</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;后序遍历&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postOrder(node.left); <span class="comment">// 左</span></span><br><span class="line">    postOrder(node.right); <span class="comment">// 右</span></span><br><span class="line">    System.out.print(node.val + <span class="string">&quot;\t&quot;</span>); <span class="comment">// 值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><p><strong>前序遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedListStack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedListStack</span>&lt;&gt;();</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() || curr != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(curr);</span><br><span class="line">        System.out.println(curr);</span><br><span class="line">        curr = curr.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        curr = pop.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedListStack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedListStack</span>&lt;&gt;();</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() || curr != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(curr);</span><br><span class="line">        curr = curr.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.println(pop);</span><br><span class="line">        curr = pop.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedListStack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedListStack</span>&lt;&gt;();</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty() || curr != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push(curr);</span><br><span class="line">        curr = curr.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        <span class="keyword">if</span> (peek.right == <span class="literal">null</span> || peek.right == pop) &#123;</span><br><span class="line">            pop = stack.pop();</span><br><span class="line">            System.out.println(pop);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr = peek.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于后序遍历，向回走时，需要处理完右子树才能 pop 出栈。如何知道右子树处理完成呢？</p><ul><li><p>如果栈顶元素的 $right \equiv null$ 表示没啥可处理的，可以出栈</p></li><li><p>如果栈顶元素的 $right \neq null$，</p><ul><li>那么使用 lastPop 记录最近出栈的节点，即表示从这个节点向回走</li><li>如果栈顶元素的 $right&#x3D;&#x3D;lastPop$ 此时应当出栈</li></ul></li></ul><p>对于前、中两种遍历，实际以上代码从右子树向回走时，并未走完全程（stack 提前出栈了）后序遍历以上代码是走完全程了</p><p><strong>统一写法</strong></p><p>下面是一种统一的写法，依据后序遍历修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root; <span class="comment">// 代表当前节点</span></span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 最近一次弹栈的元素</span></span><br><span class="line"><span class="keyword">while</span> (curr != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        colorPrintln(<span class="string">&quot;前: &quot;</span> + curr.val, <span class="number">31</span>);</span><br><span class="line">        stack.push(curr); <span class="comment">// 压入栈，为了记住回来的路</span></span><br><span class="line">        curr = curr.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        <span class="comment">// 右子树可以不处理, 对中序来说, 要在右子树处理之前打印</span></span><br><span class="line">        <span class="keyword">if</span> (peek.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            colorPrintln(<span class="string">&quot;中: &quot;</span> + peek.val, <span class="number">36</span>);</span><br><span class="line">            pop = stack.pop();</span><br><span class="line">            colorPrintln(<span class="string">&quot;后: &quot;</span> + pop.val, <span class="number">34</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右子树处理完成, 对中序来说, 无需打印</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (peek.right == pop) &#123;</span><br><span class="line">            pop = stack.pop();</span><br><span class="line">            colorPrintln(<span class="string">&quot;后: &quot;</span> + pop.val, <span class="number">34</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右子树待处理, 对中序来说, 要在右子树处理之前打印</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            colorPrintln(<span class="string">&quot;中: &quot;</span> + peek.val, <span class="number">36</span>);</span><br><span class="line">            curr = peek.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">colorPrintln</span><span class="params">(String origin, <span class="type">int</span> color)</span> &#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;\033[%dm%s\033[0m%n&quot;</span>, color, origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一张图演示三种遍历</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/Sorted_binary_tree_ALL_RGB.svg.png" alt="Sorted_binary_tree_ALL_RGB.svg"></p><ul><li>红色：前序遍历顺序</li><li>绿色：中序遍历顺序</li><li>蓝色：后续遍历顺序</li></ul><h1 id="三-练习"><a href="#三-练习" class="headerlink" title="三. 练习"></a>三. 练习</h1><h2 id="3-1-时间复杂度"><a href="#3-1-时间复杂度" class="headerlink" title="3.1 时间复杂度"></a>3.1 时间复杂度</h2><p>用函数 $f(n)$ 表示算法效率与数据规模的关系，假设每次解决问题需要 1 微秒（$10^{-6}$ 秒），进行估算：</p><ol><li>如果 $f(n) &#x3D; n^2$ 那么 1 秒能解决多少次问题？1 天呢？</li><li>如果 $f(n) &#x3D; log_2(n)$  那么 1 秒能解决多少次问题？1 天呢？</li><li>如果 $f(n) &#x3D; n!$ 那么 1 秒能解决多少次问题？1 天呢？</li></ol><p>参考解答</p><ol><li>1秒 $\sqrt{10^6} &#x3D; 1000$ 次，1 天 $\sqrt{10^6 * 3600 * 24} \approx 293938$ 次</li><li>1秒 $2^{1,000,000} $ 次，一天 $2^{86,400,000,000}$</li><li>推算如下<ul><li>$10! &#x3D; 3,628,800$ 1秒能解决 $1,000,000$ 次，因此次数为 9 次</li><li>$14!&#x3D;87,178,291,200$，一天能解决 $86,400,000,000$ 次，因此次数为 13 次</li></ul></li></ol><h2 id="3-2-二分查找"><a href="#3-2-二分查找" class="headerlink" title="3.2 二分查找"></a>3.2 二分查找</h2><ul><li><a href="https://leetcode.cn/problems/sqrtx/">69. x 的平方根 - 力扣（LeetCode）</a></li></ul><h3 id="E01-二分查找-力扣-704-题"><a href="#E01-二分查找-力扣-704-题" class="headerlink" title="E01. 二分查找-力扣 704 题"></a>E01. 二分查找-力扣 704 题</h3><p><strong>要点</strong>：减而治之，可以用递归或非递归实现</p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1</p><p>例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>], target = <span class="number">9</span></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: <span class="number">9</span> 出现在 nums 中并且下标为 <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">输入: nums = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">12</span>], target = <span class="number">2</span></span><br><span class="line">输出: -<span class="number">1</span></span><br><span class="line">解释: <span class="number">2</span> 不存在 nums 中因此返回 -<span class="number">1</span>    </span><br></pre></td></tr></table></figure><p><strong>参考答案</strong>：略，可以用讲过的任意一种二分求解</p><h3 id="E02-搜索插入位置-力扣-35-题"><a href="#E02-搜索插入位置-力扣-35-题" class="headerlink" title="E02. 搜索插入位置-力扣 35 题"></a>E02. 搜索插入位置-力扣 35 题</h3><p><strong>要点</strong>：理解谁代表插入位置</p><p>给定一个排序数组和一个目标值</p><ul><li>在数组中找到目标值，并返回其索引</li><li>如果目标值不存在于数组中，返回它将会被按顺序插入的位置</li></ul><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>参考答案1</strong>：用二分查找基础版代码改写，基础版中，找到返回 m，没找到 i 代表插入点，因此有</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">// 原始 return -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考答案2</strong>：用二分查找平衡版改写，平衡版中</p><ul><li>如果 target &#x3D;&#x3D; a[i] 返回 i 表示找到</li><li>如果 target &lt; a[i]，例如 target &#x3D; 2，a[i] &#x3D; 3，这时就应该在 i 位置插入 2</li><li>如果 a[i] &lt; target，例如 a[i] &#x3D; 3，target &#x3D; 4，这时就应该在 i+1 位置插入 4</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt; j - i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (target &lt;= a[i]) ? i : i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 原始 (target == a[i]) ? i : -1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考答案3</strong>：用 leftmost 版本解，返回值即为插入位置（并能处理元素重复的情况）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target &lt;= a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E03-搜索开始结束位置-力扣-34-题"><a href="#E03-搜索开始结束位置-力扣-34-题" class="headerlink" title="E03. 搜索开始结束位置-力扣 34 题"></a>E03. 搜索开始结束位置-力扣 34 题</h3><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br><span class="line"></span><br><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br><span class="line"></span><br><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">left</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            candidate = m;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">right</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">            j = m - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            candidate = m;</span><br><span class="line">            i = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> left(nums, target);</span><br><span class="line">    <span class="keyword">if</span>(x == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;x, right(nums, target)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-递归-single-recursion"><a href="#3-3-递归-single-recursion" class="headerlink" title="3.3 递归 - single recursion"></a>3.3 递归 - single recursion</h2><h3 id="E03-二分查找"><a href="#E03-二分查找" class="headerlink" title="E03. 二分查找"></a>E03. 二分查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> recursion(a, target, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">recursion</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; j) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; a[m]) &#123;</span><br><span class="line">        <span class="keyword">return</span> recursion(a, target, i, m - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &lt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> recursion(a, target, m + <span class="number">1</span>, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-冒泡排序"><a href="#E04-冒泡排序" class="headerlink" title="E04. 冒泡排序"></a>E04. 冒泡排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    bubble(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(low == high) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low; i &lt; high; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            swap(a, i, i + <span class="number">1</span>);</span><br><span class="line">            j = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bubble(a, low, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>low 与 high 为未排序范围</li><li>j 表示的是未排序的边界，下一次递归时的 high<ul><li>发生交换，意味着有无序情况</li><li>最后一次交换（以后没有无序）时，左侧 i 仍是无序，右侧 i+1 已然有序</li></ul></li><li>视频中讲解的是只考虑 high 边界的情况，参考以上代码，理解在 low .. high 范围内的处理方法</li></ul><h3 id="E05-插入排序"><a href="#E05-插入排序" class="headerlink" title="E05. 插入排序"></a>E05. 插入排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    insertion(a, <span class="number">1</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertion</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[low];</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; a[i] &gt; i) &#123;</span><br><span class="line">        a[i + <span class="number">1</span>] = a[i];</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i + <span class="number">1</span> != low) &#123;</span><br><span class="line">        a[i + <span class="number">1</span>] = t;</span><br><span class="line">    &#125;    </span><br><span class="line">    insertion(a, low + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>已排序区域：[0 .. i .. low-1]</li><li>未排序区域：[low .. high]</li><li>视频中讲解的是只考虑 low 边界的情况，参考以上代码，理解 low-1 ..  high 范围内的处理方法</li><li>扩展：利用二分查找 leftmost 版本，改进寻找插入位置的代码</li></ul><h3 id="E06-约瑟夫问题-16"><a href="#E06-约瑟夫问题-16" class="headerlink" title="E06. 约瑟夫问题[^16]"></a>E06. 约瑟夫问题[^16]</h3><p>$n$ 个人排成圆圈，从头开始报数，每次数到第 $m$ 个人（$m$ 从 $1$ 开始）杀之，继续从下一个人重复以上过程，求最后活下来的人是谁？</p><p><strong>方法1</strong></p><p>根据最后的存活者 a 倒推出它在上一轮的索引号</p><table><thead><tr><th>f(n,m)</th><th>本轮索引</th><th>为了让 a 是这个索引，上一轮应当这样排</th><th>规律</th></tr></thead><tbody><tr><td>f(1,3)</td><td>0</td><td>x x x a</td><td>(0 + 3) % 2</td></tr><tr><td>f(2,3)</td><td>1</td><td>x x x 0 a</td><td>(1 + 3) % 3</td></tr><tr><td>f(3,3)</td><td>1</td><td>x x x 0 a</td><td>(1 + 3) % 4</td></tr><tr><td>f(4,3)</td><td>0</td><td>x x x a</td><td>(0 + 3) % 5</td></tr><tr><td>f(5,3)</td><td>3</td><td>x x x 0 1 2 a</td><td>(3 + 3) % 6</td></tr><tr><td>f(6,3)</td><td>0</td><td>x x x a</td><td></td></tr></tbody></table><p><strong>方法2</strong></p><p>设 n 为总人数，m 为报数次数，解返回的是这些人的索引，从0开始</p><table><thead><tr><th>f(n, m)</th><th>解</th><th>规律</th></tr></thead><tbody><tr><td>f(1, 3)</td><td>0</td><td></td></tr><tr><td>f(2, 3)</td><td>0 1 &#x3D;&gt; 1</td><td>3%2&#x3D;1</td></tr><tr><td>f(3, 3)</td><td>0 1 2 &#x3D;&gt; 0 1</td><td>3%3&#x3D;0</td></tr><tr><td>f(4, 3)</td><td>0 1 2 3 &#x3D;&gt; 3 0 1</td><td>3%4&#x3D;3</td></tr><tr><td>f(5, 3)</td><td>0 1 2 3 4  &#x3D;&gt; 3 4 0 1</td><td>3%5&#x3D;3</td></tr><tr><td>f(6, 3)</td><td>0 1 2 3 4 5 &#x3D;&gt; 3 4 5 0 1</td><td>3%6&#x3D;3</td></tr></tbody></table><p><strong>一. 找出等价函数</strong></p><p>规律：下次报数的起点为 $k &#x3D; m % n$</p><ul><li>首次出列人的序号是 $k-1$，剩下的的 $n-1$ 个人重新组成约瑟夫环</li><li>下次从 $k$ 开始数，序号如下<ul><li>$k,\ k+1, \ …\ ,\ 0,\ 1,\ k-2$，如上例中 $3\ 4\ 5\ 0\ 1$</li></ul></li></ul><p>这个函数称之为 $g(n-1,m)$，它的最终结果与 $f(n,m)$ 是相同的。</p><p><strong>二. 找到映射函数</strong></p><p>现在想办法找到 $g(n-1,m)$ 与 $f(n-1, m)$ 的对应关系，即<br>$$<br>3 \rightarrow 0 \<br>4 \rightarrow 1 \<br>5 \rightarrow 2 \<br>0 \rightarrow 3 \<br>1 \rightarrow 4 \<br>$$<br>映射函数为<br>$$<br>mapping(x) &#x3D;<br>\begin{cases}<br>x-k &amp; x&#x3D;[k..n-1] \<br>x+n-k &amp; x&#x3D;[0..k-2]<br>\end{cases}<br>$$<br>等价于下面函数<br>$$<br>mapping(x) &#x3D; (x + n - k)%{n}<br>$$<br>代入测试一下<br>$$<br>3 \rightarrow (3+6-3)%6 \rightarrow 0 \<br>4 \rightarrow (4+6-3)%6 \rightarrow 1 \<br>5 \rightarrow (5+6-3)%6 \rightarrow 2 \<br>0 \rightarrow (0+6-3)%6 \rightarrow 3 \<br>1 \rightarrow (1+6-3)%6 \rightarrow 4 \<br>$$<br>综上有<br>$$<br>f(n-1,m) &#x3D; mapping(g(n-1,m))<br>$$</p><p><strong>三. 求逆映射函数</strong></p><p>映射函数是根据 x 计算 y，逆映射函数即根据 y 得到 x<br>$$<br>mapping^{-1}(x) &#x3D; (x + k)%n<br>$$<br>代入测试一下<br>$$<br>0 \rightarrow (0+3)%6 \rightarrow 3 \<br>1 \rightarrow (1+3)%6 \rightarrow 4 \<br>2 \rightarrow (2+3)%6 \rightarrow 5 \<br>3 \rightarrow (3+3)%6 \rightarrow 0 \<br>4 \rightarrow (4+3)%6 \rightarrow 1 \<br>$$<br>因此可以求得<br>$$<br>g(n-1,m) &#x3D; mapping^{-1}(f(n-1,m))<br>$$</p><p><strong>四. 递推式</strong></p><p>代入推导<br>$$<br>\begin{aligned}<br>f(n,m) &#x3D; \ &amp; g(n-1,m) \<br>&#x3D; \ &amp; mapping^{-1}(f(n-1,m)) \<br>&#x3D; \ &amp; (f(n-1,m) + k) % n \<br>&#x3D; \ &amp; (f(n-1,m) + m%n) % n \<br>&#x3D; \ &amp; (f(n-1,m) + m) % n \<br>\end{aligned}<br>$$<br>最后一步化简是利用了模运算法则</p><p>$(a+b)%n &#x3D; (a%n + b%n) %n$  例如 </p><ul><li>$(6+6)%5 &#x3D; 2 &#x3D; (6+6%5)%5$</li><li>$(6+5)%5 &#x3D; 1 &#x3D; (6+5%5)%5$</li><li>$(6+4)%5 &#x3D; 0 &#x3D; (6+4%5)%5$</li></ul><p>最终递推式<br>$$<br>f(n,m) &#x3D;<br>\begin{cases}<br>(f(n-1,m) + m) % n &amp; n&gt;1\<br>0 &amp; n &#x3D; 1<br>\end{cases}<br>$$</p><h2 id="3-4-递归-multi-recursion"><a href="#3-4-递归-multi-recursion" class="headerlink" title="3.4 递归 - multi recursion"></a>3.4 递归 - multi recursion</h2><h3 id="E02-汉诺塔-13"><a href="#E02-汉诺塔-13" class="headerlink" title="E02. 汉诺塔[^13]"></a>E02. 汉诺塔[^13]</h3><p>Tower of Hanoi，是一个源于印度古老传说：大梵天创建世界时做了三根金刚石柱，在一根柱子从下往上按大小顺序摞着 64 片黄金圆盘，大梵天命令婆罗门把圆盘重新摆放在另一根柱子上，并且规定</p><ul><li>一次只能移动一个圆盘</li><li>小圆盘上不能放大圆盘</li></ul><p>下面的动图演示了4片圆盘的移动方法</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/Tower_of_Hanoi_4.gif"></p><p>使用程序代码模拟圆盘的移动过程，并估算出时间复杂度</p><p><strong>思路</strong></p><ul><li><p>假设每根柱子标号 a，b，c，每个圆盘用 1，2，3 … 表示其大小，圆盘初始在 a，要移动到的目标是 c</p></li><li><p>如果只有一个圆盘，此时是最小问题，可以直接求解</p><ul><li>移动圆盘1 $a \mapsto c$</li></ul><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221219090741078.png" alt="image-20221219090741078" style="zoom:50%;" /></li><li><p>如果有两个圆盘，那么</p><ul><li>圆盘1 $a \mapsto b$ </li><li>圆盘2 $a \mapsto c$</li><li>圆盘1 $b \mapsto c$</li></ul><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221219091316225.png" alt="image-20221219091316225" style="zoom:50%;" /></li><li><p>如果有三个圆盘，那么</p><ul><li>圆盘12 $a \mapsto b$</li><li>圆盘3 $a \mapsto c$</li><li>圆盘12 $b \mapsto c$</li></ul><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221219091930614.png" alt="image-20221219091930614" style="zoom:50%;" /></li><li><p>如果有四个圆盘，那么</p><ul><li>圆盘 123 $a \mapsto b$</li><li>圆盘4 $a \mapsto c$</li><li>圆盘 123 $b \mapsto c$</li></ul></li></ul><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221219092537323.png" alt="image-20221219092537323" style="zoom:50%;" /><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E02HanoiTower</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">             源 借 目</span></span><br><span class="line"><span class="comment">        h(4, a, b, c) -&gt; h(3, a, c, b)</span></span><br><span class="line"><span class="comment">                         a -&gt; c</span></span><br><span class="line"><span class="comment">                         h(3, b, a, c)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> LinkedList&lt;Integer&gt; a = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> LinkedList&lt;Integer&gt; b = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> LinkedList&lt;Integer&gt; c = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            a.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">h</span><span class="params">(<span class="type">int</span> n, LinkedList&lt;Integer&gt; a, </span></span><br><span class="line"><span class="params">                  LinkedList&lt;Integer&gt; b, </span></span><br><span class="line"><span class="params">                  LinkedList&lt;Integer&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        h(n - <span class="number">1</span>, a, c, b);</span><br><span class="line">        c.addLast(a.removeLast());</span><br><span class="line">        print();</span><br><span class="line">        h(n - <span class="number">1</span>, b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        init(<span class="number">3</span>);</span><br><span class="line">        print();</span><br><span class="line">        h(<span class="number">3</span>, a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E03-杨辉三角-6"><a href="#E03-杨辉三角-6" class="headerlink" title="E03. 杨辉三角[^6]"></a>E03. 杨辉三角[^6]</h3><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221219172514410.png" alt="image-20221219172514410"></p><p><strong>分析</strong></p><p>把它斜着看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        1</span><br><span class="line">      1   1</span><br><span class="line">    1   2   1</span><br><span class="line">  1   3   3   1</span><br><span class="line">1   4   6   4   1</span><br></pre></td></tr></table></figure><ul><li>行 $i$，列 $j$，那么 $[i][j]$ 的取值应为 $[i-1][j-1] + [i-1][j]$</li><li>当 $j&#x3D;0$ 或 $i&#x3D;j$ 时，$[i][j]$ 取值为 $1$</li></ul><p><strong>题解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%&quot;</span> + <span class="number">2</span> * (n - <span class="number">1</span> - i) + <span class="string">&quot;s&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%-4d&quot;</span>, element(i, j));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">element</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">0</span> || i == j) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> element(i - <span class="number">1</span>, j - <span class="number">1</span>) + element(i - <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化1</strong></p><p>是 multiple recursion，因此很多递归调用是重复的，例如</p><ul><li>recursion(3, 1) 分解为<ul><li>recursion(2, 0) + recursion(2, 1)</li></ul></li><li>而 recursion(3, 2) 分解为<ul><li>recursion(2, 1) + recursion(2, 2)</li></ul></li></ul><p>这里 recursion(2, 1) 就重复调用了，事实上它会重复很多次，可以用 static AtomicInteger counter &#x3D; new AtomicInteger(0) 来查看递归函数的调用总次数</p><p>事实上，可以用 <strong>memoization</strong> 来进行优化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] triangle = <span class="keyword">new</span> <span class="title class_">int</span>[n][];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 打印空格</span></span><br><span class="line">        triangle[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%-4d&quot;</span>, element1(triangle, i, j));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">element1</span><span class="params">(<span class="type">int</span>[][] triangle, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (triangle[i][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> triangle[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">0</span> || i == j) &#123;</span><br><span class="line">        triangle[i][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> triangle[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    triangle[i][j] = element1(triangle, i - <span class="number">1</span>, j - <span class="number">1</span>) + element1(triangle, i - <span class="number">1</span>, j);</span><br><span class="line">    <span class="keyword">return</span> triangle[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将数组作为递归函数内可以访问的遍历，如果 $triangle[i][j]$ 已经有值，说明该元素已经被之前的递归函数计算过，就不必重复计算了</li></ul><p><strong>优化2</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] row = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 打印空格</span></span><br><span class="line">        createRow(row, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%-4d&quot;</span>, row[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createRow</span><span class="params">(<span class="type">int</span>[] row, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        row[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">        row[j] = row[j - <span class="number">1</span>] + row[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：还可以通过每一行的前一项计算出下一项，不必借助上一行，这与杨辉三角的另一个特性有关，暂不展开了</p></blockquote><p>力扣对应题目，但递归不适合在力扣刷高分，因此只列出相关题目，不做刷题讲解了</p><ul><li><a href="https://leetcode.cn/problems/pascals-triangle/">118. 杨辉三角 - 力扣（LeetCode）</a></li><li><a href="https://leetcode.cn/problems/pascals-triangle-ii/solution/yang-hui-san-jiao-ii-by-leetcode-solutio-shuk/">119. 杨辉三角 II - 力扣（LeetCode）</a></li></ul><h2 id="3-5-链表"><a href="#3-5-链表" class="headerlink" title="3.5 链表"></a>3.5 链表</h2><h3 id="E01-反转单向链表-力扣-206-题"><a href="#E01-反转单向链表-力扣-206-题" class="headerlink" title="E01. 反转单向链表-力扣 206 题"></a>E01. 反转单向链表-力扣 206 题</h3><p>对应力扣题目 <a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表 - 力扣（LeetCode）</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br><span class="line"></span><br><span class="line">输入：[1,2]</span><br><span class="line">输出：[2,1]</span><br><span class="line"></span><br><span class="line">输入：[]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>方法1</strong></p><p>构造一个新链表，从<strong>旧链表</strong>依次拿到每个节点，创建新节点添加至<strong>新链表</strong>头部，完成后新链表即是倒序的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode o1)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> o1;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        n1 = <span class="keyword">new</span> <span class="title class_">ListNode</span>(p.val, n1);</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评价：简单直白，就是得新创建节点对象</p><p><strong>方法2</strong></p><p>与方法1 类似，构造一个新链表，从<strong>旧链表头部</strong>移除节点，添加到<strong>新链表头部</strong>，完成后新链表即是倒序的，区别在于原题目未提供节点外层的容器类，这里提供一个，另外一个区别是并不去构造新节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">List</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeFirst</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            head = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(ListNode first)</span> &#123;</span><br><span class="line">        first.next = head;</span><br><span class="line">        head = first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">List</span>(head);</span><br><span class="line">    <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">List</span>(<span class="literal">null</span>);</span><br><span class="line">    ListNode first;</span><br><span class="line">    <span class="keyword">while</span> ((first = list1.removeFirst()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        list2.addFirst(first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list2.head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评价：更加面向对象，如果实际写代码而非刷题，更多会这么做</p><p><strong>方法3</strong></p><p>递归，在<strong>归</strong>时让 $5 \rightarrow 4$，$4 \rightarrow 3$ …</p><p>首先，写一个递归方法，返回值用来拿到最后一个节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span> || p.next == <span class="literal">null</span>) &#123; <span class="comment">// 不足两个节点</span></span><br><span class="line">        <span class="keyword">return</span> p; <span class="comment">// 最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(p.next);</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意1：递归终止条件是 curr.next &#x3D;&#x3D; null，目的是到最后一个节点就结束递归，与之前递归遍历不一样</li><li>注意2：需要考虑空链表即 p &#x3D;&#x3D; null 的情况</li></ul><p>可以先测试一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">o5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">5</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">o4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>, o5);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">o3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>, o4);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>, o3);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>, o2);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E01Leetcode206</span>().reverseList(o1);</span><br><span class="line">System.out.println(n1);</span><br></pre></td></tr></table></figure><p>会打印</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[5]</span><br></pre></td></tr></table></figure><p>下面为<strong>伪码</strong>调用过程，假设节点分别是 $1 \rightarrow 2 \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$，先忽略返回值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">2</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">3</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">4</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span> || p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> p; <span class="comment">// 返回5</span></span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">// 此时p是4, p.next是5</span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 此时p是3, p.next是4</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 此时p是2, p.next是3</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 此时p是1, p.next是2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，从 p &#x3D; 4 开始，要让 $5 \rightarrow 4$，$4 \rightarrow 3$ …</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">2</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">3</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">4</span>) &#123;</span><br><span class="line">    reverseList(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span> || p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> p; <span class="comment">// 返回5</span></span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">// 此时p是4, p.next是5, 要让5指向4,代码写成 p.next.next=p</span></span><br><span class="line">                <span class="comment">// 还要注意4要指向 null, 否则就死链了</span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 此时p是3, p.next是4</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 此时p是2, p.next是3</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 此时p是1, p.next是2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终代码为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode p)</span> &#123;    </span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span> || p.next == <span class="literal">null</span>) &#123; <span class="comment">// 不足两个节点</span></span><br><span class="line">        <span class="keyword">return</span> p; <span class="comment">// 最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(p.next);</span><br><span class="line">    p.next.next = p;</span><br><span class="line">    p.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q：为啥不能在<strong>递</strong>的过程中倒序？</p><p>A：比如</p><ul><li>$ 1 \rightarrow 2 \rightarrow 3 $ 如果递的过程中让 $2 \rightarrow 1$ 那么此时 $2 \rightarrow 3$ 就被覆盖，不知道接下来递给谁</li><li>而归的时候让 $3 \rightarrow 2$ 不会影响上一层的 $1 \rightarrow 2$</li></ul><p>评价：单向链表没有 prev 指针，但利用递归的特性【记住了】链表每次调用时相邻两个节点是谁</p><p><strong>方法4</strong></p><p>从链表每次拿到第二个节点，将其从链表断开，插入头部，直至它为 null 结束</p><ol><li>设置指针 o1(旧头)、n1(新头)、o2(旧老二)，分别指向第一，第一，第二节点</li></ol><p>$\frac{n1 \ o1}{1} \rightarrow \frac{o2}{2} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="2"><li>将 o2 节点从链表断开，即 o1 节点指向第三节点</li></ol><p>$ \frac{n1 \ o1}{1} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$ ，$\frac{o2}{2}$</p><ol start="3"><li>o2 节点链入链表头部，即</li></ol><p>$\frac{o2}{2} \rightarrow \frac{n1 \ o1}{1} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="4"><li>n1 指向 o2</li></ol><p>$\frac{n1 \ o2}{2} \rightarrow \frac{o1}{1} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="5"><li>o2 指向 o1 的下一个节点，即</li></ol><p>$\frac{n1}{2} \rightarrow \frac{o1}{1} \rightarrow \frac{o2}{3} \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="6"><li><p>重复以上 $2\sim5$ 步，直到 o2 指向 null</p></li><li><p>还应当考虑边界条件，即链表中不满两个元素时，无需走以上逻辑</p></li></ol><p>参考答案</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode o1)</span> &#123;    </span><br><span class="line">    <span class="keyword">if</span> (o1 == <span class="literal">null</span> || o1.next == <span class="literal">null</span>) &#123; <span class="comment">// 不足两个节点</span></span><br><span class="line">        <span class="keyword">return</span> o1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">o2</span> <span class="operator">=</span> o1.next;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> o1;</span><br><span class="line">    <span class="keyword">while</span> (o2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        o1.next = o2.next; </span><br><span class="line">        o2.next = n1;</span><br><span class="line">        n1 = o2;</span><br><span class="line">        o2 = o1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法5</strong></p><p>要点：把链表分成两部分，思路就是不断从链表2的头，往链表1的头搬移</p><ol><li>n1 指向 null，代表<strong>新链表</strong>一开始没有元素，o1 指向<strong>原链表</strong>的首节点</li></ol><p>$\frac{n1}{null}$，$\frac{o1}{1} \rightarrow 2 \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="2"><li>开始循环，o2 指向<strong>原链表</strong>次节点</li></ol><p>$\frac{n1}{null}$，$\frac{o1}{1} \rightarrow \frac{o2}{2} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="3"><li>搬移</li></ol><p>$\frac{o1}{1} \rightarrow \frac{n1}{null}$  ， $\frac{o2}{2} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="4"><li>指针复位</li></ol><p>$\frac{n1}{1} \rightarrow null$ ， $\frac{o1 \ o2}{2} \rightarrow 3 \rightarrow 4 \rightarrow 5 \rightarrow null$</p><ol start="5"><li>重复 $2\sim4$ 步</li><li>当 o1 &#x3D; null 时退出循环</li></ol><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode o1)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o1 == <span class="literal">null</span> || o1.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> o1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (o1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o2</span> <span class="operator">=</span> o1.next;</span><br><span class="line">        o1.next = n1;</span><br><span class="line">        n1 = o1;</span><br><span class="line">        o1 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评价：本质上与方法2 相同，只是方法2更为面向对象</p><h3 id="E02-根据值删除节点-力扣-203-题"><a href="#E02-根据值删除节点-力扣-203-题" class="headerlink" title="E02. 根据值删除节点-力扣 203 题"></a>E02. 根据值删除节点-力扣 203 题</h3><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,6,3,6], val = 6</span><br><span class="line">输出：[1,2,3]</span><br><span class="line"></span><br><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br><span class="line"></span><br><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>方法1</strong></p><p>图中 s 代表 sentinel 哨兵（如果不加哨兵，则删除第一个节点要特殊处理），例如要删除 6</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1   p2</span><br><span class="line">s -&gt; 1 -&gt; 2 -&gt; 6 -&gt; 3 -&gt; 6 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>如果 p2 不等于目标，则 p1，p2 不断后移</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> p1   p2</span><br><span class="line">s -&gt; 1 -&gt; 2 -&gt; 6 -&gt; 3 -&gt; 6 -&gt; null</span><br><span class="line"></span><br><span class="line">   p1   p2</span><br><span class="line">s -&gt; 1 -&gt; 2 -&gt; 6 -&gt; 3 -&gt; 6 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>p2 &#x3D;&#x3D; 6，删除它，注意 p1 此时保持不变，p2 后移</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   p1   p2</span><br><span class="line">s -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 6 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>p2 不等于目标，则 p1，p2 不断后移</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      p1   p2</span><br><span class="line">s -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 6 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>p2 &#x3D;&#x3D; 6，删除它，注意 p1 此时保持不变，p2 后移</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      p1   p2</span><br><span class="line">s -&gt; 1 -&gt; 2 -&gt; 3 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>p2 &#x3D;&#x3D; null 退出循环</li></ul><p>最后代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">sentinel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> sentinel;</span><br><span class="line">    ListNode p2;</span><br><span class="line">    <span class="keyword">while</span> ((p2 = p1.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p2.val == val) &#123;</span><br><span class="line">            p1.next = p2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sentinel.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2</strong></p><p>思路，递归函数负责返回：从当前节点（我）开始，完成删除的子链表</p><ol><li>若我与 v 相等，应该返回下一个节点递归结果</li><li>若我与 v 不等，应该返回我，但我的 next 应该更新（让我能带上后续删过的子链表）</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">removeElements(ListNode p=<span class="number">1</span>, <span class="type">int</span> v=<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="number">1.</span>next=removeElements(ListNode p=<span class="number">2</span>, <span class="type">int</span> v=<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="number">2.</span>next=removeElements(ListNode p=<span class="number">6</span>, <span class="type">int</span> v=<span class="number">6</span>)&#123;</span><br><span class="line">    removeElements(ListNode p=<span class="number">3</span>, <span class="type">int</span> v=<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="number">3.</span>next=removeElements(ListNode p=<span class="number">6</span>, <span class="type">int</span> v=<span class="number">6</span>)&#123;</span><br><span class="line">    removeElements(ListNode p=<span class="literal">null</span>, <span class="type">int</span> v=<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="comment">// 没有节点,返回</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head.val == val) &#123;</span><br><span class="line">        <span class="keyword">return</span> removeElements(head.next, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E03-删除倒数节点-力扣-19-题"><a href="#E03-删除倒数节点-力扣-19-题" class="headerlink" title="E03.  删除倒数节点-力扣 19 题"></a>E03.  删除倒数节点-力扣 19 题</h3><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br><span class="line"></span><br><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br><span class="line"></span><br><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p>另外题目提示</p><ul><li>链表至少一个节点</li><li>n 只会在合理范围</li></ul><p><strong>方法1</strong></p><p>思路，写一个递归函数，用来返回下一个节点的倒数序号</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">recursion(ListNode p=<span class="number">1</span>, <span class="type">int</span> n=<span class="number">2</span>) &#123;</span><br><span class="line">    recursion(ListNode p=<span class="number">2</span>, <span class="type">int</span> n=<span class="number">2</span>) &#123;</span><br><span class="line">    recursion(ListNode p=<span class="number">3</span>, <span class="type">int</span> n=<span class="number">2</span>) &#123;</span><br><span class="line">    recursion(ListNode p=<span class="number">4</span>, <span class="type">int</span> n=<span class="number">2</span>) &#123;</span><br><span class="line">    recursion(ListNode p=<span class="number">5</span>, <span class="type">int</span> n=<span class="number">2</span>) &#123;</span><br><span class="line">    recursion(ListNode p=<span class="literal">null</span>, <span class="type">int</span> n=<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 最内层序号0</span></span><br><span class="line">&#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 上一次返回值+1</span></span><br><span class="line">&#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">if</span>(返回值 == n == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 删除 next</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但上述代码有一个问题，就是若删除的是第一个节点，它没有上一个节点，因此可以加一个哨兵来解决</p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">sentinel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    recursion(sentinel, n);</span><br><span class="line">    <span class="keyword">return</span> sentinel.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">recursion</span><span class="params">(ListNode p, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nth</span> <span class="operator">=</span> recursion(p.next, n);</span><br><span class="line">    <span class="keyword">if</span> (nth == n) &#123;</span><br><span class="line">        p.next = p.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nth + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Q：p.next.next 不怕空指针吗？</p><p>A：</p><ul><li>p 是待删除节点的上一个节点，如果能递归回到 p，那么 p.next 肯定有值，不会是 null</li><li>且题目说明了 n &gt;&#x3D;1，不会因为 nth &#x3D;&#x3D; 0 而让 p.next 指向最后的 null</li></ul><p><strong>方法2</strong></p><p>快慢指针，p1 指向待删节点的上一个，p2 先走 n + 1 步</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line">p2</span><br><span class="line">s -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">     i=<span class="number">1</span></span><br><span class="line">     p2</span><br><span class="line">s -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">          i=<span class="number">2</span></span><br><span class="line">          p2</span><br><span class="line">s -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">               i=<span class="number">3</span> 从此开始 p1 p2 依次向右平移, 直到 p2 移动到末尾</span><br><span class="line">p1             p2</span><br><span class="line">s -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">               p1             p2</span><br><span class="line">s -&gt; <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">5</span> -&gt; <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> s;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p1.next = p1.next.next;</span><br><span class="line">    <span class="keyword">return</span> s.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法3</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">Composite</span> <span class="variable">c</span> <span class="operator">=</span> recursion(head, n);</span><br><span class="line">    <span class="keyword">return</span> c.node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Composite</span> &#123;</span><br><span class="line">    ListNode node;</span><br><span class="line">    <span class="type">int</span> nth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Composite</span><span class="params">(ListNode node, <span class="type">int</span> nth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.node = node;</span><br><span class="line">        <span class="built_in">this</span>.nth = nth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Composite <span class="title function_">recursion</span><span class="params">(ListNode p, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Composite</span>(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Composite</span> <span class="variable">c</span> <span class="operator">=</span> recursion(p.next, n);</span><br><span class="line">    <span class="keyword">if</span> (c.nth != n) &#123;</span><br><span class="line">        p.next = c.node;</span><br><span class="line">        c.node = p;</span><br><span class="line">    &#125;</span><br><span class="line">    c.nth +=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-有序链表去重-力扣-83-题"><a href="#E04-有序链表去重-力扣-83-题" class="headerlink" title="E04. 有序链表去重-力扣 83 题"></a>E04. 有序链表去重-力扣 83 题</h3><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br><span class="line"></span><br><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p>注意：<strong>重复元素保留一个</strong></p><p><strong>方法1</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1   p2</span><br><span class="line">1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 3 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>p1.val &#x3D;&#x3D; p2.val 那么删除 p2，注意 p1 此时保持不变</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1   p2</span><br><span class="line">1 -&gt; 2 -&gt; 3 -&gt; 3 -&gt; null</span><br></pre></td></tr></table></figure><ul><li>p1.val !&#x3D; p2.val 那么 p1，p2 向后移动</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     p1   p2</span><br><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">3</span> -&gt; <span class="literal">null</span></span><br><span class="line">         </span><br><span class="line">          p1   p2</span><br><span class="line"><span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span> -&gt; <span class="number">3</span> -&gt; <span class="literal">null</span>     </span><br></pre></td></tr></table></figure><ul><li>p1.val &#x3D;&#x3D; p2.val 那么删除 p2</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          p1   p2</span><br><span class="line">1 -&gt; 2 -&gt; 3 -&gt; null   </span><br></pre></td></tr></table></figure><ul><li>当 p2 &#x3D;&#x3D; null 退出循环</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">// 链表节点 &lt; 2</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 链表节点 &gt;= 2</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head;</span><br><span class="line">    ListNode p2;</span><br><span class="line">    <span class="keyword">while</span> ((p2 = p1.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.val == p2.val) &#123;</span><br><span class="line">            p1.next = p2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2</strong></p><p>递归函数负责返回：从当前节点（我）开始，完成去重的链表</p><ol><li>若我与 next 重复，返回 next</li><li>若我与 next 不重复，返回我，但 next 应当更新</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deleteDuplicates(ListNode p=<span class="number">1</span>) &#123;</span><br><span class="line">    deleteDuplicates(ListNode p=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="number">1.</span>next=deleteDuplicates(ListNode p=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="number">2.</span>next=deleteDuplicates(ListNode p=<span class="number">3</span>) &#123;</span><br><span class="line">                deleteDuplicates(ListNode p=<span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// 只剩一个节点，返回</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span> || p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p.val == p.next.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> deleteDuplicates(p.next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.next = deleteDuplicates(p.next);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E05-有序链表去重-力扣-82-题"><a href="#E05-有序链表去重-力扣-82-题" class="headerlink" title="E05. 有序链表去重-力扣 82 题"></a>E05. 有序链表去重-力扣 82 题</h3><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,3,4,4,5]</span><br><span class="line">输出：[1,2,5]</span><br><span class="line"></span><br><span class="line">输入：head = [1,1,1,2,3]</span><br><span class="line">输出：[2,3]</span><br></pre></td></tr></table></figure><p>注意：<strong>重复元素一个不留</strong></p><p><strong>方法1</strong></p><p>递归函数负责返回：从当前节点（我）开始，完成去重的链表</p><ol><li>若我与 next 重复，一直找到下一个不重复的节点，以它的返回结果为准</li><li>若我与 next 不重复，返回我，同时更新 next</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deleteDuplicates(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 找下个不重复的</span></span><br><span class="line">deleteDuplicates(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">        deleteDuplicates(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>) &#123;</span><br><span class="line">deleteDuplicates(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="number">2.</span>next=deleteDuplicates(<span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// 只剩一个节点，返回</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span> || p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.val == p.next.val) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">x</span> <span class="operator">=</span> p.next.next;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x.val == p.val) &#123;</span><br><span class="line">            x = x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deleteDuplicates(x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.next = deleteDuplicates(p.next);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2</strong></p><p>p1 是待删除的上一个节点，每次循环对比 p2、p3 的值</p><ul><li>如果 p2 与 p3 的值重复，那么 p3 继续后移，直到找到与 p2 不重复的节点，p1 指向 p3 完成删除</li><li>如果 p2 与 p3 的值不重复，p1，p2，p3 向后平移一位，继续上面的操作</li><li>p2 或 p3 为 null 退出循环<ul><li>p2 为 null 的情况，比如链表为 1 1 1 null</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1 p2 p3</span><br><span class="line">s, 1, 1, 1, 2, 3, null</span><br><span class="line"></span><br><span class="line">p1 p2    p3</span><br><span class="line">s, 1, 1, 1, 2, 3, null</span><br><span class="line"></span><br><span class="line">p1 p2       p3</span><br><span class="line">s, 1, 1, 1, 2, 3, null</span><br><span class="line"></span><br><span class="line">p1 p3</span><br><span class="line">s, 2, 3, null</span><br><span class="line"></span><br><span class="line">p1 p2 p3</span><br><span class="line">s, 2, 3, null</span><br><span class="line"></span><br><span class="line">   p1 p2 p3</span><br><span class="line">s, 2, 3, null</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> s;</span><br><span class="line">    ListNode p2;</span><br><span class="line">    ListNode p3;</span><br><span class="line">    <span class="keyword">while</span> ((p2 = p1.next) != <span class="literal">null</span> &amp;&amp; (p3 = p2.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p2.val == p3.val) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((p3 = p3.next) != <span class="literal">null</span> </span><br><span class="line">                   &amp;&amp; p3.val == p2.val) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            p1.next = p3;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E06-合并有序链表-力扣-21-题"><a href="#E06-合并有序链表-力扣-21-题" class="headerlink" title="E06. 合并有序链表-力扣 21 题"></a>E06. 合并有序链表-力扣 21 题</h3><p>例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br><span class="line">    </span><br><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br><span class="line"></span><br><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>方法1</strong></p><ul><li>谁小，把谁链给 p，p 和小的都向后平移一位</li><li>当 p1、p2 有一个为 null，退出循环，把不为 null 的链给 p</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1</span><br><span class="line">1389null</span><br><span class="line"></span><br><span class="line">p2</span><br><span class="line">24null</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">snull</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode p1, ListNode p2)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> s;</span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="literal">null</span> &amp;&amp; p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.val &lt; p2.val) &#123;</span><br><span class="line">            p.next = p1;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = p2;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.next = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        p.next = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以自行验证<strong>例</strong>中后两种情况</li></ul><p><strong>方法2</strong></p><p>递归函数应该返回</p><ul><li>更小的那个链表节点，并把它剩余节点与另一个链表再次递归</li><li>返回之前，更新此节点的 next</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mergeTwoLists(p1=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>], p2=[<span class="number">2</span>,<span class="number">4</span>]) &#123;</span><br><span class="line">    <span class="number">1.</span>next=mergeTwoLists(p1=[<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>], p2=[<span class="number">2</span>,<span class="number">4</span>]) &#123;</span><br><span class="line">        <span class="number">2.</span>next=mergeTwoLists(p1=[<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>], p2=[<span class="number">4</span>]) &#123;            </span><br><span class="line">            <span class="number">3.</span>next=mergeTwoLists(p1=[<span class="number">8</span>,<span class="number">9</span>], p2=[<span class="number">4</span>]) &#123;</span><br><span class="line">                <span class="number">4.</span>next=mergeTwoLists(p1=[<span class="number">8</span>,<span class="number">9</span>], p2=<span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> [<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E07-合并多个有序链表-力扣-23-题"><a href="#E07-合并多个有序链表-力扣-23-题" class="headerlink" title="E07. 合并多个有序链表-力扣 23 题"></a>E07. 合并多个有序链表-力扣 23 题</h3><p>例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">输出：[1,1,2,3,4,4,5,6]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><p><strong>方法1</strong></p><p>递归</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> merge(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">split</span><span class="params">(ListNode[] lists, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    System.out.println(i + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">    <span class="keyword">if</span> (j == i) &#123;</span><br><span class="line">        <span class="keyword">return</span> lists[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(</span><br><span class="line">        split(lists, i, m),</span><br><span class="line">        split(lists, m + <span class="number">1</span>, j)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用优先级队列求解，这个放在后面讲</p><h3 id="E08-查找链表中间节点-力扣-876-题"><a href="#E08-查找链表中间节点-力扣-876-题" class="headerlink" title="E08. 查找链表中间节点-力扣 876 题"></a>E08. 查找链表中间节点-力扣 876 题</h3><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3,4,5]</span><br><span class="line">输出：此列表中的结点 3 (序列化形式：[3,4,5])</span><br><span class="line"></span><br><span class="line">输入：[1,2,3,4,5,6]</span><br><span class="line">输出：此列表中的结点 4 (序列化形式：[4,5,6])</span><br></pre></td></tr></table></figure><ul><li><strong>偶数</strong>节点时，中间点是靠右的那个</li></ul><p>解法：快慢指针，快指针一次走两步，慢指针一次走一步，当快指针到链表结尾时，慢指针恰好走到链表的一半</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head;<span class="comment">// 慢指针，中间点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> head;<span class="comment">// 快指针</span></span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="literal">null</span> &amp;&amp; p2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E09-回文链表-力扣-234-题"><a href="#E09-回文链表-力扣-234-题" class="headerlink" title="E09. 回文链表-力扣 234 题"></a>E09. 回文链表-力扣 234 题</h3><p>所谓回文指正着读、反着读，结果一样，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1,2,2,1]</span><br><span class="line">[1,2,3,2,1]</span><br></pre></td></tr></table></figure><p>它们都是回文链表，不是回文的例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1,2,3,1]  --反过来--&gt;  [1,3,2,1]</span><br></pre></td></tr></table></figure><p>解法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    步骤1. 找中间点</span></span><br><span class="line"><span class="comment">    步骤2. 中间点后半个链表反转</span></span><br><span class="line"><span class="comment">    步骤3. 反转后链表与原链表逐一比较</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">middle</span> <span class="operator">=</span> middle(head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverse(middle);</span><br><span class="line">    <span class="keyword">while</span> (newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newHead.val != head.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        newHead = newHead.next;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode o1)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (o1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o2</span> <span class="operator">=</span> o1.next;</span><br><span class="line">        o1.next = n1;</span><br><span class="line">        n1 = o1;</span><br><span class="line">        o1 = o2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ListNode <span class="title function_">middle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head; <span class="comment">// 慢</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> head; <span class="comment">// 快</span></span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="literal">null</span> &amp;&amp; p2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后解法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode h1)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (h1 == <span class="literal">null</span> || h1.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> h1; <span class="comment">// 慢指针，中间点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> h1; <span class="comment">// 快指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">// 新头</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">o1</span> <span class="operator">=</span> h1;<span class="comment">// 旧头</span></span><br><span class="line">    <span class="comment">// 快慢指针找中间点</span></span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="literal">null</span> &amp;&amp; p2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        p2 = p2.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转前半部分</span></span><br><span class="line">        o1.next = n1;</span><br><span class="line">        n1 = o1;</span><br><span class="line">        o1 = p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p2 != <span class="literal">null</span>) &#123; <span class="comment">// 节点数为奇数</span></span><br><span class="line">        p1 = p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同步比较新头和后半部分</span></span><br><span class="line">    <span class="keyword">while</span> (n1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n1.val != p1.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        n1 = n1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E10-环形链表-力扣-141-题"><a href="#E10-环形链表-力扣-141-题" class="headerlink" title="E10. 环形链表-力扣 141 题"></a>E10. 环形链表-力扣 141 题</h3><p>本题以及下题，实际是 Floyd’s Tortoise and Hare Algorithm （Floyd 龟兔赛跑算法）[^15]</p><blockquote><p>除了 Floyd 判环算法外，还有其它的判环算法，详见 <a href="https://en.wikipedia.org/wiki/Cycle_detection">https://en.wikipedia.org/wiki/Cycle_detection</a></p></blockquote><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221229190646563.png" alt="image-20221229190646563" style="zoom: 50%;" /><p>如果链表上存在环，那么在环上以不同速度前进的两个指针必定会在某个时刻相遇。算法分为两个阶段</p><p>阶段1</p><ul><li>龟一次走一步，兔子一次走两步</li><li>当兔子能走到终点时，不存在环</li><li>当兔子能追上龟时，可以判断存在环</li></ul><p>阶段2</p><ul><li>从它们第一次相遇开始，龟回到起点，兔子保持原位不变</li><li>龟和兔子一次都走一步</li><li>当再次相遇时，地点就是环的入口</li></ul><p>为什么呢？</p><ul><li>设起点到入口走 a 步（本例是 7），绕环一圈长度为 b（本例是 5），</li><li>那么<strong>从起点开始，走 a + 绕环 n 圈，都能找到环入口</strong></li><li>第一次相遇时<ul><li>兔走了 a + 绕环 n 圈（本例 2 圈） + k，k 是它们相遇距环入口位置（本例 3，不重要）</li><li>龟走了 a + 绕环 n 圈（本例 0 圈） + k，当然它绕的圈数比兔少</li><li>兔走的距离是龟的两倍，所以<strong>龟走的</strong> &#x3D; 兔走的 - 龟走的 &#x3D; <strong>绕环 n 圈</strong></li></ul></li><li>而前面分析过，如果走 a + 绕环 n 圈，都能找到环入口，因此从相遇点开始，再走 a 步，就是环入口</li></ul><p>阶段1 参考代码（判断是否有环）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">h</span> <span class="operator">=</span> head; <span class="comment">// 兔</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">t</span> <span class="operator">=</span> head; <span class="comment">// 龟</span></span><br><span class="line">    <span class="keyword">while</span> (h != <span class="literal">null</span> &amp;&amp; h.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        t = t.next;</span><br><span class="line">        h = h.next.next;</span><br><span class="line">        <span class="keyword">if</span>(h == t)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E11-环形链表-力扣-142-题"><a href="#E11-环形链表-力扣-142-题" class="headerlink" title="E11. 环形链表-力扣 142 题"></a>E11. 环形链表-力扣 142 题</h3><p>阶段2 参考代码（找到环入口）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">t</span> <span class="operator">=</span> head; <span class="comment">// 龟</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">h</span> <span class="operator">=</span> head; <span class="comment">// 兔</span></span><br><span class="line">    <span class="keyword">while</span> (h != <span class="literal">null</span> &amp;&amp; h.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        t = t.next;</span><br><span class="line">        h = h.next.next;</span><br><span class="line">        <span class="keyword">if</span> (h == t) &#123;</span><br><span class="line">            t = head;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (h == t) &#123;</span><br><span class="line">                    <span class="keyword">return</span> h;</span><br><span class="line">                &#125;</span><br><span class="line">                h = h.next;</span><br><span class="line">                t = t.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还有一道扩展题目，也可以用判环算法思想来解：就是 287 题，寻找重复数</li></ul><h3 id="Ex1-删除节点-力扣-237-题"><a href="#Ex1-删除节点-力扣-237-题" class="headerlink" title="Ex1. 删除节点-力扣 237 题"></a>Ex1. 删除节点-力扣 237 题</h3><p>这道题目比较简单，留给大家自己练习</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [4,5,1,9], node = 5</span><br><span class="line">输出：[4,1,9]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入：head = [4,5,1,9], node = 1</span><br><span class="line">输出：[4,5,9]</span><br></pre></td></tr></table></figure><p>注意：被删除的节点<strong>不是</strong>末尾节点</p><p><strong>参考答案</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex1Leetcode237</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 待删除节点, 题目已说明肯定不是最后一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(ListNode node)</span> &#123;</span><br><span class="line">        node.val = node.next.val;<span class="comment">// 下一个节点值赋值给待&quot;删除&quot;节点</span></span><br><span class="line">        node.next = node.next.next;<span class="comment">// 把下一个节点删除</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">5</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>, o5);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>, o4);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>, o3);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>, o2);</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">E0xLeetcode237</span>().deleteNode(o3);</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br><span class="line">[1,2,4,5]</span><br></pre></td></tr></table></figure><h3 id="Ex2-共尾链表-力扣-160-题"><a href="#Ex2-共尾链表-力扣-160-题" class="headerlink" title="Ex2. 共尾链表-力扣 160 题"></a>Ex2. 共尾链表-力扣 160 题</h3><p>原题叫做<strong>相交</strong>链表，个人觉得用<strong>共尾</strong>链表更形象些，此题更像是一道脑筋急转弯，留给大家练习</p><p>例如，下图的两个链表 [1, 2, 4, 5] 与 [3, 4, 5] 它们中 [4, 5] 是相同的，此时应返回节点 4</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221228081715799.png" alt="image-20221228081715799"></p><p>非共尾的情况，如下图所示，此时返回 null</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20221228082002730.png" alt="image-20221228082002730"></p><p>思路，称两个链表为 a&#x3D;[1, 2, 4, 5]，b&#x3D;[3, 4, 5]，图中用 N 代表 null</p><ol><li>遍历 a，遇到 null 时改道遍历 b</li><li>与此同时，遍历 b，遇到 null 时改道遍历 a</li><li>在此过程中，如果<strong>遇到相同</strong>的节点，即为找寻目标，返回即可，如下图中的第二次出现的 4</li><li>相同节点应该比较其<strong>引用值</strong>，图中数字只是为了便于区分</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1245N345N</span><br><span class="line">345N1245N</span><br></pre></td></tr></table></figure><p>如果两个链表长度相同，则可以更早找到目标，例如 a&#x3D;[1, 4, 5]，b&#x3D;[3, 4, 5]，第一次出现 4 时，即可返回</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">145N345N</span><br><span class="line">345N145N</span><br></pre></td></tr></table></figure><p>如果是非共尾的情况，如 a&#x3D;[1, 2, 4]，b&#x3D;[3, 5]，可以看到，唯一相等的情况，是遍历到最后那个 N 此时退出循环</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">124N35N</span><br><span class="line">35N124N</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode a, ListNode b)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> a;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">            <span class="keyword">return</span> p1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            p1 = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            p2 = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-数组"><a href="#3-6-数组" class="headerlink" title="3.6 数组"></a>3.6 数组</h2><h3 id="E01-合并有序数组"><a href="#E01-合并有序数组" class="headerlink" title="E01. 合并有序数组"></a>E01. 合并有序数组</h3><p>将数组内两个区间内的有序元素合并</p><p>例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 5, 6, 2, 4, 10, 11]</span><br></pre></td></tr></table></figure><p>可以视作两个有序区间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 5, 6] 和 [2, 4, 10, 11]</span><br></pre></td></tr></table></figure><p>合并后，结果仍存储于原有空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 4, 5, 6, 10, 11]</span><br></pre></td></tr></table></figure><p><strong>方法1</strong></p><p>递归</p><ul><li>每次递归把更小的元素复制到结果数组</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">merge(left=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>],right=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">11</span>],a2=[])&#123;</span><br><span class="line">    merge(left=[<span class="number">5</span>,<span class="number">6</span>],right=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">11</span>],a2=[<span class="number">1</span>])&#123;</span><br><span class="line">        merge(left=[<span class="number">5</span>,<span class="number">6</span>],right=[<span class="number">4</span>,<span class="number">10</span>,<span class="number">11</span>],a2=[<span class="number">1</span>,<span class="number">2</span>])&#123;</span><br><span class="line">            merge(left=[<span class="number">5</span>,<span class="number">6</span>],right=[<span class="number">10</span>,<span class="number">11</span>],a2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])&#123;</span><br><span class="line">                merge(left=[<span class="number">6</span>],right=[<span class="number">10</span>,<span class="number">11</span>],a2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>])&#123;</span><br><span class="line">                    merge(left=[],right=[<span class="number">10</span>,<span class="number">11</span>],a2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])&#123;</span><br><span class="line"><span class="comment">// 拷贝10，11</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] a1, <span class="type">int</span> i, <span class="type">int</span> iEnd, <span class="type">int</span> j, <span class="type">int</span> jEnd,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span>[] a2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; iEnd) &#123;</span><br><span class="line">        System.arraycopy(a1, j, a2, k, jEnd - j + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; jEnd) &#123;</span><br><span class="line">        System.arraycopy(a1, i, a2, k, iEnd - i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a1[i] &lt; a1[j]) &#123;</span><br><span class="line">        a2[k] = a1[i];</span><br><span class="line">        merge(a1, i + <span class="number">1</span>, iEnd, j, jEnd, a2, k + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a2[k] = a1[j];</span><br><span class="line">        merge(a1, i, iEnd, j + <span class="number">1</span>, jEnd, a2, k + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a2 = <span class="keyword">new</span> <span class="title class_">int</span>[a1.length];</span><br><span class="line">merge(a1, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, a2, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>方法2</strong></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] a1, <span class="type">int</span> i, <span class="type">int</span> iEnd,</span></span><br><span class="line"><span class="params">                             <span class="type">int</span> j, <span class="type">int</span> jEnd,</span></span><br><span class="line"><span class="params">                             <span class="type">int</span>[] a2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= iEnd &amp;&amp; j &lt;= jEnd) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a1[i] &lt; a1[j]) &#123;</span><br><span class="line">            a2[k] = a1[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a2[k] = a1[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; leftEnd) &#123;</span><br><span class="line">        System.arraycopy(a1, j, a2, k, jEnd - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; rightEnd) &#123;</span><br><span class="line">        System.arraycopy(a1, i, a2, k, iEnd - i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a2 = <span class="keyword">new</span> <span class="title class_">int</span>[a3.length];</span><br><span class="line">merge(a1, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, a2);</span><br></pre></td></tr></table></figure><p>归并排序代码备份</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(<span class="type">int</span>[] a1, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[] a2)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot; j=&quot;</span> + j + <span class="string">&quot; a1=&quot;</span> + Arrays.toString(Arrays.copyOfRange(a1, i, j + <span class="number">1</span>)));</span><br><span class="line">    <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    split(a1, i, m, a2);</span><br><span class="line">    split(a1, m + <span class="number">1</span>, j, a2);</span><br><span class="line">    <span class="comment">//merge(a1, i, m, m+1, j, a2); // 非递归</span></span><br><span class="line">    <span class="comment">//merge(a1, i, m, m + 1, j, a2, i); // 递归</span></span><br><span class="line">    System.arraycopy(a2, i, a1, i, (j - i + <span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot; m=&quot;</span> + m + <span class="string">&quot; j=&quot;</span> + j + <span class="string">&quot; a1=&quot;</span> + Arrays.toString(a1) + <span class="string">&quot; a2=&quot;</span> + Arrays.toString(a2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a2 = <span class="keyword">new</span> <span class="title class_">int</span>[a1.length];</span><br><span class="line">split(a1, <span class="number">0</span>, a1.length - <span class="number">1</span>, a2);</span><br><span class="line">System.out.println(Arrays.toString(a1));</span><br></pre></td></tr></table></figure><h2 id="3-7-队列"><a href="#3-7-队列" class="headerlink" title="3.7 队列"></a>3.7 队列</h2><h3 id="E01-二叉树层序遍历-力扣-102-题"><a href="#E01-二叉树层序遍历-力扣-102-题" class="headerlink" title="E01. 二叉树层序遍历-力扣 102 题"></a>E01. 二叉树层序遍历-力扣 102 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedListQueue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedListQueue</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">// 本层节点个数</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 下层节点个数</span></span><br><span class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c1; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                level.add(node.val);</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                    c2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                    c2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            c1 = c2;</span><br><span class="line">            result.add(level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义队列</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LinkedListQueue</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">            E value;</span><br><span class="line">            Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E value, Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.value = value;</span><br><span class="line">                <span class="built_in">this</span>.next = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;E&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; tail = head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            tail.next = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LinkedListQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LinkedListQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node&lt;E&gt; added = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value, head);</span><br><span class="line">            tail.next = added;</span><br><span class="line">            tail = added;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node&lt;E&gt; first = head.next;</span><br><span class="line">            head.next = first.next;</span><br><span class="line">            <span class="keyword">if</span> (first == tail) &#123;</span><br><span class="line">                tail = head;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> first.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> head.next.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head == tail;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size == capacity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ex1-设计队列-力扣-622-题"><a href="#Ex1-设计队列-力扣-622-题" class="headerlink" title="Ex1. 设计队列-力扣 622 题"></a>Ex1. 设计队列-力扣 622 题</h3><p>由于与课堂例题差别不大，这里只给出参考解答</p><p>基于链表的实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ex1Leetcode622</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        Node next;</span><br><span class="line">        Node(<span class="type">int</span> value, Node next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        tail.next = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ex1Leetcode622</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">added</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value, head);</span><br><span class="line">        tail.next = added;</span><br><span class="line">        tail = added;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = first.next;</span><br><span class="line">        <span class="keyword">if</span> (first == tail) &#123;</span><br><span class="line">            tail = head;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Front</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Rear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tail.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>Leetcode 的实现里 deQueue（出队）返回值是布尔值，并不会返回队头元素</li><li>它期望用法是先用 Front 返回对头元素，再 deQueue 出队</li></ul><h2 id="3-8-栈"><a href="#3-8-栈" class="headerlink" title="3.8 栈"></a>3.8 栈</h2><h3 id="E01-有效的括号-力扣-20-题"><a href="#E01-有效的括号-力扣-20-题" class="headerlink" title="E01. 有效的括号-力扣 20 题"></a>E01. 有效的括号-力扣 20 题</h3><p>一个字符串中可能出现 <code>[]</code> <code>()</code> 和 <code>&#123;&#125;</code> 三种括号，判断该括号是否有效</p><p>有效的例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">()[]&#123;&#125;</span><br><span class="line"></span><br><span class="line">([&#123;&#125;])</span><br><span class="line"></span><br><span class="line">()</span><br></pre></td></tr></table></figure><p>无效的例子</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[)</span><br><span class="line"></span><br><span class="line">([)]</span><br><span class="line"></span><br><span class="line">([]</span><br></pre></td></tr></table></figure><p>思路</p><ul><li>遇到左括号, 把要配对的右括号放入栈顶</li><li>遇到右括号, 若此时栈为空, 返回 false，否则把它与栈顶元素对比<ul><li>若相等, 栈顶元素弹出, 继续对比下一组</li><li>若不等, 无效括号直接返回 false</li></ul></li><li>循环结束<ul><li>若栈为空, 表示所有括号都配上对, 返回 true</li><li>若栈不为空, 表示右没配对的括号, 应返回 false</li></ul></li></ul><p>答案（用到了课堂案例中的 ArrayStack 类）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    ArrayStack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;(s.length() / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; stack.peek() == c) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E02-后缀表达式求值-力扣-120-题"><a href="#E02-后缀表达式求值-力扣-120-题" class="headerlink" title="E02. 后缀表达式求值-力扣 120 题"></a>E02. 后缀表达式求值-力扣 120 题</h3><p>后缀表达式也称为逆波兰表达式，即运算符写在后面</p><ul><li>从左向右进行计算</li><li>不必考虑运算符优先级，即不用包含括号</li></ul><p>示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">即：(2 + 1) * 3</span><br><span class="line"></span><br><span class="line">输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]</span><br><span class="line">输出：6</span><br><span class="line">即：4 + (13 / 5)</span><br></pre></td></tr></table></figure><p>题目假设</p><ul><li>数字都视为整数</li><li>数字和运算符个数给定正确，不会有除零发生</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String t : tokens) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                numbers.push(a + b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                numbers.push(a - b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                numbers.push(a * b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span> -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> numbers.pop();</span><br><span class="line">                numbers.push(a / b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; numbers.push(Integer.parseInt(t));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E03-中缀表达式转后缀"><a href="#E03-中缀表达式转后缀" class="headerlink" title="E03. 中缀表达式转后缀"></a>E03. 中缀表达式转后缀</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E03InfixToSuffix</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        思路</span></span><br><span class="line"><span class="comment">        1. 遇到数字, 拼串</span></span><br><span class="line"><span class="comment">        2. 遇到 + - * /</span></span><br><span class="line"><span class="comment">            - 优先级高于栈顶运算符 入栈</span></span><br><span class="line"><span class="comment">            - 否则将栈中高级或平级运算符出栈拼串, 本运算符入栈</span></span><br><span class="line"><span class="comment">        3. 遍历完成, 栈中剩余运算符出栈拼串</span></span><br><span class="line"><span class="comment">            - 先出栈,意味着优先运算</span></span><br><span class="line"><span class="comment">        4. 带 ()</span></span><br><span class="line"><span class="comment">            - 左括号直接入栈</span></span><br><span class="line"><span class="comment">            - 右括号要将栈中直至左括号为止的运算符出栈拼串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        |   |</span></span><br><span class="line"><span class="comment">        |   |</span></span><br><span class="line"><span class="comment">        |   |</span></span><br><span class="line"><span class="comment">        _____</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        a+b</span></span><br><span class="line"><span class="comment">        a+b-c</span></span><br><span class="line"><span class="comment">        a+b*c</span></span><br><span class="line"><span class="comment">        a*b+c</span></span><br><span class="line"><span class="comment">        (a+b)*c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(infixToSuffix(<span class="string">&quot;a+b&quot;</span>));</span><br><span class="line">        System.out.println(infixToSuffix(<span class="string">&quot;a+b-c&quot;</span>));</span><br><span class="line">        System.out.println(infixToSuffix(<span class="string">&quot;a+b*c&quot;</span>));</span><br><span class="line">        System.out.println(infixToSuffix(<span class="string">&quot;a*b-c&quot;</span>));</span><br><span class="line">        System.out.println(infixToSuffix(<span class="string">&quot;(a+b)*c&quot;</span>));</span><br><span class="line">        System.out.println(infixToSuffix(<span class="string">&quot;a+b*c+(d*e+f)*g&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String <span class="title function_">infixToSuffix</span><span class="params">(String exp)</span> &#123;</span><br><span class="line">        LinkedList&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(exp.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; exp.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> exp.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                        stack.push(c);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (priority(c) &gt; priority(stack.peek())) &#123;</span><br><span class="line">                            stack.push(c);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">while</span> (!stack.isEmpty() </span><br><span class="line">                                   &amp;&amp; priority(stack.peek()) &gt;= priority(c)) &#123;</span><br><span class="line">                                sb.append(stack.pop());</span><br><span class="line">                            &#125;</span><br><span class="line">                            stack.push(c);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span> -&gt; &#123;</span><br><span class="line">                    stack.push(c);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span> -&gt; &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                        sb.append(stack.pop());</span><br><span class="line">                    &#125;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            sb.append(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">priority</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span> -&gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span> -&gt; <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span> -&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;不合法字符:&quot;</span> + c);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-双栈模拟队列-力扣-232-题"><a href="#E04-双栈模拟队列-力扣-232-题" class="headerlink" title="E04. 双栈模拟队列-力扣 232 题"></a>E04. 双栈模拟队列-力扣 232 题</h3><p>给力扣题目用的<strong>自实现</strong>栈，可以定义为静态内部类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> top; <span class="comment">// 栈顶指针</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[top++] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[--top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[top - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考解答，注意：题目已说明</p><ul><li>调用 push、pop 等方法的次数最多 100</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E04Leetcode232</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        队列头      队列尾</span></span><br><span class="line"><span class="comment">        s1       s2</span></span><br><span class="line"><span class="comment">        顶   底   底   顶</span></span><br><span class="line"><span class="comment">                 abc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        push(a)</span></span><br><span class="line"><span class="comment">        push(b)</span></span><br><span class="line"><span class="comment">        push(c)</span></span><br><span class="line"><span class="comment">        pop()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ArrayStack&lt;Integer&gt; s1 = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">    ArrayStack&lt;Integer&gt; s2 = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        s2.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s2.isEmpty()) &#123;</span><br><span class="line">                s1.push(s2.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s2.isEmpty()) &#123;</span><br><span class="line">                s1.push(s2.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s1.isEmpty() &amp;&amp; s2.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E05-单队列模拟栈-力扣-225-题"><a href="#E05-单队列模拟栈-力扣-225-题" class="headerlink" title="E05. 单队列模拟栈-力扣 225 题"></a>E05. 单队列模拟栈-力扣 225 题</h3><p>给力扣题目用的<strong>自实现</strong>队列，可以定义为静态内部类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue3</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> E[] array;</span><br><span class="line">    <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue3</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        c -= <span class="number">1</span>;</span><br><span class="line">        c |= c &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        c |= c &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        c |= c &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        c |= c &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        c |= c &gt;&gt; <span class="number">16</span>;</span><br><span class="line">        c += <span class="number">1</span>;</span><br><span class="line">        array = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[c];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        array[tail &amp; (array.length - <span class="number">1</span>)] = value;</span><br><span class="line">        tail++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> array[head &amp; (array.length - <span class="number">1</span>)];</span><br><span class="line">        head++;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[head &amp; (array.length - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tail - head == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考解答，注意：题目已说明</p><ul><li>调用 push、pop 等方法的次数最多 100</li><li>每次调用 pop 和 top 都能保证栈不为空</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E05Leetcode225</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        队列头     队列尾</span></span><br><span class="line"><span class="comment">        cba</span></span><br><span class="line"><span class="comment">        顶           底</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        queue.offer(a)</span></span><br><span class="line"><span class="comment">        queue.offer(b)</span></span><br><span class="line"><span class="comment">        queue.offer(c)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ArrayQueue3&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayQueue3</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-双端队列"><a href="#3-9-双端队列" class="headerlink" title="3.9 双端队列"></a>3.9 双端队列</h2><h3 id="E01-二叉树-Z-字层序遍历-力扣-103-题"><a href="#E01-二叉树-Z-字层序遍历-力扣-103-题" class="headerlink" title="E01. 二叉树 Z 字层序遍历-力扣 103 题"></a>E01. 二叉树 Z 字层序遍历-力扣 103 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E01Leetcode103</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">zigzagLevelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leftToRight</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            LinkedList&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c1; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">n</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (leftToRight) &#123;</span><br><span class="line">                    deque.offerLast(n.val);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    deque.offerFirst(n.val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (n.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(n.left);</span><br><span class="line">                    c2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (n.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(n.right);</span><br><span class="line">                    c2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            c1 = c2;</span><br><span class="line">            leftToRight = !leftToRight;</span><br><span class="line">            result.add(deque);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TreeNode</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>),</span><br><span class="line">                        <span class="number">2</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>)</span><br><span class="line">                ),</span><br><span class="line">                <span class="number">1</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TreeNode</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>),</span><br><span class="line">                        <span class="number">3</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">7</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> <span class="title class_">E01Leetcode103</span>().zigzagLevelOrder(root);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : lists) &#123;</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ex1-设计双端队列-力扣-641-题"><a href="#Ex1-设计双端队列-力扣-641-题" class="headerlink" title="Ex1. 设计双端队列-力扣 641 题"></a>Ex1. 设计双端队列-力扣 641 题</h3><p>与课堂例题也是差别不大，请参考</p><h2 id="3-10-优先级队列"><a href="#3-10-优先级队列" class="headerlink" title="3.10 优先级队列"></a>3.10 优先级队列</h2><h3 id="E01-合并多个有序链表-力扣-23-题"><a href="#E01-合并多个有序链表-力扣-23-题" class="headerlink" title="E01. 合并多个有序链表-力扣 23 题"></a>E01. 合并多个有序链表-力扣 23 题</h3><p>这道题目之前解答过，现在用刚学的优先级队列来实现一下</p><p>题目中要从小到大排列，因此选择用小顶堆来实现，自定义小顶堆如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinHeap</span> &#123;</span><br><span class="line"></span><br><span class="line">    ListNode[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinHeap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">ListNode</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(ListNode offered)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> size++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (child &gt; <span class="number">0</span> &amp;&amp; offered.val &lt; array[parent].val) &#123;</span><br><span class="line">            array[child] = array[parent];</span><br><span class="line">            child = parent;</span><br><span class="line">            parent = (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        array[child] = offered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(<span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">e</span> <span class="operator">=</span> array[size];</span><br><span class="line">        array[size] = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line"></span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span> parent)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> parent;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; size &amp;&amp; array[left].val &lt; array[min].val) &#123;</span><br><span class="line">            min = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; array[right].val &lt; array[min].val) &#123;</span><br><span class="line">            min = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min != parent) &#123;</span><br><span class="line">            swap(min, parent);</span><br><span class="line">            down(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E01Leetcode23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 使用 jdk 的优先级队列实现</span></span><br><span class="line"><span class="comment">//        PriorityQueue&lt;ListNode&gt; queue = new PriorityQueue&lt;&gt;(Comparator.comparingInt(a -&gt; a.val));</span></span><br><span class="line">        <span class="comment">// 2. 使用自定义小顶堆实现</span></span><br><span class="line">        <span class="type">MinHeap</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinHeap</span>(lists.length);</span><br><span class="line">        <span class="keyword">for</span> (ListNode head : lists) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(head);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> s;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            p.next = node;</span><br><span class="line">            p = node;</span><br><span class="line">            <span class="keyword">if</span> (node.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提问：</p><ul><li>能否将每个链表的所有元素全部加入堆，再一个个从堆顶移除？</li></ul><p>回答：</p><ul><li>可以是可以，但对空间占用就高了，堆的一个优点就是用有限的空间做事情</li></ul><h2 id="3-11-堆"><a href="#3-11-堆" class="headerlink" title="3.11 堆"></a>3.11 堆</h2><h3 id="E01-堆排序"><a href="#E01-堆排序" class="headerlink" title="E01. 堆排序"></a>E01. 堆排序</h3><p>算法描述</p><ol><li>heapify 建立大顶堆</li><li>将堆顶与堆底交换（最大元素被交换到堆底），缩小并下潜调整堆</li><li>重复第二步直至堆里剩一个元素</li></ol><p>可以使用之前课堂例题的大顶堆来实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">MaxHeap</span> <span class="variable">maxHeap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaxHeap</span>(array);</span><br><span class="line">System.out.println(Arrays.toString(maxHeap.array));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (maxHeap.size &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    maxHeap.swap(<span class="number">0</span>, maxHeap.size - <span class="number">1</span>);</span><br><span class="line">    maxHeap.size--;</span><br><span class="line">    maxHeap.down(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(maxHeap.array));</span><br></pre></td></tr></table></figure><h3 id="E02-数组中第K大元素-力扣-215-题"><a href="#E02-数组中第K大元素-力扣-215-题" class="headerlink" title="E02. 数组中第K大元素-力扣 215 题"></a>E02. 数组中第K大元素-力扣 215 题</h3><p>小顶堆（可删去用不到代码）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinHeap</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinHeap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            down(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        swap(<span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> array[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        swap(index, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        down(index);</span><br><span class="line">        <span class="keyword">return</span> array[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(<span class="type">int</span> offered)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == array.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        up(offered);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(<span class="type">int</span> replaced)</span> &#123;</span><br><span class="line">        array[<span class="number">0</span>] = replaced;</span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">up</span><span class="params">(<span class="type">int</span> offered)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> size;</span><br><span class="line">        <span class="keyword">while</span> (child &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (child - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (offered &lt; array[parent]) &#123;</span><br><span class="line">                array[child] = array[parent];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            child = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        array[child] = offered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span> parent)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (parent &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> parent;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; size &amp;&amp; array[left] &lt; array[min]) &#123;</span><br><span class="line">            min = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; array[right] &lt; array[min]) &#123;</span><br><span class="line">            min = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min != parent) &#123;</span><br><span class="line">            swap(min, parent);</span><br><span class="line">            down(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个索引处的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">MinHeap</span> <span class="variable">heap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinHeap</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        heap.offer(numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[i] &gt; heap.peek())&#123;</span><br><span class="line">            heap.replace(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> heap.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>求数组中的第 K 大元素，使用堆并不是最佳选择，可以采用快速选择算法</p></blockquote><h3 id="E03-数据流中第K大元素-力扣-703-题"><a href="#E03-数据流中第K大元素-力扣-703-题" class="headerlink" title="E03. 数据流中第K大元素-力扣 703 题"></a>E03. 数据流中第K大元素-力扣 703 题</h3><p>上题的小顶堆加一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinHeap</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == array.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MinHeap heap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KthLargest</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        heap = <span class="keyword">new</span> <span class="title class_">MinHeap</span>(k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!heap.isFull())&#123;</span><br><span class="line">            heap.offer(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; heap.peek())&#123;</span><br><span class="line">            heap.replace(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heap.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>求数据流中的第 K 大元素，使用堆最合适不过</p></blockquote><h3 id="E04-数据流的中位数-力扣-295-题"><a href="#E04-数据流的中位数-力扣-295-题" class="headerlink" title="E04. 数据流的中位数-力扣 295 题"></a>E04. 数据流的中位数-力扣 295 题</h3><p>可以扩容的 heap, max 用于指定是大顶堆还是小顶堆</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] array;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">boolean</span> max;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Heap</span><span class="params">(<span class="type">int</span> capacity, <span class="type">boolean</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取堆顶元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 堆顶元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除堆顶元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 堆顶元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        swap(<span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定索引处元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被删除元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deleted</span> <span class="operator">=</span> array[index];</span><br><span class="line">        swap(index, size - <span class="number">1</span>);</span><br><span class="line">        size--;</span><br><span class="line">        down(index);</span><br><span class="line">        <span class="keyword">return</span> deleted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换堆顶元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replaced 新元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">(<span class="type">int</span> replaced)</span> &#123;</span><br><span class="line">        array[<span class="number">0</span>] = replaced;</span><br><span class="line">        down(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆的尾部添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offered 新元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(<span class="type">int</span> offered)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == array.length) &#123;</span><br><span class="line">            grow();</span><br><span class="line">        &#125;</span><br><span class="line">        up(offered);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> size + (size &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span>[] newArray = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">        System.arraycopy(array, <span class="number">0</span>,</span><br><span class="line">                newArray, <span class="number">0</span>, size);</span><br><span class="line">        array = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 offered 元素上浮: 直至 offered 小于父元素或到堆顶</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">up</span><span class="params">(<span class="type">int</span> offered)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> size;</span><br><span class="line">        <span class="keyword">while</span> (child &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (child - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">cmp</span> <span class="operator">=</span> max ? offered &gt; array[parent] : offered &lt; array[parent];</span><br><span class="line">            <span class="keyword">if</span> (cmp) &#123;</span><br><span class="line">                array[child] = array[parent];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            child = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        array[child] = offered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Heap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">boolean</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">        <span class="built_in">this</span>.size = array.length;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如何找到最后这个非叶子节点  size / 2 - 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            down(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 parent 索引处的元素下潜: 与两个孩子较大者交换, 直至没孩子或孩子没它大</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span> parent)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> parent;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; size &amp;&amp; (max ? array[left] &gt; array[min] : array[left] &lt; array[min])) &#123;</span><br><span class="line">            min = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; (max ? array[right] &gt; array[min] : array[right] &lt; array[min])) &#123;</span><br><span class="line">            min = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min != parent) &#123; <span class="comment">// 找到了更大的孩子</span></span><br><span class="line">            swap(min, parent);</span><br><span class="line">            down(min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个索引处的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">Heap</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Heap</span>(<span class="number">10</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="type">Heap</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Heap</span>(<span class="number">10</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 为了保证两边数据量的平衡</span></span><br><span class="line"><span class="comment"> &lt;ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;两边数据一样时,加入左边&lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;两边数据不一样时,加入右边&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> 但是, 随便一个数能直接加入吗?</span></span><br><span class="line"><span class="comment"> &lt;ul&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;加入左边前, 应该挑右边最小的加入&lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;加入右边前, 应该挑左边最大的加入&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left.size() == right.size()) &#123;</span><br><span class="line">        right.offer(num);</span><br><span class="line">        left.offer(right.poll());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left.offer(num);</span><br><span class="line">        right.offer(left.poll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;两边数据一致, 左右各取堆顶元素求平均&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> *     &lt;li&gt;左边多一个, 取左边元素&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedian</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left.size() == right.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span> (left.peek() + right.peek()) / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本题还可以使用平衡二叉搜索树求解，不过代码比两个堆复杂</p></blockquote><h2 id="3-12-二叉树"><a href="#3-12-二叉树" class="headerlink" title="3.12 二叉树"></a>3.12 二叉树</h2><h3 id="E04-对称二叉树-力扣-101-题"><a href="#E04-对称二叉树-力扣-101-题" class="headerlink" title="E04. 对称二叉树-力扣 101 题"></a>E04. 对称二叉树-力扣 101 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> check(root.left, root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="comment">// 若同时为 null</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若有一个为 null (有上一轮筛选，另一个肯定不为 null)</span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> || right == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> check(left.left, right.right) &amp;&amp; check(left.right, right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似题目：Leetcode 100 题 - 相同的树</p><h3 id="E05-二叉树最大深度-力扣-104-题"><a href="#E05-二叉树最大深度-力扣-104-题" class="headerlink" title="E05. 二叉树最大深度-力扣 104 题"></a>E05. 二叉树最大深度-力扣 104 题</h3><p><strong>后序遍历求解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">    1. 得到左子树深度, 得到右子树深度, 二者最大者加一, 就是本节点深度</span></span><br><span class="line"><span class="comment">    2. 因为需要先得到左右子树深度, 很显然是后序遍历典型应用</span></span><br><span class="line"><span class="comment">    3. 关于深度的定义：从根出发, 离根最远的节点总边数,</span></span><br><span class="line"><span class="comment">        注意: 力扣里的深度定义要多一</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        深度2         深度3         深度1</span></span><br><span class="line"><span class="comment">        1            1            1</span></span><br><span class="line"><span class="comment">       / \          / \</span></span><br><span class="line"><span class="comment">      2   3        2   3</span></span><br><span class="line"><span class="comment">                        \</span></span><br><span class="line"><span class="comment">                         4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 非力扣题目改为返回 -1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">d1</span> <span class="operator">=</span> maxDepth(node.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> maxDepth(node.right);</span><br><span class="line">    <span class="keyword">return</span> Integer.max(d1, d2) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后序遍历求解-非递归</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">    1. 使用非递归后序遍历, 栈的最大高度即为最大深度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(curr);</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line">            <span class="keyword">if</span> (size &gt; max) &#123;</span><br><span class="line">                max = size;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">peek</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(peek.right == <span class="literal">null</span> || peek.right == pop) &#123;</span><br><span class="line">                pop = stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr = peek.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>层序遍历求解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">    1. 使用层序遍历, 层数即最大深度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        level++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E06-二叉树最小深度-力扣-111-题"><a href="#E06-二叉树最小深度-力扣-111-题" class="headerlink" title="E06. 二叉树最小深度-力扣 111 题"></a>E06. 二叉树最小深度-力扣 111 题</h3><p><strong>后序遍历求解</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">d1</span> <span class="operator">=</span> minDepth(node.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> minDepth(node.right);</span><br><span class="line">    <span class="keyword">if</span> (d1 == <span class="number">0</span> || d2 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> d1 + d2 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Integer.min(d1, d2) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于求最大深度，应当考虑：</p><ul><li>当右子树为 null，应当返回左子树深度加一</li><li>当左子树为 null，应当返回右子树深度加一</li></ul><p>上面两种情况满足时，不应该再把为 null 子树的深度 0 参与最小值比较，例如这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> /</span><br><span class="line">2</span><br></pre></td></tr></table></figure><ul><li>正确深度为 2，若把为 null 的右子树的深度 0 考虑进来，会得到错误结果 1</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  3</span><br><span class="line">   \</span><br><span class="line">    4</span><br></pre></td></tr></table></figure><ul><li>正确深度为 3，若把为 null 的左子树的深度 0 考虑进来，会得到错误结果 1</li></ul><p><strong>层序遍历求解</strong></p><p>遇到的第一个叶子节点所在层就是最小深度</p><p>例如，下面的树遇到的第一个叶子节点 3 所在的层就是最小深度，其他 4，7 等叶子节点深度更深，也更晚遇到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \     </span><br><span class="line">  2   3</span><br><span class="line"> / \</span><br><span class="line">4   5 </span><br><span class="line">   /</span><br><span class="line">  7 </span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        level++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> level;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率会高于之前后序遍历解法，因为找到第一个叶子节点后，就无需后续的层序遍历了</p><h3 id="E07-翻转二叉树-力扣-226-题"><a href="#E07-翻转二叉树-力扣-226-题" class="headerlink" title="E07. 翻转二叉树-力扣 226 题"></a>E07. 翻转二叉树-力扣 226 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    fn(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">t</span> <span class="operator">=</span> node.left;</span><br><span class="line">    node.left = node.right;</span><br><span class="line">    node.right = t;</span><br><span class="line">    fn(node.left);</span><br><span class="line">    fn(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先交换、再递归或是先递归、再交换都可以</p><h3 id="E08-后缀表达式转二叉树"><a href="#E08-后缀表达式转二叉树" class="headerlink" title="E08. 后缀表达式转二叉树"></a>E08. 后缀表达式转二叉树</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String val;</span><br><span class="line">    <span class="keyword">public</span> TreeNode left;</span><br><span class="line">    <span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(String val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(TreeNode left, String val, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    中缀表达式           (2-1)*3</span></span><br><span class="line"><span class="comment">    后缀（逆波兰）表达式   21-3*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1.遇到数字入栈</span></span><br><span class="line"><span class="comment">    2.遇到运算符, 出栈两次, 与当前节点建立父子关系, 当前节点入栈</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    栈</span></span><br><span class="line"><span class="comment">    |   |</span></span><br><span class="line"><span class="comment">    |   |</span></span><br><span class="line"><span class="comment">    |   |</span></span><br><span class="line"><span class="comment">    _____</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    表达式树</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">       / \</span></span><br><span class="line"><span class="comment">      -   3</span></span><br><span class="line"><span class="comment">     / \</span></span><br><span class="line"><span class="comment">    2   1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    21-3*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructExpressionTree</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String t : tokens) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (t) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span> -&gt; &#123; <span class="comment">// 运算符</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(t);</span><br><span class="line">                parent.left = left;</span><br><span class="line">                parent.right = right;</span><br><span class="line">                stack.push(parent);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123; <span class="comment">// 数字</span></span><br><span class="line">                stack.push(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(t));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E09-根据前序与中序遍历结果构造二叉树-力扣-105-题"><a href="#E09-根据前序与中序遍历结果构造二叉树-力扣-105-题" class="headerlink" title="E09. 根据前序与中序遍历结果构造二叉树-力扣 105 题"></a>E09. 根据前序与中序遍历结果构造二叉树-力扣 105 题</h3><ul><li>先通过前序遍历结果定位根节点</li><li>再结合中序遍历结果切分左右子树</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E09Leetcode105</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        preOrder = &#123;1,2,4,3,6,7&#125;</span></span><br><span class="line"><span class="comment">        inOrder = &#123;4,2,1,6,3,7&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        根 1</span></span><br><span class="line"><span class="comment">            pre         in</span></span><br><span class="line"><span class="comment">        左  2,4         4,2</span></span><br><span class="line"><span class="comment">        右  3,6,7       6,3,7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        根 2</span></span><br><span class="line"><span class="comment">        左 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        根 3</span></span><br><span class="line"><span class="comment">        左 6</span></span><br><span class="line"><span class="comment">        右 7</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preOrder, <span class="type">int</span>[] inOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (preOrder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> preOrder[<span class="number">0</span>];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">        <span class="comment">// 区分左右子树</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inOrder[i] == rootValue) &#123;</span><br><span class="line">                <span class="comment">// 0 ~ i-1 左子树</span></span><br><span class="line">                <span class="comment">// i+1 ~ inOrder.length -1 右子树</span></span><br><span class="line">                <span class="type">int</span>[] inLeft = Arrays.copyOfRange(inOrder, <span class="number">0</span>, i); <span class="comment">// [4,2]</span></span><br><span class="line">                <span class="type">int</span>[] inRight = Arrays.copyOfRange(inOrder, i + <span class="number">1</span>, inOrder.length); <span class="comment">// [6,3,7]</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span>[] preLeft = Arrays.copyOfRange(preOrder, <span class="number">1</span>, i + <span class="number">1</span>); <span class="comment">// [2,4]</span></span><br><span class="line">                <span class="type">int</span>[] preRight = Arrays.copyOfRange(preOrder, i + <span class="number">1</span>, inOrder.length); <span class="comment">// [3,6,7]</span></span><br><span class="line"></span><br><span class="line">                root.left = buildTree(preLeft, inLeft); <span class="comment">// 2</span></span><br><span class="line">                root.right = buildTree(preRight, inRight); <span class="comment">// 3</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码可以进一步优化，涉及新数据结构，以后实现</li></ul><h3 id="E10-根据中序与后序遍历结果构造二叉树-力扣-106-题"><a href="#E10-根据中序与后序遍历结果构造二叉树-力扣-106-题" class="headerlink" title="E10. 根据中序与后序遍历结果构造二叉树-力扣 106 题"></a>E10. 根据中序与后序遍历结果构造二叉树-力扣 106 题</h3><ul><li>先通过后序遍历结果定位根节点</li><li>再结合中序遍历结果切分左右子树</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inOrder, <span class="type">int</span>[] postOrder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inOrder.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> postOrder[postOrder.length - <span class="number">1</span>];</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">    <span class="comment">// 切分左右子树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inOrder[i] == rootValue) &#123;</span><br><span class="line">            <span class="type">int</span>[] inLeft = Arrays.copyOfRange(inOrder, <span class="number">0</span>, i);</span><br><span class="line">            <span class="type">int</span>[] inRight = Arrays.copyOfRange(inOrder, i + <span class="number">1</span>, inOrder.length);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span>[] postLeft = Arrays.copyOfRange(postOrder, <span class="number">0</span>, i);</span><br><span class="line">            <span class="type">int</span>[] postRight = Arrays.copyOfRange(postOrder, i, postOrder.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            root.left = buildTree(inLeft, postLeft);</span><br><span class="line">            root.right = buildTree(inRight, postRight);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码可以进一步优化，涉及新数据结构，以后实现</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[^1]: <a href="https://www.merriam-webster.com/dictionary/algorithm">“Definition of ALGORITHM”</a>. <em>Merriam-Webster Online Dictionary</em>. <a href="https://web.archive.org/web/20200214074446/https://www.merriam-webster.com/dictionary/algorithm">Archived</a> from the original on February 14, 2020. Retrieved November 14, 2019.<br>[^2]: Introduction to Algorithm 中文译作《算法导论》<br>[^3]: 主要参考文档 <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">https://en.wikipedia.org/wiki/Binary_search_algorithm</a><br>[^4]: 图片及概念均摘自 Introduction to Algorithm 4th，3.1节，3.2 节<br>[^5]: 图片引用自 wikipedia linkedlist 条目，<a href="https://en.wikipedia.org/wiki/Linked_list">https://en.wikipedia.org/wiki/Linked_list</a></p><p>[^6]: 也称为 Pascal’s triangle <a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle">https://en.wikipedia.org/wiki/Pascal%27s_triangle</a></p><p>[^7]: <a href="https://zhuanlan.zhihu.com/p/257214075">递归求解斐波那契数列的时间复杂度——几种简洁证明 - 知乎 (zhihu.com)</a><br>[^8]: Fibonacci 介绍：<a href="https://en.wikipedia.org/wiki/Fibonacci_number">https://en.wikipedia.org/wiki/Fibonacci_number</a><br>[^9]: <a href="https://zhuanlan.zhihu.com/p/165877869">几种计算Fibonacci数列算法的时间复杂度比较 - 知乎 (zhihu.com)</a><br>[^10]: 几种斐波那契数列算法比较 <a href="https://www.nayuki.io/page/fast-fibonacci-algorithms">Fast Fibonacci algorithms (nayuki.io)</a></p><p>[^11]: 我知道的有 C++，Scala<br>[^12]: jdk 版本有关，64 位 jdk，按 8 字节对齐<br>[^13]: 汉诺塔图片资料均来自 <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi">https://en.wikipedia.org/wiki/Tower_of_Hanoi</a><br>[^14]: 与主定理类似的还有 Akra–Bazzi method，<a href="https://en.wikipedia.org/wiki/Akra%E2%80%93Bazzi_method">https://en.wikipedia.org/wiki/Akra%E2%80%93Bazzi_method</a></p><p>[^15]: 龟兔赛跑动画来自于 <a href="https://onestepcode.com/floyd-hare-tortoise-algorithm-demo/">Floyd’s Hare and Tortoise Algorithm Demo - One Step! Code (onestepcode.com)</a></p><p>[^16]: Josephus problem 主要参考 <a href="https://en.wikipedia.org/wiki/Josephus_problem">https://en.wikipedia.org/wiki/Josephus_problem</a></p><h2 id="落选题目"><a href="#落选题目" class="headerlink" title="落选题目"></a>落选题目</h2><h3 id="反转字符数组"><a href="#反转字符数组" class="headerlink" title="反转字符数组"></a>反转字符数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] array = <span class="string">&quot;abcde&quot;</span>.toCharArray();</span><br><span class="line">    recursion(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">recursion</span><span class="params">(<span class="type">char</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(array, i, j);</span><br><span class="line">    recursion(array, ++i, --j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> array[i];</span><br><span class="line">    array[i] = array[j];</span><br><span class="line">    array[j] = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一次交换的是 array[0] 和 array[4]</li><li>第二次交换的是 array[1] 和 array[3]</li><li>第三次 i &#x3D; j &#x3D; 2，开始返回</li><li>如果 array.length 是偶数，则会在 i &gt; j 时返回</li></ul><h2 id="力扣高评价题目列表"><a href="#力扣高评价题目列表" class="headerlink" title="力扣高评价题目列表"></a>力扣高评价题目列表</h2><p>引用自 <a href="https://zhuanlan.zhihu.com/p/449686402">面试最常考的 100 道算法题分类整理！ - 知乎 (zhihu.com)</a></p><blockquote><p>带 ✔️ 是本课程讲解过的</p></blockquote><ul><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/two-sum/">1. Two Sum (两数之和)</a></strong>, Easy, 11757 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/add-two-numbers/">2. Add Two Numbers (两数相加)</a></strong>, Medium, 6524 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. Longest Substring Without Repeating Characters (无重复字符的最长子串)</a></strong>, Medium, 5845 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">4. Median of Two Sorted Arrays (寻找两个正序数组的中位数)</a></strong>, Hard, 4303 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring (最长回文子串)</a></strong>, Medium, 3896 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/3sum/">15. 3Sum (三数之和)</a></strong>, Medium, 3582 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/maximum-subarray/">53. Maximum Subarray (最大子序和)</a></strong>, Easy, 3533 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/reverse-integer/">7. Reverse Integer (整数反转)</a></strong>, Easy, 2970 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/container-with-most-water/">11. Container With Most Water (盛最多水的容器)</a></strong>, Medium, 2659 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/trapping-rain-water/">42. Trapping Rain Water (接雨水)</a></strong>, Hard, 2552 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/valid-parentheses/">20. Valid Parentheses (有效的括号)</a></strong>, Easy, 2544 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/regular-expression-matching/">10. Regular Expression Matching (正则表达式匹配)</a></strong>, Hard, 2273 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. Remove Duplicates from Sorted Array (删除有序数组中的重复项)</a></strong>, Easy, 2146 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/single-number/">136. Single Number (只出现一次的数字)</a></strong>, Easy, 1958 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/generate-parentheses/">22. Generate Parentheses (括号生成)</a></strong>, Medium, 1946 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/reverse-linked-list/">206. Reverse Linked List (反转链表)</a></strong>, Easy, 1886 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. Merge Two Sorted Lists (合并两个有序链表)</a></strong>, Easy, 1832 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/climbing-stairs/">70. Climbing Stairs (爬楼梯)</a></strong>, Easy, 1791 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/longest-increasing-subsequence/">300. Longest Increasing Subsequence (最长递增子序列)</a></strong>, Medium, 1773 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock (买卖股票的最佳时机)</a></strong>, Easy, 1766 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/edit-distance/">72. Edit Distance (编辑距离)</a></strong>, Hard, 1743 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/longest-common-prefix/">14. Longest Common Prefix (最长公共前缀)</a></strong>, Easy, 1707 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/house-robber/">198. House Robber (打家劫舍)</a></strong>, Medium, 1585 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/palindrome-number/">9. Palindrome Number (回文数)</a></strong>, Easy, 1568 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/lru-cache/">146. LRU Cache (LRU 缓存机制)</a></strong>, Medium, 1544 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. Remove Nth Node From End of List (删除链表的倒数第 N 个结点)</a></strong>, Medium, 1494 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33. Search in Rotated Sorted Array (搜索旋转排序数组)</a></strong>, Medium, 1493 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/permutations/">46. Permutations (全排列)</a></strong>, Medium, 1484 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/symmetric-tree/">101. Symmetric Tree (对称二叉树)</a></strong>, Easy, 1483 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">84. Largest Rectangle in Histogram (柱状图中最大的矩形)</a></strong>, Hard, 1472 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/combination-sum/">39. Combination Sum (组合总和)</a></strong>, Medium, 1466 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/roman-to-integer/">13. Roman to Integer (罗马数字转整数)</a></strong>, Easy, 1436 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/merge-k-sorted-lists/">23. Merge k Sorted Lists (合并K个升序链表)</a></strong>, Hard, 1436 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. Letter Combinations of a Phone Number (电话号码的字母组合)</a></strong>, Medium, 1436 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/coin-change/">322. Coin Change (零钱兑换)</a></strong>, Medium, 1414 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/longest-valid-parentheses/">32. Longest Valid Parentheses (最长有效括号)</a></strong>, Hard, 1400 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/find-the-duplicate-number/">287. Find the Duplicate Number (寻找重复数)</a></strong>, Medium, 1325 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">122. Best Time to Buy and Sell Stock II (买卖股票的最佳时机 II)</a></strong>, Easy, 1306 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. Intersection of Two Linked Lists (相交链表)</a></strong>, Easy, 1302 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/jump-game/">55. Jump Game (跳跃游戏)</a></strong>, Medium, 1292 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/minimum-window-substring/">76. Minimum Window Substring (最小覆盖子串)</a></strong>, Hard, 1280 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/number-of-islands/">200. Number of Islands (岛屿数量)</a></strong>, Medium, 1270 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/subsets/">78. Subsets (子集)</a></strong>, Medium, 1269 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/next-permutation/">31. Next Permutation (下一个排列)</a></strong>, Medium, 1260 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/unique-binary-search-trees/">96. Unique Binary Search Trees (不同的二叉搜索树)</a></strong>, Medium, 1257 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/sort-list/">148. Sort List (排序链表)</a></strong>, Medium, 1248 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. Lowest Common Ancestor of a Binary Tree (二叉树的最近公共祖先)</a></strong>, Medium, 1238 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. Reverse Nodes in k-Group (K 个一组翻转链表)</a></strong>, Hard, 1230 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/zigzag-conversion/">6. ZigZag Conversion (Z 字形变换)</a></strong>, Medium, 1226 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/maximum-product-subarray/">152. Maximum Product Subarray (乘积最大子数组)</a></strong>, Medium, 1223 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. Kth Largest Element in an Array (数组中的第K个最大元素)</a></strong>, Medium, 1211 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/string-to-integer-atoi/">8. String to Integer (atoi) (字符串转换整数 (atoi))</a></strong>, Medium, 1168 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/first-missing-positive/">41. First Missing Positive (缺失的第一个正数)</a></strong>, Hard, 1163 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/move-zeroes/">283. Move Zeroes (移动零)</a></strong>, Easy, 1162 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/linked-list-cycle/">141. Linked List Cycle (环形链表)</a></strong>, Easy, 1161 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/validate-binary-search-tree/">98. Validate Binary Search Tree (验证二叉搜索树)</a></strong>, Medium, 1156 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">124. Binary Tree Maximum Path Sum (二叉树中的最大路径和)</a></strong>, Hard, 1152 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. Construct Binary Tree from Preorder and Inorder Traversal (从前序与中序遍历序列构造二叉树)</a></strong>, Medium, 1149 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. Find First and Last Position of Element in Sorted Array (在排序数组中查找元素的第一个和最后一个位置)</a></strong>, Medium, 1137 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/sliding-window-maximum/">239. Sliding Window Maximum (滑动窗口最大值)</a></strong>, Hard, 1114 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. Linked List Cycle II (环形链表 II)</a></strong>, Medium, 1097 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/word-break/">139. Word Break (单词拆分)</a></strong>, Medium, 1097 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/jump-game-ii/">45. Jump Game II (跳跃游戏 II)</a></strong>, Medium, 1094 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/majority-element/">169. Majority Element (多数元素)</a></strong>, Easy, 1089 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/palindrome-linked-list/">234. Palindrome Linked List (回文链表)</a></strong>, Easy, 1072 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/unique-paths/">62. Unique Paths (不同路径)</a></strong>, Medium, 1072 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/rotate-array/">189. Rotate Array (旋转数组)</a></strong>, Medium, 1057 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. Binary Tree Inorder Traversal (二叉树的中序遍历)</a></strong>, Easy, 1052 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/merge-intervals/">56. Merge Intervals (合并区间)</a></strong>, Medium, 1051 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/merge-sorted-array/">88. Merge Sorted Array (合并两个有序数组)</a></strong>, Easy, 1041 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/subarray-sum-equals-k/">560. Subarray Sum Equals K (和为K的子数组)</a></strong>, Medium, 1036 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/perfect-squares/">279. Perfect Squares (完全平方数)</a></strong>, Medium, 1035 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/search-insert-position/">35. Search Insert Position (搜索插入位置)</a></strong>, Easy, 1005 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. Swap Nodes in Pairs (两两交换链表中的节点)</a></strong>, Medium, 996 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/maximal-rectangle/">85. Maximal Rectangle (最大矩形)</a></strong>, Hard, 983 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/implement-strstr/">28. Implement strStr() (实现 strStr())</a></strong>, Easy, 982 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. Reverse Linked List II (反转链表 II)</a></strong>, Medium, 980 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/min-stack/">155. Min Stack (最小栈)</a></strong>, Easy, 979 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/word-search/">79. Word Search (单词搜索)</a></strong>, Medium, 979 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/remove-element/">27. Remove Element (移除元素)</a></strong>, Easy, 967 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/n-queens/">51. N-Queens (N 皇后)</a></strong>, Hard, 965 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/sort-colors/">75. Sort Colors (颜色分类)</a></strong>, Medium, 961 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. Binary Tree Level Order Traversal (二叉树的层序遍历)</a></strong>, Medium, 960 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/rotate-image/">48. Rotate Image (旋转图像)</a></strong>, Medium, 960 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/unique-binary-search-trees-ii/">95. Unique Binary Search Trees II (不同的二叉搜索树 II)</a></strong>, Medium, 955 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/minimum-path-sum/">64. Minimum Path Sum (最小路径和)</a></strong>, Medium, 954 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/queue-reconstruction-by-height/">406. Queue Reconstruction by Height (根据身高重建队列)</a></strong>, Medium, 947 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/invert-binary-tree/">226. Invert Binary Tree (翻转二叉树)</a></strong>, Easy, 941 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/path-sum-iii/">437. Path Sum III (路径总和 III)</a></strong>, Medium, 937 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. Maximum Depth of Binary Tree (二叉树的最大深度)</a></strong>, Easy, 937 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/delete-node-in-a-linked-list/">237. Delete Node in a Linked List (删除链表中的节点)</a></strong>, Easy, 936 likes ✔️</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/house-robber-iii/">337. House Robber III (打家劫舍 III)</a></strong>, Medium, 929 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/4sum/">18. 4Sum (四数之和)</a></strong>, Medium, 918 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/decode-ways/">91. Decode Ways (解码方法)</a></strong>, Medium, 904 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/course-schedule/">207. Course Schedule (课程表)</a></strong>, Medium, 897 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/sudoku-solver/">37. Sudoku Solver (解数独)</a></strong>, Hard, 897 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/combine-two-tables/">175. Combine Two Tables (组合两个表)</a></strong>, Easy, 891 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum (分割等和子集)</a></strong>, Medium, 886 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/product-of-array-except-self/">238. Product of Array Except Self (除自身以外数组的乘积)</a></strong>, Medium, 885 likes</li><li><strong><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">114. Flatten Binary Tree to Linked List (二叉树展开为链表)</a></strong>, Medium, 877 likes ✔️</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.HTML和CSS</title>
      <link href="/posts/e8bb4d48/"/>
      <url>/posts/e8bb4d48/</url>
      
        <content type="html"><![CDATA[<p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230722213120050.png" alt="image-20230722213120050"></p><h1 id="HTML和CSS"><a href="#HTML和CSS" class="headerlink" title="HTML和CSS"></a>HTML和CSS</h1><h2 id="1-你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么"><a href="#1-你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么" class="headerlink" title="1.你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?"></a>1.你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么?</h2><p>IE: trident内核<br>Firefox：gecko内核<br>Safari:webkit内核<br>Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核<br>Chrome:Blink(基于webkit，Google与Opera Software共同开发)</p><h2 id="2-每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"><a href="#2-每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？" class="headerlink" title="2.每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"></a>2.每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</h2><!DOCTYPE><p> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）</p><h2 id="3-Quirks模式是什么？它和Standards模式有什么区别"><a href="#3-Quirks模式是什么？它和Standards模式有什么区别" class="headerlink" title="3.Quirks模式是什么？它和Standards模式有什么区别"></a>3.Quirks模式是什么？它和Standards模式有什么区别</h2><p>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度。<br>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了，因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？<br>在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时。遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能。IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定 如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式。这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。<br>区别：<br>总体会有布局、样式解析和脚本执行三个方面的区别。<br>盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在Quirks 模式下，IE的宽度和高度还包含了padding和border。</p><p>设置行内元素的高宽：在Standards模式下，给<span>等行内元素设置wdith和height都不会生效，而在quirks模式下，则会生效。<br>设置百分比的高度：在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用margin:0 auto设置水平居中：使用margin:0 auto在standards模式下可以使元素水平居中，但在quirks模式下却会失效。<br>（还有很多，答出什么不重要，关键是看他答出的这些是不是自己经验遇到的，还是说都是看文章看的，甚至完全不知道。）</p><h2 id="4-div-css的布局较table布局有什么优点？"><a href="#4-div-css的布局较table布局有什么优点？" class="headerlink" title="4.div+css的布局较table布局有什么优点？"></a>4.div+css的布局较table布局有什么优点？</h2><p>改版的时候更方便 只要改css文件。<br>页面加载速度更快、结构化清晰、页面显示简洁。<br>表现与结构相分离。<br>易于优化（seo）搜索引擎更友好，排名更容易靠前。</p><h2 id="5-img的alt与title有何异同？-strong与em的异同？"><a href="#5-img的alt与title有何异同？-strong与em的异同？" class="headerlink" title="5.img的alt与title有何异同？ strong与em的异同？"></a>5.img的alt与title有何异同？ strong与em的异同？</h2><p>a:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字。替换文字的语言由lang属性指定。(在IE浏览器下会在没有title时把alt当成 tool tip显示)<br>title(tool tip):该属性为设置该属性的元素提供建议性的信息。<br>strong:粗体强调标签，强调，表示内容的重要性<br>em:斜体强调标签，更强烈强调，表示内容的强调点</p><h2 id="6-你能描述一下渐进增强和优雅降级之间的不同吗"><a href="#6-你能描述一下渐进增强和优雅降级之间的不同吗" class="headerlink" title="6.你能描述一下渐进增强和优雅降级之间的不同吗?"></a>6.你能描述一下渐进增强和优雅降级之间的不同吗?</h2><p>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<br>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。<br>“优雅降级”观点<br>“优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。<br>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。<br>“渐进增强”观点<br>“渐进增强”观点则认为应关注于内容本身。<br>内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。<br>那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</p><h2 id="7-为什么利用多个域名来存储网站资源会更有效？"><a href="#7-为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="7.为什么利用多个域名来存储网站资源会更有效？"></a>7.为什么利用多个域名来存储网站资源会更有效？</h2><p>CDN缓存更方便<br>突破浏览器并发限制<br>节约cookie带宽<br>节约主域名的连接数，优化页面响应速度<br>防止不必要的安全问题</p><h2 id="8-请谈一下你对网页标准和标准制定机构重要性的理解。"><a href="#8-请谈一下你对网页标准和标准制定机构重要性的理解。" class="headerlink" title="8.请谈一下你对网页标准和标准制定机构重要性的理解。"></a>8.请谈一下你对网页标准和标准制定机构重要性的理解。</h2><p>网页标准和标准制定机构都是为了能让web发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。</p><h2 id="9-请描述一下cookies，sessionStorage和localStorage的区别？"><a href="#9-请描述一下cookies，sessionStorage和localStorage的区别？" class="headerlink" title="9.请描述一下cookies，sessionStorage和localStorage的区别？"></a>9.请描述一下cookies，sessionStorage和localStorage的区别？</h2><p>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。<br>web storage和cookie的区别<br>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p><h2 id="10-简述一下src与href的区别。"><a href="#10-简述一下src与href的区别。" class="headerlink" title="10.简述一下src与href的区别。"></a>10.简述一下src与href的区别。</h2><p>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。<br>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。</p><script src =”js.js”></script><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。<br>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加</p><link href="common.css" rel="stylesheet"/>那么浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式。<h2 id="11-知道的网页制作会用到的图片格式有哪些？"><a href="#11-知道的网页制作会用到的图片格式有哪些？" class="headerlink" title="11.知道的网页制作会用到的图片格式有哪些？"></a>11.知道的网页制作会用到的图片格式有哪些？</h2><p>png-8，png-24，jpeg，gif，svg。<br>但是上面的那些都不是面试官想要的最后答案。面试官希望听到是Webp。（是否有关注新技术，新鲜事物）<br>科普一下Webp：WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2&#x2F;3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay等知名网站已经开始测试并使用WebP格式。<br>在质量相同的情况下，WebP格式图像的体积要比JPEG格式图像小40%</p><h2 id="12-知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？"><a href="#12-知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？" class="headerlink" title="12.知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？"></a>12.知道什么是微格式吗？谈谈理解。在前端构建中应该考虑微格式吗？</h2><p>微格式（Microformats）是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准。是为特殊应用而制定的特殊格式。<br>优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。（应用范例：豆瓣，有兴趣自行google）</p><h2 id="13-在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#13-在css-js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="13.在css&#x2F;js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a>13.在css&#x2F;js代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h2><p>答案：dns缓存，cdn缓存，浏览器缓存，服务器缓存。</p><h2 id="14-一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"><a href="#14-一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。" class="headerlink" title="14.一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。"></a>14.一个页面上有大量的图片（大型电商网站），加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。</h2><p>图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。<br>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。<br>如果图片为css图片，可以使用CSSsprite，SVGsprite，Iconfont、Base64等技术。<br>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。<br>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</p><h2 id="15-你如何理解HTML结构的语义化？"><a href="#15-你如何理解HTML结构的语义化？" class="headerlink" title="15.你如何理解HTML结构的语义化？"></a>15.你如何理解HTML结构的语义化？</h2><p>去掉或样式丢失的时候能让页面呈现清晰的结构：<br>html本身是没有表现的，我们看到例如<h1>是粗体，字体大小2em，加粗；<strong>是加粗的，不要认为这是html的表现，这些其实html默认的css样式在起作用，所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的HTML结构的优点，但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的HTML结构是不可分割的。<br>屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页.<br>例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.<br>PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）<br>使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.<br>语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.<br>搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重<br>过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.<br>你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.<br>因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多“钩钩”来应用页面的样式与行为.<br>SEO主要还是靠你网站的内容和外部链接的。<br>便于团队开发和维护<br>W3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。</p><h2 id="16-谈谈以前端角度出发做好SEO需要考虑什么？"><a href="#16-谈谈以前端角度出发做好SEO需要考虑什么？" class="headerlink" title="16.谈谈以前端角度出发做好SEO需要考虑什么？"></a>16.谈谈以前端角度出发做好SEO需要考虑什么？</h2><p>了解搜索引擎如何抓取网页和如何索引网页<br>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。<br>Meta标签优化<br>主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。<br>如何选取关键词并在网页中放置关键词<br>搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词（一般在5个上下），然后针对这些关键词进行优化，包括关键词密度（Density），相关度（Relavancy），突出性（Prominency）等等。<br>了解主要的搜索引擎<br>虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。<br>主要的互联网目录<br>Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。<br>按点击付费的搜索引擎<br>搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击。<br>搜索引擎登录<br>网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是（至少到目前为止）最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场。<br>链接交换和链接广泛度（Link Popularity）<br>网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名。<br>合理的标签使用</p><h2 id="17-有哪项方式可以对一个DOM设置它的CSS样式？"><a href="#17-有哪项方式可以对一个DOM设置它的CSS样式？" class="headerlink" title="17.有哪项方式可以对一个DOM设置它的CSS样式？"></a>17.有哪项方式可以对一个DOM设置它的CSS样式？</h2><p>外部样式表，引入一个外部css文件<br>内部样式表，将css代码放在 <head> 标签内部<br>内联样式，将css样式直接定义在 HTML 元素内部</p><h2 id="18-CSS都有哪些选择器？"><a href="#18-CSS都有哪些选择器？" class="headerlink" title="18.CSS都有哪些选择器？"></a>18.CSS都有哪些选择器？</h2><p>派生选择器（用HTML标签申明）<br>id选择器（用DOM的ID申明）<br>类选择器（用一个样式类名申明）<br>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）<br>除了前3种基本选择器，还有一些扩展选择器，包括<br>后代选择器（利用空格间隔，比如div .a{  }）<br>群组选择器（利用逗号间隔，比如p,div,#a{  }）<br>那么问题来了，CSS选择器的优先级是怎么样定义的？<br>基本原则：<br>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。<br>复杂的计算方法：<br>用1表示派生选择器的优先级<br>用10表示类选择器的优先级<br>用100标示ID选择器的优先级<br>div.test1 .span var 优先级 1+10 +10 +1<br>span#xxx .songs li 优先级1+100 + 10 + 1<br>#xxx li 优先级 100 +1<br>那么问题来了，看下列代码，<p>标签内的文字是什么颜色的？</p><style>.classA{ color:blue;}.classB{ color:red;}</style><body><p class='classB classA'> 123 </p></body>答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<p class=’classB classA’>中的先后关系无关。<h2 id="19-CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"><a href="#19-CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？" class="headerlink" title="19.CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"></a>19.CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</h2><p>最基本的：<br>设置display属性为none，或者设置visibility属性为hidden<br>技巧性：<br>设置宽高为0，设置透明度为0，设置z-index位置在-1000em</p><h2 id="20-超链接访问过后hover样式就不出现的问题是什么？如何解决？"><a href="#20-超链接访问过后hover样式就不出现的问题是什么？如何解决？" class="headerlink" title="20.超链接访问过后hover样式就不出现的问题是什么？如何解决？"></a>20.超链接访问过后hover样式就不出现的问题是什么？如何解决？</h2><p>答案：被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A（link,visited,hover,active）</p><h2 id="21-什么是Css-Hack？ie6-7-8的hack分别是什么？"><a href="#21-什么是Css-Hack？ie6-7-8的hack分别是什么？" class="headerlink" title="21.什么是Css Hack？ie6,7,8的hack分别是什么？"></a>21.什么是Css Hack？ie6,7,8的hack分别是什么？</h2><p>答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。<br>示例如下：<br>#test{<br>        width:300px;<br>        height:300px;<br>        background-color:blue;      &#x2F;<em>firefox</em>&#x2F;<br>        background-color:red\9;      &#x2F;<em>all ie</em>&#x2F;<br>        background-color:yellow;    &#x2F;<em>ie8</em>&#x2F;<br>        +background-color:pink;        &#x2F;<em>ie7</em>&#x2F;<br>        _background-color:orange;       &#x2F;<em>ie6</em>&#x2F;    }<br>        :root #test { background-color:purple\9; }  &#x2F;<em>ie9</em>&#x2F;<br>@media all and (min-width:0px)<br>{ #test {background-color:black;} }  &#x2F;<em>opera</em>&#x2F;<br>@media screen and (-webkit-min-device-pixel-ratio:0)<br>{ #test {background-color:gray;} }       &#x2F;<em>chrome and safari</em>&#x2F;</p><h2 id="22-行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"><a href="#22-行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？" class="headerlink" title="22.行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"></a>22.行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？</h2><p>块级元素(block)特性：<br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br>内联元素(inline)特性：<br>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的top&#x2F;bottom(padding-top&#x2F;padding-bottom)和外边距的top&#x2F;bottom(margin-top&#x2F;margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<br>答案：<input> 、<img> 、<button> 、<texterea> 、<label>。</p><h2 id="23-什么是外边距重叠？重叠的结果是什么？"><a href="#23-什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="23.什么是外边距重叠？重叠的结果是什么？"></a>23.什么是外边距重叠？重叠的结果是什么？</h2><p>外边距重叠就是margin-collapse。<br>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。<br>折叠结果遵循下列计算规则：<br>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。</p><h2 id="24-rgba-和opacity的透明效果有什么不同？"><a href="#24-rgba-和opacity的透明效果有什么不同？" class="headerlink" title="24.rgba()和opacity的透明效果有什么不同？"></a>24.rgba()和opacity的透明效果有什么不同？</h2><p>rgba()和opacity都能实现透明效果，但最大的不同是opacity作用于元素，以及元素内的所有内容的透明度，<br>而rgba()只作用于元素的颜色或其背景色。（设置rgba透明的元素的子元素不会继承透明效果！）</p><h2 id="25-css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"><a href="#25-css中可以让文字在垂直和水平方向上重叠的两个属性是什么？" class="headerlink" title="25.css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"></a>25.css中可以让文字在垂直和水平方向上重叠的两个属性是什么？</h2><p>垂直方向：line-height<br>水平方向：letter-spacing<br>那么问题来了，关于letter-spacing的妙用知道有哪些么？<br>答案:可以用于消除inline-block元素间的换行符空格间隙问题。</p><h2 id="26-如何垂直居中一个浮动元素？"><a href="#26-如何垂直居中一个浮动元素？" class="headerlink" title="26.如何垂直居中一个浮动元素？"></a>26.如何垂直居中一个浮动元素？</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 方法一：已知元素的高宽</span><br><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#6699FF</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;        //父元素需要相对定位</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:-<span class="number">100px</span> ;   //二分之一的<span class="attribute">height</span>，<span class="attribute">width</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">//方法二:未知元素的高宽</span><br><span class="line"> </span><br><span class="line">  #div1&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#6699FF</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">    <span class="attribute">position</span>: absolute;        //父元素需要相对定位</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">那么问题来了，如何垂直居中一个&lt;<span class="selector-tag">img</span>&gt;?（用更简便的方法。）</span><br><span class="line"><span class="selector-id">#container</span>     //&lt;<span class="selector-tag">img</span>&gt;的容器设置如下</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27-px和em的区别。"><a href="#27-px和em的区别。" class="headerlink" title="27.px和em的区别。"></a>27.px和em的区别。</h2><p>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。<br>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em&#x3D;16px。那么12px&#x3D;0.75em, 10px&#x3D;0.625em。</p><h2 id="28-描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？"><a href="#28-描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？" class="headerlink" title="28.描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？"></a>28.描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？</h2><p>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br>你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。</p><h2 id="29-Sass、LESS是什么？大家为什么要使用他们？"><a href="#29-Sass、LESS是什么？大家为什么要使用他们？" class="headerlink" title="29.Sass、LESS是什么？大家为什么要使用他们？"></a>29.Sass、LESS是什么？大家为什么要使用他们？</h2><p>他们是CSS预处理器。他是CSS上的一种抽象层。他们是一种特殊的语法&#x2F;语言编译成CSS。<br>例如Less是一种动态样式语言. 将CSS赋予了动态语言的特性，如变量，继承，运算， 函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。<br>为什么要使用它们？<br>结构清晰，便于扩展。<br>可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。<br>可以轻松实现多重继承。<br>完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</p><h2 id="30-display-none与visibility-hidden的区别是什么？"><a href="#30-display-none与visibility-hidden的区别是什么？" class="headerlink" title="30.display:none与visibility:hidden的区别是什么？"></a>30.display:none与visibility:hidden的区别是什么？</h2><p>display : 隐藏对应的元素但不挤占该元素原来的空间。<br>visibility: 隐藏对应的元素并且挤占该元素原来的空间。<br>即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在。</p><h2 id="31-CSS中link和-import的区别是："><a href="#31-CSS中link和-import的区别是：" class="headerlink" title="31.CSS中link和@import的区别是："></a>31.CSS中link和@import的区别是：</h2><p>Link属于html标签，而@import是CSS中提供的<br>在页面加载的时候，link会同时被加载，而@import引用的CSS会在页面加载完成后才会加载引用的CSS<br>@import只有在ie5以上才可以被识别，而link是html标签，不存在浏览器兼容性问题<br>Link引入样式的权重大于@import的引用（@import是将引用的样式导入到当前的页面中）</p><h2 id="32-简介盒子模型："><a href="#32-简介盒子模型：" class="headerlink" title="32.简介盒子模型："></a>32.简介盒子模型：</h2><p>CSS的盒子模型有两种：IE盒子模型、标准的W3C盒子模型模型<br>盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框</p><h2 id="33-为什么要初始化样式？"><a href="#33-为什么要初始化样式？" class="headerlink" title="33.为什么要初始化样式？"></a>33.为什么要初始化样式？</h2><p>由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异<br>但是初始化CSS会对搜索引擎优化造成小影响</p><h2 id="34-BFC是什么"><a href="#34-BFC是什么" class="headerlink" title="34.BFC是什么?"></a>34.BFC是什么?</h2><p>BFC（块级格式化上下文），一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题<br>BFC是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用</p><h2 id="35-html语义化是什么？"><a href="#35-html语义化是什么？" class="headerlink" title="35.html语义化是什么？"></a>35.html语义化是什么？</h2><p>当页面样式加载失败的时候能够让页面呈现出清晰的结构<br>有利于seo优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）<br>便于项目的开发及维护，使html代码更具有可读性，便于其他设备解析。</p><h2 id="36-Doctype的作用？严格模式与混杂模式的区别？"><a href="#36-Doctype的作用？严格模式与混杂模式的区别？" class="headerlink" title="36.Doctype的作用？严格模式与混杂模式的区别？"></a>36.Doctype的作用？严格模式与混杂模式的区别？</h2><!DOCTYPE><p>用于告知浏览器该以何种模式来渲染文档<br>严格模式下：页面排版及JS解析是以该浏览器支持的最高标准来执行<br>混杂模式：不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容</p><h2 id="37-IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。"><a href="#37-IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。" class="headerlink" title="37.IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。"></a>37.IE的双边距BUG：块级元素float后设置横向margin，ie6显示的margin比设置的较大。</h2><p>解决：加入_display：inline</p><h2 id="38-HTML与XHTML——二者有什么区别？"><a href="#38-HTML与XHTML——二者有什么区别？" class="headerlink" title="38.HTML与XHTML——二者有什么区别？"></a>38.HTML与XHTML——二者有什么区别？</h2><ol><li>所有的标记都必须要有一个相应的结束标记</li><li>所有标签的元素和属性的名字都必须使用小写</li><li>所有的 XML 标记都必须合理嵌套</li><li>所有的属性必须用引号 “” 括起来</li><li>把所有 &lt; 和 &amp; 特殊符号用编码表示</li><li>给所有属性赋一个值</li><li>不要在注释内容中使用 “–”</li><li>图片必须有说明文字</li></ol><h2 id="39-html常见兼容性问题？"><a href="#39-html常见兼容性问题？" class="headerlink" title="39.html常见兼容性问题？"></a>39.html常见兼容性问题？</h2><p>1.双边距BUG float引起的  使用display<br>2.3像素问题 使用float引起的 使用dislpay:inline -3px<br>3.超链接hover 点击后失效  使用正确的书写顺序 link visited hover active<br>4.Ie z-index问题 给父级添加position:relative<br>5.Png 透明 使用js代码 改<br>6.Min-height 最小高度 ！Important 解决’<br>7.select 在ie6下遮盖 使用iframe嵌套<br>8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）<br>9.IE5-8不支持opacity，解决办法：<br>.opacity {<br>opacity: 0.4<br>filter: alpha(opacity&#x3D;60); &#x2F;* for IE5-7 <em>&#x2F;<br>-ms-filter: “progid:DXImageTransform.Microsoft.Alpha(Opacity&#x3D;60)”; &#x2F;</em> for IE 8*&#x2F;<br>}<br>10.IE6不支持PNG透明背景，解决办法: IE6下使用gif图片</p><h2 id="40-对WEB标准以及W3C的理解与认识"><a href="#40-对WEB标准以及W3C的理解与认识" class="headerlink" title="40.对WEB标准以及W3C的理解与认识"></a>40.对WEB标准以及W3C的理解与认识</h2><p>答：标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性。</p><h2 id="41-行内元素有哪些-块级元素有哪些-CSS的盒模型"><a href="#41-行内元素有哪些-块级元素有哪些-CSS的盒模型" class="headerlink" title="41.行内元素有哪些?块级元素有哪些?CSS的盒模型?"></a>41.行内元素有哪些?块级元素有哪些?CSS的盒模型?</h2><p>答：块级元素：div p h1 h2 h3 h4 form ul<br>行内元素: a b br i span input select<br>Css盒模型:内容，border ,margin，padding</p><h2 id="42-前端页面有哪三层构成，分别是什么-作用是什么"><a href="#42-前端页面有哪三层构成，分别是什么-作用是什么" class="headerlink" title="42.前端页面有哪三层构成，分别是什么?作用是什么?"></a>42.前端页面有哪三层构成，分别是什么?作用是什么?</h2><p>答：结构层 Html 表示层 CSS 行为层 js。</p><h2 id="43-Doctype作用-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义"><a href="#43-Doctype作用-严格模式与混杂模式-如何触发这两种模式，区分它们有何意义" class="headerlink" title="43.Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?"></a>43.Doctype作用? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?</h2><pre><code>（1）、&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 &lt;html&gt; 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。 （2）、严格模式的排版和 JS 运作模式是  以该浏览器支持的最高标准运行。（3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。（4）、DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</code></pre><h2 id="44-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？"><a href="#44-行内元素有哪些？块级元素有哪些？-空-void-元素有那些？" class="headerlink" title="44.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？"></a>44.行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h2><p>（1）CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认display属性值为“block”，成为“块级”元素；span默认display属性值为“inline”，是“行内”元素。<br>（2）行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p<br>（3）知名的空元素：<br><br><hr><img><input><link><meta>鲜为人知的是： <area><base><col><command><br><embed><keygen><param><source><track><wbr></p><h2 id="45-CSS的盒子模型？"><a href="#45-CSS的盒子模型？" class="headerlink" title="45.CSS的盒子模型？"></a>45.CSS的盒子模型？</h2><p>（1）两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading;<br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).</p><h2 id="46-CSS-选择符有哪些？哪些属性可以继承？优先级算法如何计算？-CSS3新增伪类有那些？"><a href="#46-CSS-选择符有哪些？哪些属性可以继承？优先级算法如何计算？-CSS3新增伪类有那些？" class="headerlink" title="46.CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？"></a>46.CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</h2><pre><code>*   1.id选择器（ # myid）    2.类选择器（.myclassname）    3.标签选择器（div, h1, p）    4.相邻选择器（h1 + p）    5.子选择器（ul &lt; li）    6.后代选择器（li a）    7.通配符选择器（ * ）    8.属性选择器（a[rel = &quot;external&quot;]）    9.伪类选择器（a: hover, li: nth - child）*   可继承： font-size font-family color, UL LI DL DD DT;*   不可继承 ：border padding margin width height ;*   优先级就近原则，样式定义最近者为准;*   载入样式以最后载入的定位为准;</code></pre><p>优先级为:<br>!important &gt;  id &gt; class &gt; tag<br>important 比 内联优先级高<br>CSS3新增伪类举例：<br>p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。<br>p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。<br>p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。<br>p:only-child    选择属于其父元素的唯一子元素的每个 <p> 元素。<br>p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。<br>:enabled、:disabled 控制表单控件的禁用状态。<br>:checked，单选框或复选框被选中。</p><h2 id="47-如何居中div-如何居中一个浮动元素"><a href="#47-如何居中div-如何居中一个浮动元素" class="headerlink" title="47.如何居中div,如何居中一个浮动元素?"></a>47.如何居中div,如何居中一个浮动元素?</h2><p>给div设置一个宽度，然后添加margin:0 auto属性<br>div{<br>width:200px;<br>margin:0 auto;<br>}<br>居中一个浮动元素<br>确定容器的宽高 宽500 高 300 的层<br>设置层的外边距<br>.div {<br>Width:500px ; height:300px;&#x2F;&#x2F;高度可以不设<br>Margin: -150px 0 0 -250px;<br>position:relative;相对定位<br>background-color:pink;&#x2F;&#x2F;方便看效果<br>left:50%;<br>top:50%;<br>}</p><h2 id="48-浏览器的内核分别是什么-经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？"><a href="#48-浏览器的内核分别是什么-经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？" class="headerlink" title="48.浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？"></a>48.浏览器的内核分别是什么?经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</h2><pre><code>* IE浏览器的内核Trident、 Mozilla的Gecko、google的WebKit、Opera内核Presto；* png24为的图片在iE6浏览器上出现背景，解决方案是做成PNG8.* 浏览器默认的margin和padding不同。解决方案是加一个全局的*&#123;margin:0;padding:0;&#125;来统一。* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。   浮动ie产生的双倍距离 #box&#123; float:left; width:10px; margin:0 0 0 100px;&#125;  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)  渐进识别的方式，从总体中逐渐排除局部。   首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。   接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。  css      .bb&#123;       background-color:#f1ee18;/*所有识别*/      .background-color:#00deff\9; /*IE6、7、8识别*/      +background-color:#a200ff;/*IE6、7识别*/      _background-color:#1e0bd1;/*IE6识别*/      &#125; *  IE下,可以使用获取常规属性的方法来获取自定义属性,   也可以使用getAttribute()获取自定义属性;   Firefox下,只能使用getAttribute()获取自定义属性.    解决方法:统一通过getAttribute()获取自定义属性.*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.* （条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。* Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:L-V-H-A :  a:link &#123;&#125; a:visited &#123;&#125; a:hover &#123;&#125; a:active &#123;&#125;</code></pre><h2 id="49-列出display的值，说明他们的作用。position的值，-relative和absolute定位原点是？"><a href="#49-列出display的值，说明他们的作用。position的值，-relative和absolute定位原点是？" class="headerlink" title="49.列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？"></a>49.列出display的值，说明他们的作用。position的值， relative和absolute定位原点是？</h2><pre><code>1. block 象块类型元素一样显示。   none 缺省值。向行内元素类型一样显示。     inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。     list-item 象块类型元素一样显示，并添加样式列表标记。2. position的值   *absolute     生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。      *fixed （老IE不支持）    生成绝对定位的元素，相对于浏览器窗口进行定位。 </code></pre><ul><li>relative<br>生成相对定位的元素，相对于其正常位置进行定位。</li><li>static  默认值。没有定位，元素出现在正常的流中<br>*（忽略 top, bottom, left, right z-index 声明）。</li><li>inherit 规定从父元素继承 position 属性的值。</li></ul><h2 id="50-absolute的containing-block计算方式跟正常流有什么不同？"><a href="#50-absolute的containing-block计算方式跟正常流有什么不同？" class="headerlink" title="50.absolute的containing block计算方式跟正常流有什么不同？"></a>50.absolute的containing block计算方式跟正常流有什么不同？</h2><p>lock-level boxes<br>一个 block-level element (‘display’ 属性值为 ‘block’, ‘list-item’ 或是 ‘table’) 会生成一个 block-level box，这样的盒子会参与到 block-formatting context (一种布局的方式) 中。<br>block formatting context<br>在这种布局方式下，盒子们自所在的 containing block 顶部起一个接一个垂直排列，水平方向上撑满整个宽度 (除非内部的盒子自己内部建立了新的 BFC)。<br>containing block<br>一般来说，盒子本身就为其子孙建立了 containing block，用来计算内部盒子的位置、大小，而对内部的盒子，具体采用哪个 containing block 来计算，需要分情况来讨论：</p><p>若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；<br>否则则由这个祖先元素的 padding box 构成。<br>根元素所在的 containing block 被称为 initial containing block，在我们常用的浏览器环境下，指的是原点与 canvas 重合，大小和 viewport 相同的矩形；<br>对于 position 为 static 或 relative 的元素，其 containing block 为祖先元素中最近的 block container box 的 content box (除 margin, border, padding 外的区域)；<br>对于 position:fixed 的元素，其 containing block 由 viewport 建立；<br>对于 position:absolute 的元素，则是先找到其祖先元素中最近的 position 属性非 static 的元素，然后判断：<br>如果都找不到，则为 initial containing block。</p><h2 id="51-对WEB标准以及W3C的理解与认识"><a href="#51-对WEB标准以及W3C的理解与认识" class="headerlink" title="51.对WEB标准以及W3C的理解与认识"></a>51.对WEB标准以及W3C的理解与认识</h2><p>标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；</p><h2 id="52-css的基本语句构成是"><a href="#52-css的基本语句构成是" class="headerlink" title="52.css的基本语句构成是?"></a>52.css的基本语句构成是?</h2><p>选择器{属性1:值1;属性2:值2;……}</p><h2 id="53-浏览器标准模式和怪异模式之间的区别是什么"><a href="#53-浏览器标准模式和怪异模式之间的区别是什么" class="headerlink" title="53.浏览器标准模式和怪异模式之间的区别是什么?"></a>53.浏览器标准模式和怪异模式之间的区别是什么?</h2><p>盒子模型 渲染模式的不同<br>使用 window.top.document.compatMode 可显示为什么模式</p><h2 id="54-CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"><a href="#54-CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？" class="headerlink" title="54.CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？"></a>54.CSS中可以通过哪些属性定义，使得一个DOM元素不显示在浏览器可视范围内？</h2><p>最基本的：<br>设置display属性为none，或者设置visibility属性为hidden<br>技巧性：<br>设置宽高为0，设置透明度为0，设置z-index位置在-1000</p><h2 id="55-行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"><a href="#55-行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？" class="headerlink" title="55.行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？"></a>55.行内元素和块级元素的具体区别是什么？行内元素的padding和margin可设置吗？</h2><p>块级元素(block)特性：<br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br>内联元素(inline)特性：<br>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的top&#x2F;bottom(padding-top&#x2F;padding-bottom)和外边距的top&#x2F;bottom(margin-top&#x2F;margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小。<br>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<br>答案：<input> 、<img> 、<button> 、<textarea> 、<label></p><h2 id="56-什么是外边距重叠？重叠的结果是什么？"><a href="#56-什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="56.什么是外边距重叠？重叠的结果是什么？"></a>56.什么是外边距重叠？重叠的结果是什么？</h2><p>答案：<br>外边距重叠就是margin-collapse。<br>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。<br>折叠结果遵循下列计算规则：</p><ol><li>   两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</li><li>   两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</li><li>   两个外边距一正一负时，折叠结果是两者的相加的和。</li></ol><h2 id="57-说display属性有哪些？可以做什么？"><a href="#57-说display属性有哪些？可以做什么？" class="headerlink" title="57.说display属性有哪些？可以做什么？"></a>57.说display属性有哪些？可以做什么？</h2><p>display:block行内元素转换为块级元素<br>display:inline块级元素转换为行内元素<br>display:inline-block转为内联元素</p><h2 id="58、描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？"><a href="#58、描述一个”reset”的CSS文件并如何使用它。知道normalize-css吗？你了解他们的不同之处？" class="headerlink" title="58、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？"></a>58、描述一个”reset”的CSS文件并如何使用它。知道normalize.css吗？你了解他们的不同之处？</h2><p>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br>你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致。</p><h2 id="58-哪些css属性可以继承？"><a href="#58-哪些css属性可以继承？" class="headerlink" title="58.哪些css属性可以继承？"></a>58.哪些css属性可以继承？</h2><p>可继承： font-size font-family color, ul li dl dd dt;<br>不可继承 ：border padding margin width height ;</p><h2 id="59-css优先级算法如何计算？"><a href="#59-css优先级算法如何计算？" class="headerlink" title="59.css优先级算法如何计算？"></a>59.css优先级算法如何计算？</h2><p>!important &gt;  id &gt; class &gt; 标签<br>!important 比 内联优先级高<br>*优先级就近原则，样式定义最近者为准;<br>*以最后载入的样式为准;</p><h2 id="60-b标签和strong标签-i标签和em标签的区别？"><a href="#60-b标签和strong标签-i标签和em标签的区别？" class="headerlink" title="60.b标签和strong标签,i标签和em标签的区别？"></a>60.b标签和strong标签,i标签和em标签的区别？</h2><p>后者有语义，前者则无。</p><h2 id="61-有那些行内元素、有哪些块级元素、盒模型？"><a href="#61-有那些行内元素、有哪些块级元素、盒模型？" class="headerlink" title="61.有那些行内元素、有哪些块级元素、盒模型？"></a>61.有那些行内元素、有哪些块级元素、盒模型？</h2><ul><li>1.内联元素(inline element)<br>a – 锚点<br>abbr – 缩写<br>acronym – 首字<br>b – 粗体(不推荐)<br>big – 大字体<br>br – 换行<br>em – 强调<br>font – 字体设定(不推荐)<br>i – 斜体<br>img – 图片<br>input – 输入框<br>label – 表格标签<br>s – 中划线(不推荐)<br>select – 项目选择<br>small – 小字体文本<br>span – 常用内联容器，定义文本内区块<br>strike – 中划线<br>strong – 粗体强调<br>sub – 下标<br>sup – 上标<br>textarea – 多行文本输入框<br>tt – 电传文本<br>u – 下划线<br>var – 定义变量</li><li>2、块级元素<br>address – 地址<br>blockquote – 块引用<br>center – 举中对齐块<br>dir – 目录列表<br>div – 常用块级容易，也是css layout的主要标签<br>dl – 定义列表<br>fieldset – form控制组<br>form – 交互表单<br>h1 – 大标题<br>h2 – 副标题<br>h3 – 3级标题<br>h4 – 4级标题<br>h5 – 5级标题<br>h6 – 6级标题<br>hr – 水平分隔线<br>isindex – input prompt<br>menu – 菜单列表<br>noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）<br>noscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）<br>ol – 排序表单<br>p – 段落<br>pre – 格式化文本<br>table – 表格<br>ul – 非排序列表</li><li>3.CSS盒子模型包含四个部分组成：<br>内容、填充（padding）、边框（border）、外边界（margin）。</li></ul><h2 id="62-有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？"><a href="#62-有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？" class="headerlink" title="62.有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？"></a>62.有哪些选择符，优先级的计算公式是什么？行内样式和！important哪个优先级高？</h2><pre><code> #ID &gt; .class &gt; 标签选择符  !important优先级高</code></pre><h2 id="63-我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？"><a href="#63-我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？" class="headerlink" title="63.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？"></a>63.我想让行内元素跟上面的元素距离10px，加margin-top和padding-top可以吗？</h2><p>margin-top,padding-top无效</p><h2 id="64-CSS的盒模型由什么组成？"><a href="#64-CSS的盒模型由什么组成？" class="headerlink" title="64.CSS的盒模型由什么组成？"></a>64.CSS的盒模型由什么组成？</h2><p>内容，border ,margin，padding</p><h2 id="65-说说display属性有哪些？可以做什么？"><a href="#65-说说display属性有哪些？可以做什么？" class="headerlink" title="65.说说display属性有哪些？可以做什么？"></a>65.说说display属性有哪些？可以做什么？</h2><p>display:block行内元素转换为块级元素<br>display:inline块级元素转换为行内元素<br>display:inline-block转为内联元素</p><h2 id="66-哪些css属性可以继承？"><a href="#66-哪些css属性可以继承？" class="headerlink" title="66.哪些css属性可以继承？"></a>66.哪些css属性可以继承？</h2><p>可继承： font-size font-family color, ul li dl dd dt;<br>不可继承 ：border padding margin width height ;</p><h2 id="67-css优先级算法如何计算？"><a href="#67-css优先级算法如何计算？" class="headerlink" title="67.css优先级算法如何计算？"></a>67.css优先级算法如何计算？</h2><p>!important &gt;  id &gt; class &gt; 标签<br>!important 比 内联优先级高</p><ul><li>优先级就近原则，样式定义最近者为准;</li><li>以最后载入的样式为准;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序言</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>序言</p><p>欢迎来到我的博客！在这个快速发展的数字时代，技术成为推动社会进步和创新的关键力量。作为一个对技术充满热情的人，我创建了这个博客网站，旨在与大家分享我的知识和经验，特别是在前端、后端和GIS等技术领域。</p><p>我相信技术的力量可以改变世界，而这个博客是我为了将这种信念传递给更多人而建立的。在这里，我将探索各种前沿技术、最佳实践和创新思维，希望能够激发你的灵感，并帮助你在技术的海洋中航行。</p><p>在前端方面，我将分享关于HTML、CSS和JavaScript等技术的最新趋势和最佳实践。你将了解到如何构建漂亮、响应式和交互式的用户界面，以及如何优化网站的性能和用户体验。</p><p>对于后端开发，我将深入探讨各种编程语言和框架，如Python、Java和Node.js等，以及数据库设计和API开发。你将学习到如何构建强大的后端系统，实现数据存储、处理和传输，以及如何设计可扩展和高性能的应用程序。</p><p>另外，我对地理信息系统（GIS）也有浓厚的兴趣。GIS技术结合了地理数据和信息系统，可以用于地图制作、空间分析和位置智能等领域。我将分享GIS的基础知识、工具和应用案例，帮助你了解如何利用地理空间数据解决现实世界的问题。</p><p>通过这个博客网站，我希望能够建立一个技术交流和学习的社区。我鼓励读者们积极参与讨论，提出问题和分享自己的见解。只有通过不断的学习和合作，我们才能够共同成长，并推动技术的进步。</p><p>最后，感谢你的光临！我希望我的博客能为你提供有价值的内容，激发你的创造力和求知欲。如果你对任何技术相关的话题感兴趣，或者有任何问题和建议，都请留言给我。让我们一起踏上这个技术之旅，共同探索无限可能！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>绪论与深度学习概述</title>
      <link href="/posts/63e551d2/"/>
      <url>/posts/63e551d2/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论与深度学习概述"><a href="#绪论与深度学习概述" class="headerlink" title="绪论与深度学习概述"></a>绪论与深度学习概述</h1><h2 id="1-起源与发展"><a href="#1-起源与发展" class="headerlink" title="1.起源与发展"></a>1.起源与发展</h2><p>第一阶段(1943 -1969)</p><p>1943年：Warren McCulloch和Walter Pitts提出了MP神经元模型<br>1958年：Frank Rosenblatt提出了感知器(Perceptron)<br>1960年：Bernard Widrow和Ted Hoff提出了ADLINE神经网络<br>1969年：Marvin Minsky和Seymour Papert指出感知器只能做简单的线性分类任务，无法解决XOR这种简单分类问题<br>第二阶段(1980 -1989)</p><p>1982年：John Hopfield提出了Hopfield神经网络<br>1986年：David Rumelhart、Geoffrey Hinton和Ronald Williams提 出了误差反向传播算法(Error Back Propagation, BP)<br>1989年:YannLeCun等人提出了卷积神经网络(Convolutional Neural Networks，CNN)<br>第三阶段(2006 - )</p><p>2006年:Hinton和他的学生正式提出了深度学习的概念，通过无监督学习方法逐层训练算法，再使用有监督的反向传播算法进行调优</p><p>2011年:Frank Seide在语音识别基准测试数据集上获得压倒性优势</p><p>2012年:AlexKrizhevsky在CNN中引入ReLU激活函数，在图像识别基准测试中获得压倒性优势。</p><p>2012年：吴恩达(Andrew Ng)教授和谷歌首席架构师Jeff Dean共 同主导著名的GoogleBrain项目，采用16万个CPU来构建一个深层 神经网络——DNN，将其应用于图像和语音的识别，大获成功</p><p>2014年：Facebook的DeepFace项目，在人脸识别方面的准确率已 经能够达到97%以上，跟人类识别的准确率几乎没有差别</p><p>2016年：谷歌DeepMind开发的AlphaGo以4:1的比分战胜国际顶尖 围棋高手李世石，证明在围棋领域，基于深度学习技术的机器人已</p><p>经超越了人类</p><h2 id="2-重要的研究机构和著名科学家"><a href="#2-重要的研究机构和著名科学家" class="headerlink" title="2.重要的研究机构和著名科学家"></a>2.重要的研究机构和著名科学家</h2><p>深度学习研究机构<br>Machine Learning at University of Toronto<br>代表人物：GeoffreyHinton</p><p>1.4<br>Deepmind at Google<br>1.5<br>AI research at Facebook<br>清华大学AI研究院<br>中国科学院自动化所<br>中国科学院数学与系统科学研究院<br>Tencent AI Lab<br>华为诺亚方舟实验室<br>阿里达摩院<br>…<br>深度学习知名科学家<br>Geoffrey Hinton<br>深度学习之父；多伦多大学杰出教授；Google副总裁及首席科学顾问；英国皇家科学院院士，美国国家工 程院外籍院士，美国艺术与科学院 外籍院士。</p><p>在BP算法，Boltzmannmachines, Time-delay neural nets, Variational learning and Deep learning做出杰出文献。</p><p>Yann LeCun<br>卷积神经网络之父；纽约大学杰出教授；Facebook人工智能实验室负责人；纽约大学数据科学实验室创始人。</p><p>在学习理论与学习算法、卷积神经 网络领域做出杰出文献。</p><p>Yoshua Bengio<br>蒙特利尔大学全职教授；加拿大统计学习算法研究主席；加拿大皇家科学院院士；CIFAR Senior Fellow；创办了ICLR国际会议。</p><p>在MachineLearning，Deeplearning 领域做出杰出文献。</p><p>吴恩达(Andrew Ng)<br>斯坦福大学计算机科学系和电子工程系副教授；在线教育平台Coursera的联合创始人(with Daphne Koller)；2014年5月16日，吴恩达加入百度，担任百度公司首席科学家；2017年10月，吴恩达出任Woebot公司新任董事长。</p><h2 id="3-深度学习的定义和主要应用"><a href="#3-深度学习的定义和主要应用" class="headerlink" title="3.深度学习的定义和主要应用"></a>3.深度学习的定义和主要应用</h2><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>深度学习定义：一般是指通过训练多层网络结构对未知数据进行分类或者回归</p><p>深度学习分类：有监督学习方法&#x3D;&#x3D;深度前馈网络、卷积神经网络、循环神经网络等；无监督先学习方法&#x3D;&#x3D;深度信念网、深度玻尔兹曼机，深度自编码器等。</p><h5 id="主要应用"><a href="#主要应用" class="headerlink" title="主要应用"></a>主要应用</h5><p>图像处理领域主要应用</p><p>​1.图像分类（物体识别）：整幅图像的分类或识别</p><p>​2.物体检测：检测图像中物体的位置进而识别物体</p><p>​3.图像分割：对图像中特定物体按边缘进行分割</p><p>​4.图像回归：预测图像中物体组成部分的坐标</p><p>语音识别领域主要应用</p><p>​1.语音识别：将语音识别为文字</p><p>​2.声纹识别：识别那个人的声音</p><p>​3.语音合成：根据文字合成特定人的语音</p><p>自然语言处理领域主要应用</p><p>​1.语言模型：根据之前词预测下一个单词。</p><p>​2.情感分析：分析文本体现的情感（正负向、正负中或多态度类型）</p><p>​3.神经机器翻译：基于统计语言模型的多语种互译</p><p>​4.神经自动摘要：根据文本自动生成摘要</p><p>​5.机器阅读理解：通过阅读文本回答问题，完成选择题或者完形填空。</p><p>​6.自然语言推理：根据一句话（前提）推出另一句话（结论）</p><p>综合应用</p><p>​1.图像描述：根据图像给出图像的描述句子</p><p>​2.可视问答：根据图像或视频回答问题</p><p>​3.图像生成：根据文本描述生成图像</p><p>​4.视频生成：根据事故自动生成视频</p><h1 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h1><p>数学基础：</p><p>​1.张量、矩阵运算、矩阵的基础知识、矩阵分解</p><p>​2.概况统计、常见的（多变量）分布</p><p>​3.信息论、熵、互信息、相对熵、交叉熵</p><p>​4.最优化估计方法、最小二乘、线性模型</p><h2 id="矩阵论"><a href="#矩阵论" class="headerlink" title="矩阵论"></a>矩阵论</h2><h5 id="矩阵基本知识"><a href="#矩阵基本知识" class="headerlink" title="矩阵基本知识"></a>矩阵基本知识</h5><p>矩阵：是一个二维数组，其中的每一个元素一般由两个索引来确定一般用大写变量表示，m行n列的实数矩阵基座A∈R m×n</p><p>张量（Tensor）：是矢量概念推广，可以用来表示在一些矢量，标量和其他张量之间的线性关系的多线性函数，标量是0阶张量，矢量是一阶张量，矩阵是二阶张量，三维及以上数组一般称张量</p><p>矩阵的秩（Rank）：矩阵列向量中的极大线性无关组的数目，记作列秩，同样可以定义行秩，行秩&#x3D;列秩&#x3D;矩阵的秩，通常记作rank（A）</p><h6 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h6><p>​1.若矩阵A为方阵，当rank（An*n）&lt;n 时，称A为奇异矩阵或不可逆矩阵</p><p>​1.若矩阵A为方阵，当rank（An*n）&#x3D;n 时，称A为非奇异矩阵或可逆矩阵</p><p>其逆矩阵 A−1 满足以下条件，则称 A−1 为矩阵A的逆矩阵：AA−1&#x3D;A−1A&#x3D;In其中 In是 n×n 的单位阵。</p><h6 id="矩阵的广义逆矩阵"><a href="#矩阵的广义逆矩阵" class="headerlink" title="矩阵的广义逆矩阵"></a>矩阵的广义逆矩阵</h6><p>​1.如果矩阵部位方阵或者时奇异矩阵，不存在逆矩阵，但是可以计算其广义矩阵或者伪逆矩阵；</p><p>​2.对于矩阵A，如果存在矩阵B使得ABA &#x3D; A 则称B为A的广义逆矩阵</p><h6 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h6><p>​机器学习中常见的矩阵分解有特征分解和奇异值分解</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115162935710.png" alt="image-20211115162935710"></p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115163018963.png" alt="image-20211115163018963"></p><h2 id="概率统计"><a href="#概率统计" class="headerlink" title="概率统计"></a>概率统计</h2><h5 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h5><h5 id="常见的概率分布"><a href="#常见的概率分布" class="headerlink" title="常见的概率分布"></a>常见的概率分布</h5><h6 id="伯努利分布"><a href="#伯努利分布" class="headerlink" title="伯努利分布"></a>伯努利分布</h6><p>​1.伯努利试验：只可能有两种结果的单次随机实验</p><p>​2.又称0-1分布，单个二值型离散随机变量分布</p><p>​3.其概率分布：P * （* X &#x3D; 1） &#x3D; p，P（X &#x3D; 0） &#x3D; 1-p</p><h6 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h6><h6 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h6><h6 id="高斯分布"><a href="#高斯分布" class="headerlink" title="高斯分布"></a>高斯分布</h6><h6 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h6><h2 id="多变量概率分布"><a href="#多变量概率分布" class="headerlink" title="多变量概率分布"></a>多变量概率分布</h2><h5 id="条件概率、联合概率、先验概率、后验概率、全概率公式、贝叶斯公式"><a href="#条件概率、联合概率、先验概率、后验概率、全概率公式、贝叶斯公式" class="headerlink" title="条件概率、联合概率、先验概率、后验概率、全概率公式、贝叶斯公式"></a>条件概率、联合概率、先验概率、后验概率、全概率公式、贝叶斯公式</h5><h4 id="常用统计量"><a href="#常用统计量" class="headerlink" title="常用统计量"></a>常用统计量</h4><p>方差、协方差</p><h1 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h1><h4 id="熵（Entropy）"><a href="#熵（Entropy）" class="headerlink" title="熵（Entropy）"></a>熵（Entropy）</h4><p>信息熵，可以看作时样本集合纯度一种指标，也可以认为是样本集合包含的平均信息量</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115164252558.png" alt="image-20211115164252558"></p><h4 id="联合熵"><a href="#联合熵" class="headerlink" title="联合熵"></a>联合熵</h4><p>两个随机变量X和Y的联合分布可以形成联合熵，度量二维随机变量XY的不确定性</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115164444579.png" alt="image-20211115164444579"></p><h4 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h4><p>在随机变量X发生的前提下，随机变量Y发生带来的熵，定义为Y的条件熵，用H（Y|X）表示，定义为：</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115164712189.png" alt="image-20211115164712189"></p><p>条件熵用来衡量在已知随机变量Y的不确定。熵、联合熵和条件熵之间的关系：H（Y|X）&#x3D; H(X,Y) - H(X)</p><h4 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h4><p>I(X;Y) &#x3D; H(X) + H(Y) - H(X,Y)</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115165257307.png" alt="image-20211115165257307"></p><h4 id="相对熵"><a href="#相对熵" class="headerlink" title="相对熵"></a>相对熵</h4><p>相对熵又称KL散度，是描述两个概率分布P和Q差异的一种方法，记作D(P||Q)。在信息论中，D(P||Q)表示用概率分布Q来拟合真实分布P时，产生的信息表达损耗，其中P表示信息源的真实分布，Q表示P的近似分布。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115165805151.png" alt="image-20211115165805151"></p><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><p>一般用来求目标与预测值之间的差距，深度学习中经常用到的一类损失函数度量，比如在对抗生成网络（GAN）中</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115170103496.png" alt="image-20211115170103496"></p><p>交叉熵：<img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115170230305.png" alt="image-20211115170230305"></p><h2 id="最优化估计"><a href="#最优化估计" class="headerlink" title="最优化估计"></a>最优化估计</h2><h5 id="最小二乘估计"><a href="#最小二乘估计" class="headerlink" title="最小二乘估计"></a>最小二乘估计</h5><p>最小二乘估计又称最小平方法，是一种数学优化方法。它通过最小化误差的平方和寻找数据的最佳函数匹配。最小二乘法经常用于回归问题，可以方便的求得未知参数，比如曲线拟合，最小化能量或者最大化熵等问题。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211115170645981.png" alt="image-20211115170645981"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>从人工智能、机器学习与深度学习的起源以及发展，包括各自的应用，都是后期的学习打下基础。以及数学基础，深度学习离不开数学，前期打下坚实的基础是非常重要的。</p><h1 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h1><h5 id="机器学习基础-1"><a href="#机器学习基础-1" class="headerlink" title="机器学习基础"></a>机器学习基础</h5><h5 id="1-数据集"><a href="#1-数据集" class="headerlink" title="1.数据集"></a>1.数据集</h5><h5 id="2-误差分析"><a href="#2-误差分析" class="headerlink" title="2.误差分析"></a>2.误差分析</h5><h5 id="3-代表的机器学习方法"><a href="#3-代表的机器学习方法" class="headerlink" title="3.代表的机器学习方法"></a>3.代表的机器学习方法</h5><p>​1.有监督、线性回归、SVM、决策树、RF</p><p>​2.无监督、聚类、降维(PCA)</p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><h5 id="基本概念：具体来说就是从已知数据中获取规律，并利用规律对未知数据进行预测的技术"><a href="#基本概念：具体来说就是从已知数据中获取规律，并利用规律对未知数据进行预测的技术" class="headerlink" title="基本概念：具体来说就是从已知数据中获取规律，并利用规律对未知数据进行预测的技术"></a>基本概念：具体来说就是从已知数据中获取规律，并利用规律对未知数据进行预测的技术</h5><h5 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h5><p>​1.有监督学习（SupervisedLearning)：有老师（环境）的情况下，学生（计算机）从老师（环境）哪里获得对错指示、最终答案的学习方法。<strong>跟学师评</strong></p><p>​2.无监督学习(UnsupervisedLearning)：没有老师(环境)的情况 下，学生(计算机)自学的过程，一般使用一些既定标准进行评价。 <strong>自学标评</strong></p><p>​3.强化学习(Reinforcement Learning)：没有老师(环境)的情况 下，学生(计算机)对问题答案进行自我评价的方法，<strong>自学自评</strong></p><h5 id="机器学习可做如下两种分类"><a href="#机器学习可做如下两种分类" class="headerlink" title="机器学习可做如下两种分类"></a>机器学习可做如下两种分类</h5><p>​1.有监督学习：代表任务“分类”和“回归”</p><p>​2.无监督分类：代表任务“聚类”和“降维”</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117144218571.png" alt="image-20211117144218571"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>数据集：观测样本的集合。具体的<em>D</em>&#x3D;<em>x</em>1,<em>x</em>2,⋯,<em>xn</em> 表示一个包含<em>n</em>个样本的数据集，其中 <em>xi</em> 是一个向量，表示数据集的第𝑖个样本，其维度𝑑称为样本空间的维度。</p><p>向量<em>xi</em>的元素称为样本的特征，其取值可以是连续的，也可以是离散的。从数据集中学出模型的过程，便称为“学习”或“训练”</p><h3 id="数据集分类"><a href="#数据集分类" class="headerlink" title="数据集分类"></a>数据集分类</h3><p>​1.训练集(Trainingset)：用于模型拟合的数据样本</p><p>​2.验证集(Validation set)：是模型训练过程中单独留出来的样本集，它可以用于调整模型的超参数和用于对模型的能力进行初步评估；</p><p>​例如SVM中参数c（控制分类错误的惩罚程度）和核函数的选择，或者选择网络结构</p><p>​3.测试集(Testset)：用来评估最终模型的泛化能力，但不能作为调参，选择特征等算法相关的依据</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117145816797.png" alt="image-20211117145816797"></p><h3 id="常见数据集"><a href="#常见数据集" class="headerlink" title="常见数据集"></a>常见数据集</h3><p>图像分类</p><p>​1.MNIST(手写数字) <a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a></p><p>​2.CIFAR-10, CIFAR-100, ImageNet</p><p>​<a href="https://www.cs.toronto.edu/~kriz/cifar.html">https://www.cs.toronto.edu/~kriz/cifar.html</a></p><p>​<a href="http://www.image-net.org/">http://www.image-net.org/</a></p><p>电影评论情感分类</p><p>​1.Large Movie Review Dataset v1.0</p><p>​2.<a href="http://ai.stanford.edu/~amaas/data/sentiment/">http://ai.stanford.edu/~amaas/data/sentiment/</a></p><p>图像生成诗歌</p><p>​1.数据集:<a href="https://github.com/researchmm/img2poem">https://github.com/researchmm/img2poem</a></p><h2 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2><p>误差是指算法实际预测输出与样本真实输出之间的差异</p><p>​1.模型在训练集上的误差称为“训练误差”</p><p>​2.模型在总体样本上的误差称为“泛化误差”</p><p>​3.模型在测试集上的误差称为“测试误差”</p><p>由于我们无法知道总体样本，多以我们只能尽量最小化训练误差，导致训练误差和泛化误差有可能存在明显的差异。</p><p>*<em>过拟合</em>  ：是指模型能很好的拟合训练样本，而无法很好地拟合测试样本的现象，从而导致泛型化性能下降，未防止”过拟合“可以选择减少参数，降低模型复杂度，正则化等</p><p>*<em>欠拟合</em>  ：是指模型还没有很好的训练出数据的一般规律。模型拟合程度不高的现象。为防止”欠拟合“，可以选择调整参数、增加迭代深度，换用更加复杂的模型</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117151858614.png" alt="image-20211117151858614"></p><h2 id="泛化误差分析"><a href="#泛化误差分析" class="headerlink" title="泛化误差分析"></a>泛化误差分析</h2><p>假设数据集上需要预测的样本为Y，特征为X，潜在模型为 Y&#x3D;f(X)+ε<em>Y</em>&#x3D;<em>f</em>(<em>X</em>)+<em>ε</em>，其中ε<em>∼</em>N*(0,<em>σε</em>)是噪声, 估计的模型为f*^(<em>X</em>).</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117152159573.png" alt="image-20211117152159573"></p><p><strong>偏差</strong>(bias)反映了模型在样本上的期望输出与真实标记之间的差距，即模型本身的精准度，反应的是模型本身的拟合能力</p><p><strong>方差</strong>(variance)反应了模型在不同训练数据集下学得得函数得输出与期望输出之间的误差，即模型得稳定性，反应的是模型的波动情况</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117152948446.png" alt="image-20211117152948446"></p><p>欠拟合：高偏差低方差</p><p>​寻找更好的特征，提升对数据的刻画额能力</p><p>​增加特征数量</p><p>​重新选择更加复杂的模型‘</p><p>过拟合：低偏差高方差</p><p>​增加训练样本数量</p><p>​减少特征维数，高维空间密度小</p><p>​加入正则化项，使得模型更加平滑</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117153404834.png" alt="image-20211117153404834"></p><h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>基本思路：将训练集划分为K份，每次采用其中K-1份作为训练集，另外一份作为验证集，在训练集上学得函数后，然后在验证集上计算误差&#x3D;&#x3D;&#x3D;K折交叉验证</p><p>​K折交叉重复多次，每次重复中产生不同的分割</p><p>​留一交叉验证(Leave-One-Out)</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117153808061.png" alt="image-20211117153808061"></p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211117160039990.png" alt="image-20211117160039990"></p><h1 id="有监督学习"><a href="#有监督学习" class="headerlink" title="有监督学习"></a>有监督学习</h1><p>​1.数据集有标记(答案)</p><p>​2.数据集通常扩展为(<em>xi</em>,<em>yi</em>)其中𝑦_𝑖∈Y是 <em>xi</em> 的标记，Y是所有标记的集合，称为“标记空间”或“输出空间”</p><p>​3.监督学习的任务是训练出一个模型用于预测y的取值，根据D &#x3D; {(<em>x</em>1,<em>y</em>1),(<em>x</em>2,<em>y</em>2),⋯,(<em>xn</em>,<em>yn</em>)}，训练出函数f，使得<em>f</em>(<em>x</em>)≅<em>y</em></p><p>​4.若预测的值是离散值，如年龄，此类学习任务称为“分类”</p><p>​5.若预测的值是连续值，如房价，此类学习任务称为“回归”</p><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>​线性回归是在样本属性和标签中找到一个线性关系的方法，根据训练数据找到一个线性模型，使得模型产生的预测值与样本标标签的差距最小，若用<img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118093904846.png" alt="image-20211118093904846"></p><p>表示第K个样本的第I个属性则线性模型一般形式为：</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118094041696.png" alt="image-20211118094041696"></p><p>线性回归学习的对象就是权重向量w和偏置向量b，如果用最小均方误差来衡量预测值与样本标签的差距，那么线性回归学习的目标可以表示为：</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118094710976.png" alt="image-20211118094710976"></p><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>逻辑回归是利用𝑠𝑖𝑔𝑚𝑜𝑖𝑑函数，将线性回归产生的预测值压缩到0和1之间，此时将y视作样本为正例的可能性，即</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118095202775.png" alt="image-20211118095202775"></p><p>注意:逻辑回归本质上属于分类算法，sigmoid函数的具体表达形式：<img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118095413748.png" alt="image-20211118095413748"></p><h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><p>支持向量机是由监督学习中最具影响的力方法之一是基于线性判别函数的一种模型。</p><p>SVM基本思想：对于线性可分得数据，能将训练样本划分开的超平面有很多，于是我们寻找“位于两类训练样本中心的超平面”，即margin最大化，从直观上看，这种划分训练样本局部扰动的承受行最好，事实上，这种划分的性能也表现较好。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118144603874.png" alt="image-20211118144603874"></p><p>下面我们以<strong>线性分类</strong>为例：二类可分数据集<em>D</em>&#x3D;{(<em>x</em>1,<em>y</em>1),(<em>x</em>2,<em>y</em>2),⋯,(<em>xn</em>,<em>yn</em>)}，其中y &#x3D; 1 和 y &#x3D; -1分别表示两类样本定义分类的超平面<em>f</em>(<em>x</em>)&#x3D;<em>w<strong>T</strong>x</em>+<em>b</em>（决策边界 decision boundary) ，<strong>最合适</strong>的分类标准就是使得超平面距离两边数据的间隔最大</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118145009222.png" alt="image-20211118145009222"></p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118145050131.png" alt="image-20211118145050131"></p><p>通常方便优化，我们选择加强约束条件<img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118145130389.png" alt="image-20211118145130389"></p><p>那么原问题可以近似为：</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118145157148.png" alt="image-20211118145157148"></p><p>对于线性不可分数据集，我们可以做下面的操作</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211118145313473.png" alt="image-20211118145313473"></p><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>决策树是一种基于树结构进行决策的机器学习方法，这恰是人类面临决策时一种很自然的处理机制</p><p>​1.在这些树的结构里，叶子节点给出的类标而内部节点代表某个属性；</p><p>​2.例如：银行在面对是否借贷给客户的问题时，通常会进行一系列的决策：银行会首先判断客户的信贷声誉是否良好？良好的话，在判断客户是否有稳定的工作？不良的话可能直接拒绝，也可能判断客户是否有可抵押物？····这种思考的过程便是决策树生成的过程。</p><p>决策树的生成过程中，最重要的因素便是根节点的选择，即选择哪种特征最为决策因素：ID3算法使用信息增益作为准则</p><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><h4 id="集成学习-Ensemblelearning"><a href="#集成学习-Ensemblelearning" class="headerlink" title="集成学习(Ensemblelearning)"></a>集成学习(Ensemblelearning)</h4><p>​1.组合多个弱监督模型以期望得到一个更好更全面的强监督学习，集成学习潜在的思想时即便某一个弱分类器得到了错误的预测，其他的前分类器也可以将错误纠正回来。</p><p>​随机森林随机的方式建立起一颗颗决策树组成一个森林，其中每棵决策树之间没有关联，当有一个新的样本输入时，就让每棵树独立的做出判断，按照多数原则决定该样本的分类结果。</p><p>​随机森林构建的基本步骤</p><p>​1.随机有放回的从训练集中抽取m个训练样本，训练集<em>Dt</em>.</p><p>​2.从<em>Dt</em>.对应的特征属性中随机选择部分特征，构建决策树</p><p>​3.重复上述步骤构建多个决策树</p><h4 id="预测步骤"><a href="#预测步骤" class="headerlink" title="预测步骤"></a>预测步骤</h4><p>​1.向建立好的随机森林中输入一个新样本</p><p>​2.随机森林中每棵决策树都独立的做出判断</p><p>​3.将得到票数最多的分类结果作为该样本的最终类别</p><h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><p>​1.数据集没有标记信息（自学）</p><p>​2.聚类：我们可以使用无监督学习来预测各样本之间的关联度，把关联度大的样本划分为同一类，关联度小的样本划分为不同类，这便是“聚类”</p><p>​3.降维：我们也可以使用无监督学习处理数据，把维度较高，计算复杂的数据，转化为维度低，易处理，且蕴含信息不丢失或较少丢失的数据，这便是“降维”</p><h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><p>聚类的目的是将数据分类多个类别，在同一个类内，对象(实体)之间具有较高的相似性，在不同类内，对象之间具有较大的差异。</p><p>对一批没有类别标签的样本集，按照样本之间的相似性程度分类，相似的归为一类，不相似的归为其他类，这种分类称为聚类分析，也称为无监督分类</p><p>常见的方法有K-Means聚类、均值漂移聚类、基于密度的聚类等</p><p><strong>K-means</strong>聚类是一个反复迭代的过程，算法分为四个步骤：</p><p>​1.选取数据空间中的K个对象作为初始中心，每个对象代表一个聚类中心；</p><p>​2.对于样本中的数据对象，根据他们与这些聚类中心的欧式距离，按距离最近的准则将他们分到距离他们最近的聚类中心（最相似）所对应的类</p><p>​3.更新聚类中心，将每个类别中所有对象所对应的均值作为该类别的聚类中心，计算目标函数的值。</p><p>​4.判断聚类中心和目标函数的值是否发生改变，若不变，则输出结果，若改变，则返回2</p><h4 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h4><p>降维的目的就是将原始样本数据维度d降到一个更小的数m，且尽量使得样本蕴含信息损失最小，或还原数据时产生的误差最小，比如主成分分析法···</p><p>降维的优势：</p><p>​1.数据子在低纬度下更容易处理，更容易使用</p><p>​2.相关特征，特别是重要特征更能在数据中明确的显示出来</p><p>​3.如果只有二维或者三维的话，能够进行可视化展示；</p><p>​4.去除数据噪声，降低算法开销等</p><h1 id="前馈神经网络"><a href="#前馈神经网络" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h1><p>​1.神经源模型</p><p>​2.感知器，多层感知器</p><p>​3.BP算法</p><p>​4.前馈神经网络</p><h2 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h2><p>神经元(M-P)</p><p>1943 年，美国神经生理学家沃伦·麦卡洛克( Warren McCulloch ) 和数学家沃尔特 ·皮茨(Walter Pitts )对生物神经元进行建模，首次提出了一种形式神经元模型，并命名为McCulloch-Pitts模型，即后 来广为人知的M-P模型。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211119084055045.png" alt="image-20211119084055045"></p><p>在M-P模型中神经元接受其他n个神经元的输入信号（0或1），这些输入信号经过权重加权并求和，将求和结果与阈值（threshold) <em>θ</em> 比较，然后经过激活函数处理，得到神经元的输出</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211119085636193.png" alt="image-20211119085636193"></p><p>M-P模型可以表示多种逻辑运算，如取反运算，逻辑或，逻辑与</p><p>取返运算可以用单输入单输出模型表示，即如果输入为0则输出为1，如果输入为1，则输出为0，由M-P模型的运算规则可得w &#x3D; -2，<em>θ</em>&#x3D;−1.</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211119090021286.png" alt="image-20211119090021286"></p><p>逻辑或与逻辑与运算可以用双输入单输出模型表示，以逻辑与运算为例<em>w</em>1&#x3D;1，<em>w</em>2&#x3D;1,<em>θ</em>&#x3D;1.5.<img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211119090144242.png" alt="image-20211119090144242"></p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>人工神经网络由神经元模型构成，这种由许多神经元组成的信息处理网络具有并行分布结构。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211119090246788.png" alt="image-20211119090246788"></p><p>其中圆形节点表示一个神经元，方形节点表示一组神经元。</p><h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><h4 id="单层感知器"><a href="#单层感知器" class="headerlink" title="单层感知器"></a>单层感知器</h4><p>​1958 年，罗森布拉特( Roseblatt )提出了感知器，与M-P模型需要人为的确定参数不同，感知器能通过训练自动确定参数，感知器能够通过训练自动确定参数，训练方式为有监督学习，即许需要设定训练样本和期望输出，然后调整实际输出和期望输出之差的方式</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120082340144.png" alt="image-20211120082340144"></p><p>其中，<em>α</em> 是学习率，<em>r</em>和 <em>y</em> 分别是期望输出和实际输出。</p><p>感知器权重体调节的基本思路：</p><p>​实际输出y与期望输出r相等时，w 和 θ 不变</p><p>​实际输出y与期望输出r不相等时，调整w和θ的值</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120083825204.png" alt="image-20211120083825204"></p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120083835325.png" alt="image-20211120083835325"></p><p>下面给出感知器模型的训练过程</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120083903156.png" alt="image-20211120083903156"></p><h4 id="多层感知器"><a href="#多层感知器" class="headerlink" title="多层感知器"></a>多层感知器</h4><p>单层感知器只能解决线性可分问题，而不能解决线性不可分问题；为了解决线性不可分问题，我们需要使用多层感知器。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120084052586.png" alt="image-20211120084052586"></p><p>多层感知器指的是由多层结构的感知器递阶组成的输入值向前传播的网络，也被称为前馈网络或者正向传播网络</p><p>​以三层结构的多层感知器为例，他由输入层，中间层及输出层组成</p><p>​1.与M-P模型相同，中间层的感知器通过权重与输入层的个单元相连接，通过阈值函数计算中间层各单位的输出值</p><p>​2.中间层与输出层之间同样是通过权重相连接</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120084716924.png" alt="image-20211120084716924"></p><h2 id="BP算法"><a href="#BP算法" class="headerlink" title="BP算法"></a>BP算法</h2><p>多层感知器的训练使用误差反向传播算法(Error Back Propagation)，即BP算法。</p><h4 id="BP算法的基本过程"><a href="#BP算法的基本过程" class="headerlink" title="BP算法的基本过程"></a>BP算法的基本过程</h4><p>​1.前向传播计算：由输入层经过隐含层向输出层的计算网络输出</p><p>​2.误差反向逐层传递:网络的期望输出与实际输出之差的误差信号由输出层经过隐含层逐层向输入层传递</p><p>​3.由“前向传播计算”与“误差反向逐层传递”的反复进行的网络训练 过程</p><p>BP算法就是通过比较实际输出和期望输出得到误差信号，把误差信 号从输出层逐层向前传播得到各层的误差信号，再通过调整各层的连接权重以减小误差。权重的调整主要使用梯度下降法：</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211120085409192.png" alt="image-20211120085409192"></p><h4 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h4><p>通过误差反向传播算法调整多层感知器的连接权重时，一个瓶颈问题就是<strong>激活函数</strong>：</p><h4 id="优化问腿"><a href="#优化问腿" class="headerlink" title="优化问腿"></a>优化问腿</h4><p>难点：</p><p>​1.参数过多，影响训练</p><p>​2.非凸优化问题：即存在局部最优而非全局最优解，影响迭代</p><p>​3.梯度消失问题，下层参数比较难调</p><p>​4.参数解释起来比较困难</p><p>需求：</p><p>​1.计算资源要大</p><p>​2.非凸优化问题，下层参数比较偏难调</p><p>​3.参数解释起来比较困难</p><h4 id="非凸优化问题"><a href="#非凸优化问题" class="headerlink" title="非凸优化问题"></a>非凸优化问题</h4><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211123140602258.png" alt="image-20211123140602258"></p><h4 id="梯度消失问题"><a href="#梯度消失问题" class="headerlink" title="梯度消失问题"></a>梯度消失问题</h4><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211123140620554.png" alt="image-20211123140620554"></p><h1 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h1><p>卷积神经网络</p><ol><li>卷积</li><li>CNN基本原理</li><li>经典CNN</li><li>CNN主要应用</li></ol><p>全连接神经网络权重矩阵参数非常的多。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211124081137691.png" alt="image-20211124081137691"></p><p>而往往自然图像中的物体都具有局部不变性特征，即尺度缩放，平移，旋转等操作不影响其语义信息，但是全连接前馈网络很难提取这些局部不变特征性，这变就需要接下来的卷积神经网络（Convolutional Neural Networks，CNN）</p><p>卷积神经网络也是一种前馈神经网络，是受到生物学上感受野（感受野主要是指听觉系统，本体感觉系统和视觉系统中神经元的一些性质）的机制而提出的（在视觉神经神经系统中，一个神经元的感受野是指视网膜上的特定区域，只有这个区域内的刺激才能够刺激活该神经元）</p><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>卷积：(<em>f</em>*<em>g</em>)(<em>n</em>)成为 f*和 g的卷积，连续卷积和离散卷积可以表达为如下形式：</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211124082213312.png" alt="image-20211124082213312"></p><p>卷积有很多应用，经常用于处理一个输入，通过系统产生一个适应需求的输出。</p><p>​1.统计学中加权平均法</p><p>​2.概率论中两个独立变量之和概率密度的计算</p><p>​3.信号处理中的线性系统</p><p>​4.物理学的线性系统</p><p>​5.图像处理中的应用(卷积神经网络)</p><p>卷积经常用在信号处理中，用于计算机信号延迟积累</p><p>在图像处理中，图像是以二维矩阵的形式输出到神经网络中，因此我们需要二维卷积。</p><p>典型的卷积层为3维结构</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211124083405497.png" alt="image-20211124083405497"></p><h2 id="卷积神经网络基本原理"><a href="#卷积神经网络基本原理" class="headerlink" title="卷积神经网络基本原理"></a>卷积神经网络基本原理</h2><p>卷积神经网络的基本结构大致包括：卷积层，激活函数，池化层，全连接层，输出层。</p><h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><p>二维卷积运算：给定二维的图像<em>I</em>作为输入，二维卷积核<em>K</em>，卷积运算可表示为 S(i, j)&#x3D;(I * K)(i, j)&#x3D;\sum_{m} \sum_{n} I(i-m, j-n) K(m, n)<em>S</em>(<em>i</em>,<em>j</em>)&#x3D;(<em>I</em>∗<em>K</em>)(<em>i</em>,<em>j</em>)&#x3D;∑<em>m</em>∑<em>n**I</em>(<em>i</em>−<em>m</em>,<em>j</em>−<em>n</em>)<em>K</em>(<em>m</em>,<em>n</em>)，卷积核需要进行上下翻转和左右反转</p><h2 id="激活函数-1"><a href="#激活函数-1" class="headerlink" title="激活函数"></a>激活函数</h2><p>激活函数是用来加入非线性因素，提高网络表达能力，卷积神经网络中最常用的是ReLU，Sigmoid使用较少。</p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211127200813287.png" alt="image-20211127200813287"></p><p><img src="C:\Users\JINHE1997\AppData\Roaming\Typora\typora-user-images\image-20211127200824747.png" alt="image-20211127200824747"></p><h2 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h2><p>池化操作使用某位置相邻输出的总体统计特征作为该位置 的输出，常用最大池化**(max-pooling)<strong>和均值池化</strong>(average- pooling)**。</p><p>池化层不包含需要训练学习的参数，仅需指定池化操作的核大小、操作步幅以及池化类型。</p><h2 id="卷积神经网络的训练"><a href="#卷积神经网络的训练" class="headerlink" title="卷积神经网络的训练"></a>卷积神经网络的训练</h2><p>Step 1：用随机数初始化所有的卷积核和参数&#x2F;权重</p><p>Step 2：将训练图片作为输入，执行前向步骤(卷积， ReLU，池化以及全连接层的前向传播)并计算每个类别的对应输出概率。</p><p>Step 3：计算输出层的总误差</p><p>Step 4：反向传播算法计算误差相对于所有权重的梯度，并用梯度下降法更新所有的卷积核和参数&#x2F;权重的值，以使输出误差最小化</p><p>注：卷积核个数、卷积核尺寸、网络架构这些参数，是在 Step 1 之前就已经固定的，且不会在训练过程中改变——只有卷 积核矩阵和神经元权重会更新。</p><h2 id="景点卷积神经网络"><a href="#景点卷积神经网络" class="headerlink" title="景点卷积神经网络"></a>景点卷积神经网络</h2><h3 id="1-LeNet-5"><a href="#1-LeNet-5" class="headerlink" title="1. LeNet-5"></a>1. LeNet-5</h3><p>LeNet-5由LeCun等人提出于1998年提出，主要进行手写数字识别和英文字母识别。经典的卷积神经网络，LeNet虽小，各模块齐全，是学习 CNN的基础。</p><h3 id="2-AlexNet"><a href="#2-AlexNet" class="headerlink" title="2. AlexNet"></a>2. AlexNet</h3><p>AlexNet由Hinton的学生Alex Krizhevsky于2012年提出，获得ImageNet LSVRC-2012(物体识别挑战赛)的冠军，1000个类别120万幅高清图像（Error: 26.2%(2011) →15.3%(2012)），通过AlexNet确定了CNN在计算机视觉领域的王者地位。</p><h3 id="3-VGGNet"><a href="#3-VGGNet" class="headerlink" title="3. VGGNet"></a>3. VGGNet</h3><h3 id="4-Inception-Net"><a href="#4-Inception-Net" class="headerlink" title="4. Inception Net"></a>4. Inception Net</h3><h3 id="5-ResNet"><a href="#5-ResNet" class="headerlink" title="5. ResNet"></a>5. ResNet</h3><h2 id="主要应用-1"><a href="#主要应用-1" class="headerlink" title="主要应用"></a>主要应用</h2><p><strong>图像处理领域主要应用</strong></p><ul><li>图像分类(物体识别)：整幅图像的分类或识别</li><li>物体检测：检测图像中物体的位置进而识别物体</li><li>图像分割：对图像中的特定物体按边缘进行分割</li><li>图像回归：预测图像中物体组成部分的坐标</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
