<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>纸飞机的旅行</title>
    <link>https://jhcgnb.cn/</link>
    
    <atom:link href="https://jhcgnb.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>选择有时候比努力更重要</description>
    <pubDate>Tue, 18 Jul 2023 07:52:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>流形与非流行</title>
      <link>https://jhcgnb.cn/posts/467cee4/</link>
      <guid>https://jhcgnb.cn/posts/467cee4/</guid>
      <pubDate>Sat, 08 Jul 2023 13:45:31 GMT</pubDate>
      
        
        
      <description>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h3 id=&quot;流形三角形网格（Manifold-Triangle-Mesh）和非流形网格（Non-Manifold-Mesh）&quot;&gt;&lt;a href=&quot;#流形三角形网格（Manifold-</description>
        
      
      
      
      <content:encoded><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="流形三角形网格（Manifold-Triangle-Mesh）和非流形网格（Non-Manifold-Mesh）"><a href="#流形三角形网格（Manifold-Triangle-Mesh）和非流形网格（Non-Manifold-Mesh）" class="headerlink" title="流形三角形网格（Manifold Triangle Mesh）和非流形网格（Non-Manifold Mesh）"></a>流形三角形网格（Manifold Triangle Mesh）和非流形网格（Non-Manifold Mesh）</h3><p>流形三角形网格（Manifold Triangle Mesh）和非流形网格（Non-Manifold Mesh）是在计算机图形学和几何处理中常见的两种网格类型。它们具有不同的特征和限制，对于不同的应用领域和算法，选择合适的网格类型是非常重要的。</p><ol><li><p>流形三角形网格：<br>流形三角形网格是一种拓扑上具有连续性和封闭性的网格。它的特征包括：</p><ul><li>每个顶点最多与两个边和两个面相连。</li><li>每个边最多与两个面相连。</li><li>每个面最多与三条边和三个顶点相连。</li><li>网格中不存在孤立的顶点、边或面。</li></ul><p>流形三角形网格常用于表示光滑曲面和可变形物体，它具有良好的几何性质和拓扑特征，适用于各种几何处理算法，如渲染、形状分析和物理模拟等。</p></li><li><p>非流形网格：<br>非流形网格是一种拓扑上不具备连续性和封闭性的网格。它的特征包括：</p><ul><li>顶点、边或面可以具有任意数量的相邻元素。</li><li>存在孤立的顶点、边或面。</li><li>边和面之间的连接关系可以是多对多的。</li></ul><p>非流形网格常用于表示复杂的几何结构，如曲面上的孔洞、尖锐的边缘或非连续的形状。然而，由于其拓扑特性的复杂性，非流形网格在某些算法和应用中可能会导致问题，例如光滑、纹理映射和体积建模等。</p></li></ol><p>对于流形三角形网格和非流形网格，需要根据具体的应用场景和算法需求选择合适的网格类型。流形三角形网格适用于大多数常规几何处理任务，而非流形网格则更适用于具有复杂拓扑结构的特殊情况。在处理非流形网格时，需要特别注意处理拓扑上的不连续性和边界条件。</p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E5%AD%A6%E6%9C%AF/">学术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/">计算机图形学</category>
      
      
      <comments>https://jhcgnb.cn/posts/467cee4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>详解@RequestParam</title>
      <link>https://jhcgnb.cn/posts/f43726f7/</link>
      <guid>https://jhcgnb.cn/posts/f43726f7/</guid>
      <pubDate>Tue, 04 Jul 2023 02:07:55 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;RequestParam&quot;&gt;&lt;a href=&quot;#RequestParam&quot; class=&quot;headerlink&quot; title=&quot;@RequestParam&quot;&gt;&lt;/a&gt;@RequestParam&lt;/h3&gt;&lt;p&gt;在Java中，&lt;code&gt;@RequestParam&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>在Java中，<code>@RequestParam</code> 是一个注解，用于从HTTP请求中获取参数值。它通常用于Spring MVC框架中的控制器方法中，以指定方法参数应该绑定到HTTP请求中的特定参数。</p><p><code>@RequestParam</code> 可以用于处理HTTP请求的查询参数、表单参数或路径参数。它可以应用于方法的参数或方法的参数上的注解。</p><p>下面是一些示例：</p><ol><li>使用默认参数名称：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将尝试从HTTP请求中获取名为 “param” 的查询参数，并将其绑定到方法参数 <code>param</code>。</p><ol start="2"><li>使用自定义参数名称：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam(&quot;customParam&quot;)</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例中，<code>@RequestParam</code> 注解指定了参数的自定义名称 “customParam”，它将从HTTP请求中获取该参数，并将其绑定到方法参数 <code>param</code>。</p><ol start="3"><li>设置默认值：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam(value = &quot;param&quot;, defaultValue = &quot;default&quot;)</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，如果请求中没有名为 “param” 的参数，或者参数的值为空，那么方法参数 <code>param</code> 将被设置为默认值 “default”。</p><ol start="4"><li>必需的参数：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">exampleMethod</span><span class="params">(<span class="meta">@RequestParam(required = true)</span> String param)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>@RequestParam</code> 注解的 <code>required</code> 属性被设置为 <code>true</code>，表示参数是必需的。如果请求中没有提供该参数，将会返回错误。</p><p>总结一下，<code>@RequestParam</code> 注解用于从HTTP请求中获取参数值，并将其绑定到Java方法的参数。它提供了许多选项，可以根据需要配置参数的名称、默认值和是否必需。这样，开发者可以方便地处理HTTP请求中的参数。</p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/Java/">Java</category>
      
      
      <comments>https://jhcgnb.cn/posts/f43726f7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cesium面试题</title>
      <link>https://jhcgnb.cn/posts/a98e3ede/</link>
      <guid>https://jhcgnb.cn/posts/a98e3ede/</guid>
      <pubDate>Mon, 03 Jul 2023 06:07:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/e0239a75f96830e577eef736ebcad965.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;heade</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/e0239a75f96830e577eef736ebcad965.png" alt="img"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="Cesium开发面试题"><a href="#Cesium开发面试题" class="headerlink" title="Cesium开发面试题"></a>Cesium开发面试题</h1><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="1、请简要介绍一下Cesium的基本功能。"><a href="#1、请简要介绍一下Cesium的基本功能。" class="headerlink" title="1、请简要介绍一下Cesium的基本功能。"></a>1、请简要介绍一下Cesium的基本功能。</h2><p>答：Cesium是一款3D地球可视化引擎，可以在Web浏览器中显示高度真实感的3D地球场景，包括地形、地表纹理、3D建筑、水域等。它提供多种漫游和导航方式，支持多种地形和影像数据格式，以及3D Tiles、CZML等技术，可以用于实时位置追踪、天文数据显示、地下和空中场景等应用场景。</p><h2 id="2、请解释一下Cesium中的3D-Tiles技术是什么，以及它的作用是什么。"><a href="#2、请解释一下Cesium中的3D-Tiles技术是什么，以及它的作用是什么。" class="headerlink" title="2、请解释一下Cesium中的3D Tiles技术是什么，以及它的作用是什么。"></a>2、请解释一下Cesium中的3D Tiles技术是什么，以及它的作用是什么。</h2><p>  答：3D Tiles是一种用于高效地加载和显示大规模的3D地球数据的技术，可以将复杂的3D数据分层并进行高度优化。Cesium中的3D Tiles技术可以支持大规模的3D地球数据，包括城市、建筑、地形等，提高了数据的加载速度和显示效率。</p><h2 id="3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？"><a href="#3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？" class="headerlink" title="3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？"></a>3、CZML是Cesium中的一个数据格式，它是什么，以及它用于描述什么样的场景？</h2><p>  答：CZML（Cesium Language）是一种描述和显示动态的地球场景的数据格式，它可以用于描述航班轨迹、气象数据、卫星运行轨迹等。CZML中可以包含实体的位置、速度、方向等信息，以及可视化效果的设置。</p><h2 id="4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。"><a href="#4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。" class="headerlink" title="4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。"></a>4、请解释一下Cesium中的ImageryProvider是什么，以及它的作用是什么。</h2><p>  答：ImageryProvider是Cesium中的一个数据提供器，用于提供地图和影像数据。它可以从多种来源获取数据，比如Web Map Service（WMS）、Web Map Tile Service（WMTS）等，并在地球表面上显示出来。通过使用ImageryProvider，开发者可以轻松地获取并显示各种地图和影像数据。</p><h2 id="5、如何加载飞线"><a href="#5、如何加载飞线" class="headerlink" title="5、如何加载飞线"></a>5、如何加载飞线</h2><p>  答：1、创建polyLine实体</p><p>   2、计算带有弧度效果的点集数组作为polyline的positions属性参数</p><h2 id="6、如何设置飞线动效材质"><a href="#6、如何设置飞线动效材质" class="headerlink" title="6、如何设置飞线动效材质"></a>6、如何设置飞线动效材质</h2><p>答：1、创建cesium自定义材质类</p><p>2、创建shader，原理是通过贴图UV移动来实现流光效果</p><h2 id="7、如何在cesium地球上添加柱状图"><a href="#7、如何在cesium地球上添加柱状图" class="headerlink" title="7、如何在cesium地球上添加柱状图"></a>7、如何在cesium地球上添加柱状图</h2><p>答：1、创建entity实体，使用box属性；</p><p>2、dimensions设置长宽；</p><p>3、position设置中心点位置；</p><p>4、heightReference属性设置贴地属性；</p><h2 id="8、如何让柱状图跟随数据变化"><a href="#8、如何让柱状图跟随数据变化" class="headerlink" title="8、如何让柱状图跟随数据变化"></a>8、如何让柱状图跟随数据变化</h2><p>答：1、创建SampledPositionProperty对象</p><p>2、在不同的时间点绑定对应的值</p><p>  将填充好的SampledPositionProperty赋值给dimensions，实现位置随时间的偏移</p><h2 id="9、如何加载天气图的效果"><a href="#9、如何加载天气图的效果" class="headerlink" title="9、如何加载天气图的效果"></a>9、如何加载天气图的效果</h2><p>答：1、使用Wind3D类实现</p><p>实现原理是将nc格式的数据解析之后运用primitive绘制</p><p>​    2、Cesium官网有github的分享案例，需要修改鼠标事件影响该类绘制时的显示隐藏</p><h2 id="10、如何给cesium地球替换表面图层"><a href="#10、如何给cesium地球替换表面图层" class="headerlink" title="10、如何给cesium地球替换表面图层"></a>10、如何给cesium地球替换表面图层</h2><p>答：1、主要是在viewer的imageryLayers地图层级内对单独的layer图层的显示隐藏或者添加与移除，imageryLayers有add与remove方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2、viewer.imageryLayers.addImageryProvider(layer, num);</span><br><span class="line">viewer.imageryLayers.remove(viewer.imageryLayers.get(num), true);</span><br></pre></td></tr></table></figure><p>主要是这两个API<br>    3、注意不同的地图图层加载会有对应的投影方式，比如web墨卡托投影和wgs84</p><h2 id="11、cesium如何进行坐标转换"><a href="#11、cesium如何进行坐标转换" class="headerlink" title="11、cesium如何进行坐标转换"></a>11、cesium如何进行坐标转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：1、//经纬度转屏幕坐标</span><br><span class="line"></span><br><span class="line">LngLatToSceenCoordinates(lng, lat) &#123;</span><br><span class="line"></span><br><span class="line">let cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat);</span><br><span class="line"></span><br><span class="line">let cartesian2 = Cesium.SceneTransforms.wgs84ToWindowCoordinates(</span><br><span class="line"></span><br><span class="line">viewer.scene,</span><br><span class="line"></span><br><span class="line">cartesian3</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">return cartesian2;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">2、 //笛卡尔坐标转经纬度坐标</span><br><span class="line"></span><br><span class="line">Cartesian3ToLngLat(cartesian) &#123;</span><br><span class="line"></span><br><span class="line">let cartographic =</span><br><span class="line"></span><br><span class="line">viewer.scene.globe.ellipsoid.cartesianToCartographic(cartesian);</span><br><span class="line"></span><br><span class="line">let c_height = viewer.camera.positionCartographic.height;</span><br><span class="line"></span><br><span class="line">//将地图坐标（弧度）转为十进制的度数</span><br><span class="line"></span><br><span class="line">let lat_String = Cesium.Math.toDegrees(cartographic.latitude).toFixed(6);</span><br><span class="line"></span><br><span class="line">let log_String = Cesium.Math.toDegrees(cartographic.longitude).toFixed(6);</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line"></span><br><span class="line">parseFloat(log_String),</span><br><span class="line"></span><br><span class="line">parseFloat(lat_String),</span><br><span class="line"></span><br><span class="line">parseFloat(c_height),</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="12、cesium如何实现标记的添加"><a href="#12、cesium如何实现标记的添加" class="headerlink" title="12、cesium如何实现标记的添加"></a>12、cesium如何实现标记的添加</h2><p>  答：1、创建entity实体对象使用billboard对象场景图标挥着使用billboard collection使用primitive创建</p><h2 id="13、cesium如何实现鼠标拾取弹窗功能"><a href="#13、cesium如何实现鼠标拾取弹窗功能" class="headerlink" title="13、cesium如何实现鼠标拾取弹窗功能"></a>13、cesium如何实现鼠标拾取弹窗功能</h2><p>   答：1、创建new Cesium.ScreenSpaceEventHandler(canvas)对象</p><p> 2、注册鼠标点击事件<br>   3、使用let pick &#x3D; viewer.scene.pick(movement.position); 选取当前的entity</p><h2 id="14、如何设置cesium中的抗锯齿方法"><a href="#14、如何设置cesium中的抗锯齿方法" class="headerlink" title="14、如何设置cesium中的抗锯齿方法"></a>14、如何设置cesium中的抗锯齿方法</h2><p>  答：1、使用fxaa方法，效果较差</p><p>  2、使用msaa方法，但需要浏览器支持webGL2的api方法</p><p><img src="https://bcn.135editor.com/files/images/editor_styles/2b4dad3b5ce0324eb63cde4380e4cdfb.gif" alt="img"></p><p><img src="https://image2.135editor.com/cache/remote/aHR0cHM6Ly9tbWJpei5xbG9nby5jbi9tbWJpel9wbmcvdm5UNGhiYUxvWDZIWkQxZXFvRmljVXdwR3RPSklNamNzaWNNVVVZWDRvNHNNMGhQQ2RQRUtTV0pIYkdQb2MyVWJQaWNGVlNTM2ljU3hZRDdoOTdNUHYwSW9BLzA/d3hfZm10PXBuZw==" alt="img"></p><p><img src="https://bcn.135editor.com/files/images/editor_styles/8a370d08cb8dee16148088fd86f39e16.png" alt="img"></p><p><img src="https://bexp.135editor.com/files/users/498/4980660/202302/k5PHuh8T_I5qb.jpg?auth_key=1677427199-0-0-d90c72020ea7995dbf533d91bb976f8c" alt="qrcode_for_gh_e879ec750214_258.jpg"></p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/Cesium/">Cesium</category>
      
      
      <comments>https://jhcgnb.cn/posts/a98e3ede/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux项目部署详细步骤</title>
      <link>https://jhcgnb.cn/posts/d594835b/</link>
      <guid>https://jhcgnb.cn/posts/d594835b/</guid>
      <pubDate>Tue, 09 May 2023 11:08:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;安装部署&quot;&gt;&lt;a href=&quot;#安装部署&quot; class=&quot;headerlink&quot; title=&quot;安装部署&quot;&gt;&lt;/a&gt;安装部署&lt;/h1&gt;&lt;h2 id=&quot;一、环境准备&quot;&gt;&lt;a href=&quot;#一、环境准备&quot; class=&quot;headerlink&quot; title=&quot;一、环境准</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>说明：如果已经安装过相关工具就忽略</p><h3 id="1安装JAVA-运行环境"><a href="#1安装JAVA-运行环境" class="headerlink" title="1安装JAVA 运行环境"></a>1安装JAVA 运行环境</h3><p>第一步：上传或下载安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /usr/local</span><br></pre></td></tr></table></figure><p>jdk-8u152-linux-x64.tar.gz</p><p>第二步：解压安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u152-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>第三步：建立软连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/jdk1.8.0_152/  /usr/local/jdk </span><br></pre></td></tr></table></figure><p>第四步：修改环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/jdk</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过命令source /etc/profile让profile文件立即生效</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>第五步、测试是否安装成功</p><p>使用java -version，出现版本为java version “1.8.0_152”</p><h3 id="2安装maven"><a href="#2安装maven" class="headerlink" title="2安装maven"></a>2安装maven</h3><p>第一步：上传或下载安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /usr/local</span><br></pre></td></tr></table></figure><p>apache-maven-3.6.1-bin.tar.gz</p><p>第二步：解压安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar  -zxvf  apache-maven-3.6.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p>第三步：建立软连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln  -s  /usr/local/apache-maven-3.6.1/  /usr/local/maven</span><br></pre></td></tr></table></figure><p>第四步：修改环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export MAVEN_HOME=/usr/local/maven</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过命令source /etc/profile让profile文件立即生效</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>第五步、测试是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn –v</span><br></pre></td></tr></table></figure><h3 id="3安装docker"><a href="#3安装docker" class="headerlink" title="3安装docker"></a>3安装docker</h3><p>环境安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>第一步：安装必要的一些系统工具</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br></pre></td></tr></table></figure><p>第二步：添加软件源信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>第三步：更新并安装Docker-CE</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>第四步：开启Docker服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>第五步：测试是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v </span><br></pre></td></tr></table></figure><p>第六步：配置镜像加速器</p><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://ldu6wrsf.mirror.aliyuncs.com&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="4安装mysql"><a href="#4安装mysql" class="headerlink" title="4安装mysql"></a>4安装mysql</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql --restart=always -v /home/ljaer/mysql:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7 </span><br></pre></td></tr></table></figure><p>第三步：测试mysql</p><p>进入容器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><p>登录mysql：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>如果顺利进入，安装成功</p><h3 id="5安装rabbitmq"><a href="#5安装rabbitmq" class="headerlink" title="5安装rabbitmq"></a>5安装rabbitmq</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --restart=always --name rabbitmq rabbitmq:management</span><br></pre></td></tr></table></figure><p>第三步：安装延迟队列插件</p><ol><li><p>首先下载rabbitmq_delayed_message_exchange-3.9.0.ez文件上传到RabbitMQ所在服务器，下载地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p></li><li><p>切换到插件所在目录，执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp rabbitmq_delayed_message_exchange-3.9.0.ez rabbitmq:/plugins </span><br></pre></td></tr></table></figure><p>命令，将刚插件拷贝到容器内plugins目录下</p></li><li><p>执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq /bin/bash </span><br></pre></td></tr></table></figure><p>命令进入到容器内部，并 cd plugins 进入plugins目录</p></li><li><p>执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l|grep delay</span><br></pre></td></tr></table></figure><p>  命令查看插件是否copy成功</p></li><li><p>在容器内plugins目录下，执行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>  命令启用插件</p></li><li><p>exit命令退出RabbitMQ容器内部，然后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart rabbitmq </span><br></pre></td></tr></table></figure><p>命令重启RabbitMQ容器</p></li></ol><h3 id="6安装redis"><a href="#6安装redis" class="headerlink" title="6安装redis"></a>6安装redis</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379  --restart=always redis:latest redis-server</span><br></pre></td></tr></table></figure><h3 id="7安装nacos"><a href="#7安装nacos" class="headerlink" title="7安装nacos"></a>7安装nacos</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --env MODE=standalone --name nacos --restart=always -d -p 8848:8848 -e JVM_XMS=512m -e JVM_XMX=512m nacos/nacos-server:1.4.1</span><br></pre></td></tr></table></figure><h3 id="8安装sentinel"><a href="#8安装sentinel" class="headerlink" title="8安装sentinel"></a>8安装sentinel</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull bladex/sentinel-dashboard</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name sentinel-dashboard --restart=always -p 8858:8858 -d bladex/sentinel-dashboard:latest  </span><br></pre></td></tr></table></figure><h3 id="9安装elasticsearch"><a href="#9安装elasticsearch" class="headerlink" title="9安装elasticsearch"></a>9安装elasticsearch</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.8.0</span><br></pre></td></tr></table></figure><p>第二步：启动</p><p>需要建立：两个文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/plugins</span><br><span class="line"></span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br></pre></td></tr></table></figure><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 --name elasticsearch --restart=always \-e &quot;discovery.type=single-node&quot; \-e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; \-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \-d elasticsearch:7.8.0</span><br></pre></td></tr></table></figure><p>第三步：安装中文分词器</p><ol><li><p>下载elasticsearch-analysis-ik-7.8.0.zip</p></li><li><p>上传解压：unzip elasticsearch-analysis-ik-7.8.0.zip -d ik-analyzer</p></li><li><p>上传到es容器：docker cp .&#x2F;ik-analyzer a24eb9941759:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins</p></li><li><p>重启es：docker restart a24eb9941759</p></li></ol><p>a24eb9941759：表示容器ID 运行时，需要改成自己的容器ID</p><h3 id="10-安装kibana"><a href="#10-安装kibana" class="headerlink" title="10 安装kibana"></a>10 安装kibana</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.8.0</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name kibana --restart=always -e ELASTICSEARCH_URL=http://192.168.112.165:9200 -p 5601:5601 -d kibana:7.8.0</span><br></pre></td></tr></table></figure><p>进入容器修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 1e12f8dd3efd /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line"></span><br><span class="line">vi kibana.yml</span><br><span class="line"></span><br><span class="line">elasticsearch.hosts: [ &quot;http://192.168.200.129:9200&quot; ]</span><br><span class="line"></span><br><span class="line">docker restart 1dc0f78d78ad 重启kibana ！</span><br></pre></td></tr></table></figure><p>测试：安装分词词库是否可以使用！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /.kibana/_analyze</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> &quot;text&quot;: &quot;我是中国人&quot;,</span><br><span class="line"></span><br><span class="line"> &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11安装zipkin"><a href="#11安装zipkin" class="headerlink" title="11安装zipkin"></a>11安装zipkin</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull openzipkin/zipkin</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name zipkin --restart=always -d -p 9411:9411 openzipkin/zipkin </span><br></pre></td></tr></table></figure><h3 id="12安装minio"><a href="#12安装minio" class="headerlink" title="12安装minio"></a>12安装minio</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \ -p 9000:9000 \ -p 9001:9001 \ --name minio \ -d --restart=always \ -e &quot;MINIO_ROOT_USER=admin&quot; \ -e &quot;MINIO_ROOT_PASSWORD=admin123456&quot; \ -v /home/data:/data \ -v /home/config:/root/.minio \ minio/minio server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://ip:9000/minio/login%EF%BC%8C">http://IP:9000/minio/login，</a></p><h3 id="13-安装logstash"><a href="#13-安装logstash" class="headerlink" title="13 安装logstash"></a>13 安装logstash</h3><p>第一步：拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull logstash:7.8.0</span><br></pre></td></tr></table></figure><p>第二步：启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name logstash -p 5044:5044 --restart=always --link elasticsearch:es -v /mydata/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf -d logstash:7.8.0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--net root_default \</span><br></pre></td></tr></table></figure><table><thead><tr><th># 需要提前在linux服务器上环境 &#x2F;mydata&#x2F;logstash&#x2F;logstash.conflogstash.confinput { tcp {mode &#x3D;&gt; “server”host &#x3D;&gt; “0.0.0.0”port &#x3D;&gt; 5044codec &#x3D;&gt; json_lines }}filter{ }output { elasticsearch {hosts &#x3D;&gt; “192.168.112.165:9200”index &#x3D;&gt; “gmall-%{+YYYY.MM.dd}” }}</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>停止所有的容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>删除所有的容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>#删除所有的镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><p>问题：</p><p>Docker容器做端口映射报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint lamp3 (46b7917c940f7358948e55ec2df69a4dec2c6c7071b002bd374e8dbf0d40022c): (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 86 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain/target/match by that name.</span><br></pre></td></tr></table></figure><p>解决方法</p><p>docker服务启动时定义的自定义链DOCKER被清除</p><p>重启即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E6%8A%80%E6%9C%AF/">技术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/Java/">Java</category>
      
      
      <comments>https://jhcgnb.cn/posts/d594835b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>多边形</title>
      <link>https://jhcgnb.cn/posts/undefined/</link>
      <guid>https://jhcgnb.cn/posts/undefined/</guid>
      <pubDate>Mon, 08 May 2023 13:28:12 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;Voronoi-多边形&quot;&gt;&lt;a href=&quot;#Voronoi-多边形&quot; class=&quot;headerlink&quot; title=&quot;Voronoi 多边形&quot;&gt;&lt;/a&gt;Voronoi 多边形&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://rx6zk4j2b.hn-bkt.</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Voronoi-多边形"><a href="#Voronoi-多边形" class="headerlink" title="Voronoi 多边形"></a>Voronoi 多边形</h3><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230708212920053.png" alt="image-20230708212920053"></p><p>Voronoi 多边形，也称为 Voronoi 图或 Voronoi 分割，是一种空间分析和几何计算方法，用于将平面或空间划分为不同区域，每个区域都与给定一组点最近邻。这些区域被称为 Voronoi 多边形或 Voronoi 区域，每个多边形由与其对应的点作为最近邻点。</p><p>Voronoi 多边形的生成过程基于以下原则：给定一组点，每个点的 Voronoi 区域包含所有离该点最近的点，并且这些点之间的边界形成多边形。Voronoi 多边形的边界由平分相邻点之间的直线或曲线段组成，这些直线或曲线段是两个点之间的等距离线，也称为 Voronoi 边。因此，Voronoi 多边形的边界是相邻点之间的中垂线。</p><p>Voronoi 多边形在各种领域中有广泛应用，包括计算机图形学、计算机视觉、地理信息系统（GIS）、模式识别等。以下是一些应用 Voronoi 多边形的示例：</p><ol><li><p>空间分析：Voronoi 多边形可用于将地理空间划分为不同的区域，每个区域都由最近邻点决定。这在地理学、城市规划和环境分析中具有重要作用，可以用于确定服务设施的服务范围、确定地理区域的边界等。</p></li><li><p>面积计算：通过计算 Voronoi 多边形的面积，可以了解每个点的影响范围或区域的大小。这在生态学、资源管理和人口统计学中很有用。</p></li><li><p>最近邻搜索：Voronoi 多边形可用于确定给定点的最近邻点。这在图像处理、模式识别和计算机视觉中经常使用，例如图像中的特征匹配、对象识别等。</p></li><li><p>网格生成：Voronoi 多边形可以用作生成网格的方法之一。通过将点集表示为 Voronoi 图，可以生成规则且适应性良好的网格，这在数值计算和有限元分析中很有用。</p></li></ol><p>总之，Voronoi 多边形是一种强大的几何计算工具，可用于空间分析、最近邻搜索、面积计算和网格生成等应用领域。它提供了一种有效的方法来划分空间并了解点之间的关系，为许多问题的解决提供了有力支持。</p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E5%AD%A6%E6%9C%AF/">学术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/">计算机图形学</category>
      
      
      <comments>https://jhcgnb.cn/posts/undefined/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>convex</title>
      <link>https://jhcgnb.cn/posts/e911cef5/</link>
      <guid>https://jhcgnb.cn/posts/e911cef5/</guid>
      <pubDate>Sat, 08 Apr 2023 13:26:15 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230708212656757.png&quot; alt=&quot;image-20230708212656757&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;平面地图综合中的conve</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230708212656757.png" alt="image-20230708212656757"></p><h3 id="平面地图综合中的convex-hull-差分组合"><a href="#平面地图综合中的convex-hull-差分组合" class="headerlink" title="平面地图综合中的convex hull+差分组合"></a>平面地图综合中的convex hull+差分组合</h3><p>平面地图综合中的 “convex hull + 差分组合” 是一种常用的地理信息处理方法，用于合并多个重叠的平面地图数据集，以生成一个较大范围的一致地图。</p><p>首先，让我们解释一下 “convex hull” 和 “差分组合” 的含义：</p><ol><li><p>Convex Hull（凸包）：凸包是一个几何概念，用于描述一个点集的最小凸多边形。对于给定的点集，凸包是包围这些点的最小凸形状，即没有凹陷的形状。在地图综合中，凸包可以用于找到每个地图数据集的边界。</p></li><li><p>差分组合：差分组合是指将两个或多个数据集进行差分操作，以便将它们合并成一个单一的数据集。在地图综合中，差分组合用于合并多个地图数据集，消除重叠和冗余部分。</p></li></ol><p>现在我们来详细介绍 “convex hull + 差分组合” 的过程：</p><ol><li><p>Convex Hull（凸包）：对于每个地图数据集，首先计算该数据集中所有点的凸包。这可以使用凸包算法，例如Graham扫描算法或Jarvis步进算法。凸包的边界定义了该数据集的外围形状。</p></li><li><p>差分操作：通过对每个地图数据集的凸包进行差分操作，可以消除重叠和冗余的部分。差分操作可以通过将边界相交的部分进行裁剪来实现，从而确保每个数据集的边界只包含在该数据集内的部分。</p></li><li><p>组合数据集：将经过差分操作后的每个数据集的边界进行组合，以生成一个新的、一致的地图数据集。这可以通过将每个数据集的边界多边形进行合并或拼接来实现。最终的合并结果将是一个不重叠且连续的边界，代表了整个地图范围。</p></li></ol><p>这种 “convex hull + 差分组合” 的方法在平面地图综合中很有用，因为它能够合并多个重叠的地图数据集，同时消除重叠和冗余的部分。通过计算凸包和执行差分操作，可以获得一个一致且完整的地图，而不会丢失任何细节或引入不一致的边界。</p><p>需要注意的是，实际的实现可能会涉及更复杂的步骤和算法，具体取决于地图数据的类型和处理需求。此外，该方法还可能需要处理边界相交的情况，以确保生成的地图数据集</p><p>是连续且完整的。因此，在实际应用中，可能需要考虑处理重叠、边界修复和边界连接等问题，以获得高质量的地图综合结果。</p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E5%AD%A6%E6%9C%AF/">学术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/">计算机图形学</category>
      
      
      <comments>https://jhcgnb.cn/posts/e911cef5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>八叉树结构</title>
      <link>https://jhcgnb.cn/posts/f4dabd3f/</link>
      <guid>https://jhcgnb.cn/posts/f4dabd3f/</guid>
      <pubDate>Sat, 08 Apr 2023 13:12:55 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;八叉树结构&quot;&gt;&lt;a href=&quot;#八叉树结构&quot; class=&quot;headerlink&quot; title=&quot;八叉树结构&quot;&gt;&lt;/a&gt;八叉树结构&lt;/h3&gt;&lt;p&gt;八叉树（Octree）是一种常用的树型数据结构，它是二叉树在三维空间中的扩展。八叉树被广泛应用于计算机图形学、空间分</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="八叉树结构"><a href="#八叉树结构" class="headerlink" title="八叉树结构"></a>八叉树结构</h3><p>八叉树（Octree）是一种常用的树型数据结构，它是二叉树在三维空间中的扩展。八叉树被广泛应用于计算机图形学、空间分区和体积渲染等领域，用于高效地表示和处理三维空间的数据。</p><p>八叉树的基本思想是将三维空间递归地划分为八个等大小的子空间，每个子空间称为一个八叉树节点（Octant）。这种划分方式类似于将立方体分成八个等大小的小立方体。每个节点可以有三种可能的状态：</p><ol><li>叶节点（Leaf Node）：表示当前空间内存在数据或对象，不再继续划分。</li><li>空节点（Empty Node）：表示当前空间内不存在数据或对象，不再继续划分。</li><li>分支节点（Branch Node）：表示当前空间内可能存在数据或对象，需要进一步划分。</li></ol><p>八叉树的构建过程从一个包含所有数据的根节点开始，根据数据的分布情况，逐层划分空间直到满足停止条件。停止条件可以是树的深度达到预定的最大深度，或者节点内的数据数量达到某个阈值。</p><p>八叉树的用法主要有以下几个方面：</p><ol><li><p>空间分区：八叉树可以将三维空间划分为多个小空间，用于高效地管理和查询空间中的数据。在计算机图形学中，八叉树常被用来表示场景中的物体，以便进行快速的碰撞检测和可视化剔除。</p></li><li><p>数据压缩：八叉树可以用来压缩表示稀疏的三维数据。对于只在部分空间中存在数据的情况，八叉树可以有效地存储和表示这些数据，减少存储空间和访问成本。</p></li><li><p>体积渲染：在体积渲染（Volume Rendering）中，八叉树被广泛应用于表示和处理体数据。通过将体数据划分为八叉树节点，可以高效地实现体积数据的可视化和交互式浏览。</p></li><li><p>点云处理：对于三维点云数据，八叉树可以用于加速点云的搜索和查询操作。通过将点云数据划分为八叉树节点，可以快速地找到与给定查询点最近的点或区域。</p></li></ol><p>总的来说，八叉树是一种灵活且高效的数据结构，适用于处理和</p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E5%AD%A6%E6%9C%AF/">学术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/">计算机图形学</category>
      
      
      <comments>https://jhcgnb.cn/posts/f4dabd3f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前馈神经网路</title>
      <link>https://jhcgnb.cn/posts/169d769d/</link>
      <guid>https://jhcgnb.cn/posts/169d769d/</guid>
      <pubDate>Thu, 09 Mar 2023 13:01:44 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前馈神经网路&quot;&gt;&lt;a href=&quot;#前馈神经网路&quot; class=&quot;headerlink&quot; title=&quot;前馈神经网路&quot;&gt;&lt;/a&gt;前馈神经网路&lt;/h1&gt;&lt;h2 id=&quot;1、简单介绍&quot;&gt;&lt;a href=&quot;#1、简单介绍&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前馈神经网路"><a href="#前馈神经网路" class="headerlink" title="前馈神经网路"></a>前馈神经网路</h1><h2 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h2><p><strong>前馈神经网络（Feedforward Neural Network，简称FNN）</strong>是一种基本的神经网络模型，它最早由美国心理学家Rosenblatt在1958年提出，是最早的一种神经网络模型。FNN的每个神经元都是单向连接的，信号只能从输入层流向输出层，不存在反馈（recurrent）的过程，因此也被称为“无记忆神经网络”。</p><p>FNN由输入层、隐藏层和输出层构成，其中输入层接收外部输入，输出层输出结果，而隐藏层则负责处理输入层的信息，提取出特征并将其传递给输出层。隐藏层通常包含多个神经元，每个神经元都连接着上一层的所有神经元和下一层的所有神经元。FNN的输出是根据输入与每个神经元之间的连接权值进行计算得出的。</p><p>FNN的训练过程通常是基于反向传播算法（Back Propagation，简称BP算法），该算法利用梯度下降法对网络参数进行调整，使得网络的输出结果能够逐渐逼近期望的输出结果。BP算法的基本思想是将误差逐层反向传播，并根据误差值对网络参数进行调整，以达到误差最小化的目的。在实际应用中，常常需要对神经网络进行大量的训练，以提高网络的泛化能力。</p><p>FNN在模式识别、数据挖掘、自然语言处理等领域中有广泛的应用，它能够有效地处理多维度、非线性和复杂的数据，具有良好的分类和预测性能。同时，FNN也具有一定的适应性，能够适应不同的数据类型和数据规模，并且具有良好的可扩展性，可以通过增加神经元和层数来提高网络的性能。</p><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2><p>目标：近似一些未知的理想函数</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160313002.png" alt="image-20230325160313002"></p><p>理想分类器：<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160616559.png" alt="image-20230325160616559"></p><p>前馈网络：定义映射：<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160644995.png" alt="image-20230325160644995"></p><p>从可用的样本中学习参数<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325160727626.png" alt="image-20230325160727626"></p><p>获得f*地较好的近似</p><p>信息流从输入开始贵，经过中间计算（即函数映射），生成类别</p><p>没有反馈连接（循环网络）</p><h2 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h2><p>函数f是许多不同函数的组合，例如：<img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325161151241.png" alt="image-20230325161151241"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325161207536.png" alt="image-20230325161207536"></p><ul><li><p><input checked="" disabled="" type="checkbox"> 函数结构可以用有向无环图来描述（因此称为前馈网络）；</p></li><li><p><input checked="" disabled="" type="checkbox"> f（1）是第一层f（2）是第二层，以此类推；</p></li><li><p><input checked="" disabled="" type="checkbox"> 深度是函数组合链中最大的i</p></li><li><p><input checked="" disabled="" type="checkbox"> 最后一层称为输出层</p></li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325202045174.png" alt="image-20230325202045174"></p><h2 id="4、线性模型"><a href="#4、线性模型" class="headerlink" title="4、线性模型"></a>4、线性模型</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230325202418699.png" alt="image-20230325202418699"></p><h2 id="5、设计决策"><a href="#5、设计决策" class="headerlink" title="5、设计决策"></a>5、设计决策</h2><p>1、需要选择优化器、损失函数和输出形式</p><p>2、选择激活函数</p><p>3、机构设计（网络层数等）</p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E5%AD%A6%E6%9C%AF/">学术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      <comments>https://jhcgnb.cn/posts/169d769d/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>反向传播算法</title>
      <link>https://jhcgnb.cn/posts/437097cd/</link>
      <guid>https://jhcgnb.cn/posts/437097cd/</guid>
      <pubDate>Wed, 08 Mar 2023 12:55:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;反向传播算法&quot;&gt;&lt;a href=&quot;#反向传播算法&quot; class=&quot;headerlink&quot; title=&quot;反向传播算法&quot;&gt;&lt;/a&gt;反向传播算法&lt;/h1&gt;&lt;h2 id=&quot;1、介绍&quot;&gt;&lt;a href=&quot;#1、介绍&quot; class=&quot;headerlink&quot; title=&quot;1</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>反向传播算法是一种用于训练人工神经网络的优化算法。它利用梯度下降法来最小化神经网络的损失函数，并更新网络参数以提高模型的准确性。下面是反向传播算法的详细介绍。</p><p>反向传播算法的基本原理是利用链式法则（chain rule）来计算损失函数相对于每个网络参数的梯度。该算法从输出层开始，计算每个参数的梯度，并向后逐层传播，直到达到输入层。在每一层中，算法通过将该层的梯度与下一层的梯度相乘来计算该层的梯度。这个过程反向传播了误差，因此称为反向传播算法。</p><p>反向传播算法的步骤如下：</p><p>前向传播：对于给定的输入样本，计算神经网络的输出结果。</p><p>计算误差：将神经网络的输出结果与真实结果进行比较，并计算误差。误差通常使用损失函数（例如均方误差）来表示。</p><p>反向传播误差：从输出层开始，计算每个参数的梯度，并向后逐层传播，直到达到输入层。</p><p>更新参数：使用梯度下降法来更新神经网络的参数，以最小化损失函数。梯度下降法的目标是沿着梯度的相反方向更新参数，以使损失函数最小化。</p><p>重复步骤1-4，直到达到停止条件，例如达到最大迭代次数或达到期望的训练误差。</p><p>反向传播算法的优点是它可以处理复杂的非线性模型，并且可以使用梯度下降法快速优化模型参数。然而，该算法也存在一些缺点，例如容易陷入局部最优解，对初始权重值和学习率等参数敏感，以及可能存在梯度消失或爆炸的问题。</p><p>为了克服这些问题，研究人员已经提出了许多改进的反向传播算法，例如随机梯度下降法（SGD）、动量优化法（Momentum）、自适应学习率优化法（Adagrad、Adadelta、Adam等）等。这些算法使得神经网络的训练更加稳定和高效。</p><h2 id="2、如何学习权值"><a href="#2、如何学习权值" class="headerlink" title="2、如何学习权值"></a>2、如何学习权值</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326142148946.png" alt="image-20230326142148946"></p><p>1、初步想法：随机扰动一个权重，看看它是否提高了性能，而后保存更改</p><p>2、非常低效：对于一个权重的改变，需要在样本集上进行多次传递</p><p>3、其他想法：同时扰动所有权重，并将性能的提高与权重的变化联系起来</p><p>4、非常难以实现</p><p>5、所以：只扰动激活值（因为他门数量较少）但同样低效</p><h2 id="3、反向传播"><a href="#3、反向传播" class="headerlink" title="3、反向传播"></a>3、反向传播</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326142734973.png" alt="image-20230326142734973"></p><p>1、前向传播：接受输入x，通过中间阶段，获得输出y</p><p>2、训练结算：利用y计算标量损失</p><p>3、反向传播允许信息从损失函数反向流动来计算梯度</p><p>4、从训练数据来看，我们不知道隐藏的单元效果</p><p>5、但是，当我们改版一个隐藏的激活时，我们可以得到误差传播的速度</p><p>6、使用误差导数，也称之为hidden activites</p><p>7、每个隐藏的单元可以影响许多输出单元</p><p>8、单独的误差影响-&gt;合并这些影响</p><p>9、可以有效地计算隐藏单元的误差导数（一旦我们有了隐藏激活的误差导致，就很容易得到权重的误差导数）</p><h2 id="4、示例"><a href="#4、示例" class="headerlink" title="4、示例"></a>4、示例</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326143902055.png" alt="image-20230326143902055"></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326144435509.png" alt="image-20230326144435509"></p><h2 id="5、多维输出"><a href="#5、多维输出" class="headerlink" title="5、多维输出"></a>5、多维输出</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326145051267.png" alt="image-20230326145051267"></p><h2 id="6、实践"><a href="#6、实践" class="headerlink" title="6、实践"></a>6、实践</h2><ol><li>由上面的推导过程可以看到，反向传播就i是不断地利用求导的链式法则进行展开的过程；</li><li>这样的过程并不复杂，但是实际网络规模个很大的情况下非常繁琐，需要细心操作</li><li>常用的深度学习框架（Pytorch、Tensorflow）中均不需要我们手动编码进行反向传播</li><li>只要我们将前向传播的Tensor流动路径定义清楚，框架会自动帮助我们计算梯度并反传更新权值；</li><li>我们只需要关心损失函数的定义，网络框架的搭建等等更加宏观的内容</li><li>需要保证Tensor流图中的每一个Tensor均可以进行反向传播（例如Pytorch中需要关注requires——grade是否为true）</li></ol><h2 id="7、随机梯度下降"><a href="#7、随机梯度下降" class="headerlink" title="7、随机梯度下降"></a>7、随机梯度下降</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326150031055.png" alt="image-20230326150031055"></p><h2 id="8、Mini-batch随机梯度下降"><a href="#8、Mini-batch随机梯度下降" class="headerlink" title="8、Mini-batch随机梯度下降"></a>8、Mini-batch随机梯度下降</h2><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/%E5%8D%9A%E5%AE%A2/image-20230326150113608.png" alt="image-20230326150113608"></p>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E5%AD%A6%E6%9C%AF/">学术</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/">深度学习</category>
      
      
      <comments>https://jhcgnb.cn/posts/437097cd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据结构与算法2</title>
      <link>https://jhcgnb.cn/posts/ba945d0d/</link>
      <guid>https://jhcgnb.cn/posts/ba945d0d/</guid>
      <pubDate>Sat, 18 Feb 2023 07:28:26 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一-基础算法&quot;&gt;&lt;a href=&quot;#一-基础算法&quot; class=&quot;headerlink&quot; title=&quot;一. 基础算法&quot;&gt;&lt;/a&gt;一. 基础算法&lt;/h1&gt;&lt;h2 id=&quot;1-常见查找算法&quot;&gt;&lt;a href=&quot;#1-常见查找算法&quot; class=&quot;headerlink</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一-基础算法"><a href="#一-基础算法" class="headerlink" title="一. 基础算法"></a>一. 基础算法</h1><h2 id="1-常见查找算法"><a href="#1-常见查找算法" class="headerlink" title="1. 常见查找算法"></a>1. 常见查找算法</h2><p>查找算法是一种在数据集中寻找特定数据项的方法。通常，数据集是在计算机程序中存储的，例如数组、链表或散列表。在编写程序时，查找算法是非常重要的，它有助于快速找到所需的数据。在本文中，我们将介绍一些基本的查找算法及其特点。</p><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><p>线性查找也称为顺序查找，是一种最简单的查找算法。在这种算法中，我们从数据集的开头开始，逐个比较每个数据项，以寻找要查找的数据。如果我们找到了目标数据，查找过程就结束了。如果我们到达数据集的末尾，仍然找不到目标数据，则可以认为它不存在于数据集中。</p><p>线性查找的时间复杂度是O(n)，其中n是数据集的大小。因此，它在大型数据集中可能会很慢。然而，在小型数据集中，它仍然是一种非常有用的算法。</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找也称为折半查找，是一种更快速的查找算法。但前提是，数据集必须已经排序。在二分查找中，我们取数据集的中间值，然后将目标与中间值进行比较。如果目标小于中间值，则在左侧子集中继续查找；如果目标大于中间值，则在右侧子集中继续查找。每次比较都会缩小要搜索的数据集的大小。</p><p>二分查找的时间复杂度是O(log n)，其中n是数据集的大小。这种算法在大型数据集中非常有效，但在小型数据集中可能并不是最快的选择。</p><h3 id="哈希表查找"><a href="#哈希表查找" class="headerlink" title="哈希表查找"></a>哈希表查找</h3><p>哈希表查找也称为散列表查找，是另一种常见的查找算法。它利用哈希函数将数据项映射到散列表中的位置。在查找过程中，我们只需通过哈希函数计算目标数据的位置，然后检查该位置是否包含目标数据。</p><p>哈希表查找的时间复杂度是O(1)。这使得它成为大型数据集中最快的查找算法之一。但是，哈希表查找的效率取决于哈希函数的质量。如果两个数据项映射到相同的位置，就会发生哈希冲突，这可能会导致性能下降。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在编写程序时，我们需要选择适合数据集大小和其他要求的最佳查找算法。例如，如果数据集很小，则线性查找可能是最快的选择；如果数据集已经排序，则二分查找是非常有用的。然而，在大型数据集中，哈希表查找通常是最好的选择。了解不同类型的查找算法及其特点可以帮助我们在编写程序时做出明智的选择。</p><h2 id="2-高效查找相关数据结构"><a href="#2-高效查找相关数据结构" class="headerlink" title="2. 高效查找相关数据结构"></a>2. 高效查找相关数据结构</h2><p>不管是之前学过的数组、链表、队列、还是栈，这些线性结构中，如果想在其中查找一个元素，效率是比较慢的，只有$O(N)$，因此如果你的需求是实现数据的快速查找，那么就需要<strong>新的数据结构</strong>支持。</p><p>还记得最先介绍的那个二分查找算法吗？它的查找效率能够达到 $O(\log{N})$，是不是还不错？不过呢，它需要对数组事先排好序，而排序的成本是比较高的。那么有没有一个折中的办法呢？有，那就是接下来要给大家介绍的<strong>二叉搜索树</strong>，它插入元素后，自然就是排好序的，接下来的查询也自然而然可以应用二分查找算法进行高效搜索。</p><h3 id="1-二叉搜索树"><a href="#1-二叉搜索树" class="headerlink" title="1) 二叉搜索树"></a>1) 二叉搜索树</h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><blockquote><p>二叉搜索树最早是由Bernoulli兄弟在18世纪中提出的，但是真正推广和应用该数据结构的是1960年代的D.L. Gries。他的著作《The Science of Programming》中详细介绍了二叉搜索树的实现和应用。</p><p>在计算机科学的发展中，二叉搜索树成为了一种非常基础的数据结构，被广泛应用在各种领域，包括搜索、排序、数据库索引等。随着计算机算力的提升和对数据结构的深入研究，二叉搜索树也不断被优化和扩展，例如AVL树、红黑树等。</p></blockquote><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>二叉搜索树（也称二叉排序树）是符合下面特征的二叉树：</p><ol><li>树节点增加 key 属性，用来比较谁大谁小，key 不可以重复</li><li>对于任意一个树节点，它的 key 比左子树的 key 都大，同时也比右子树的 key 都小，例如下图所示</li></ol><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228090412983.png" alt="image-20230228090412983"></p><p>轻易看出要查找 7 （从根开始）自然就可应用二分查找算法，只需三次比较</p><ul><li>与 4 比，较之大，向右找</li><li>与 6 比，较之大，继续向右找</li><li>与 7 比，找到</li></ul><p>查找的时间复杂度与<strong>树高</strong>相关，插入、删除也是如此。</p><ul><li>如果这棵树长得还不赖（左右平衡）上图，那么时间复杂度均是 $O(\log{N})$</li><li>当然，这棵树如果长得丑（左右高度相差过大）下图，那么这时是最糟的情况，时间复杂度是 $O(N)$</li></ul><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228091405293.png" alt="image-20230228091405293"></p><blockquote><p>注：</p><ul><li>二叉搜索树 - 英文 binary search tree，简称 BST</li><li>二叉排序树 - 英文 binary ordered tree 或 binary sorted tree</li></ul></blockquote><h4 id="定义节点"><a href="#定义节点" class="headerlink" title="定义节点"></a>定义节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BSTNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> key; <span class="comment">// 若希望任意类型作为 key, 则后续可以将其设计为 Comparable 接口</span></span><br><span class="line">    Object value;</span><br><span class="line">    BSTNode left;</span><br><span class="line">    BSTNode right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(<span class="type">int</span> key, Object value, BSTNode left, BSTNode right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doGet(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">doGet</span><span class="params">(BSTNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 没找到</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(node.left, key); <span class="comment">// 向左找</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(node.right, key); <span class="comment">// 向右找</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node.value; <span class="comment">// 找到了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h4><p>如果希望让除 int 外更多的类型能够作为 key，一种方式是 key 必须实现 Comparable 接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BSTTree2</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BSTNode</span>&lt;T&gt; &#123;</span><br><span class="line">        T key; <span class="comment">// 若希望任意类型作为 key, 则后续可以将其设计为 Comparable 接口</span></span><br><span class="line">        Object value;</span><br><span class="line">        BSTNode&lt;T&gt; left;</span><br><span class="line">        BSTNode&lt;T&gt; right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(T key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(T key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BSTNode</span><span class="params">(T key, Object value, BSTNode&lt;T&gt; left, BSTNode&lt;T&gt; right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BSTNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">doGet</span><span class="params">(BSTNode&lt;T&gt; node, T key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> node.key.compareTo(key);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doGet(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> doGet(node.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种做法不要求 key 实现 Comparable 接口，而是在构造 Tree 时把比较规则作为 Comparator 传入，将来比较 key 大小时都调用此 Comparator 进行比较，这种做法可以参考 Java 中的 java.util.TreeMap</p><h4 id="最小"><a href="#最小" class="headerlink" title="最小"></a>最小</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doMin(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doMin</span><span class="params">(BSTNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左边已走到头</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doMin(node.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="comment">// 左边未走到头</span></span><br><span class="line">    <span class="keyword">while</span> (p.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最大"><a href="#最大" class="headerlink" title="最大"></a>最大</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">max</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doMax(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doMax</span><span class="params">(BSTNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 右边已走到头</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doMin(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">max</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="comment">// 右边未走到头</span></span><br><span class="line">    <span class="keyword">while</span> (p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    root = doPut(root, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BSTNode <span class="title function_">doPut</span><span class="params">(BSTNode node, <span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doPut(node.left, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        node.right = doPut(node.right, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若找到 key，走 else 更新找到节点的值</li><li>若没找到 key，走第一个 if，创建并返回新节点<ul><li>返回的新节点，作为上次递归时 node 的左孩子或右孩子</li><li>缺点是，会有很多不必要的赋值操作</li></ul></li></ul><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        parent = node;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 1. key 存在则更新</span></span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. key 不存在则新增</span></span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; parent.key) &#123;</span><br><span class="line">        parent.left = <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = <span class="keyword">new</span> <span class="title class_">BSTNode</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前驱后继"><a href="#前驱后继" class="headerlink" title="前驱后继"></a>前驱后继</h4><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228144422128.png" alt="image-20230228144422128"></p><p>一个节点的前驱（前任）节点是指比它小的节点中，最大的那个</p><p>一个节点的后继（后任）节点是指比它大的节点中，最小的那个</p><p>例如上图中</p><ul><li>1 没有前驱，后继是 2</li><li>2 前驱是 1，后继是 3</li><li>3 前驱是 2，后继是 4</li><li>…</li></ul><p>简单的办法是中序遍历，即可获得排序结果，此时很容易找到前驱后继</p><p>要效率更高，需要研究一下规律，<strong>找前驱</strong>分成 2 种情况：</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228144422128.png" alt="image-20230228144422128"></p><ol><li>节点有左子树，此时前驱节点就是左子树的最大值，图中属于这种情况的有<ul><li>2 的前驱是1</li><li>4 的前驱是 3</li><li>6 的前驱是 5</li><li>7 的前驱是 6</li></ul></li><li>节点没有左子树，若离它最近的祖先自从左而来，此祖先即为前驱，如<ul><li>3 的祖先 2 自左而来，前驱 2</li><li>5 的祖先 4 自左而来，前驱 4</li><li>8 的祖先 7 自左而来，前驱 7</li><li>1 没有这样的祖先，前驱 null</li></ul></li></ol><p><strong>找后继</strong>也分成 2 种情况</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230228152715296.png" alt="image-20230228152715296"></p><ol><li>节点有右子树，此时后继节点即为右子树的最小值，如<ul><li>2 的后继 3</li><li>3 的后继 4</li><li>5 的后继 6</li><li>7 的后继 8</li></ul></li><li>节点没有右子树，若离它最近的祖先自从右而来，此祖先即为后继，如<ul><li>1 的祖先 2 自右而来，后继 2</li><li>4 的祖先 5 自右而来，后继 5</li><li>6 的祖先 7 自右而来，后继 7</li><li>8 没有这样的祖先，后继 null</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">predecessor</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">ancestorFromLeft</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">            ancestorFromLeft = p;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况1 - 有左孩子</span></span><br><span class="line">    <span class="keyword">if</span> (p.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> max(p.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况2 - 有祖先自左而来</span></span><br><span class="line">    <span class="keyword">return</span> ancestorFromLeft != <span class="literal">null</span> ? ancestorFromLeft.value : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">successor</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">ancestorFromRight</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">            ancestorFromRight = p;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况1 - 有右孩子</span></span><br><span class="line">    <span class="keyword">if</span> (p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> min(p.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况2 - 有祖先自右而来</span></span><br><span class="line">    <span class="keyword">return</span> ancestorFromRight != <span class="literal">null</span> ? ancestorFromRight.value : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>要删除某节点（称为 D），必须先找到被删除节点的父节点，这里称为 Parent</p><ol><li>删除节点没有左孩子，将右孩子托孤给 Parent</li><li>删除节点没有右孩子，将左孩子托孤给 Parent</li><li>删除节点左右孩子都没有，已经被涵盖在情况1、情况2 当中，把 null 托孤给 Parent</li><li>删除节点左右孩子都有，可以将它的后继节点（称为 S）托孤给 Parent，设 S 的父亲为 SP，又分两种情况<ol><li>SP 就是被删除节点，此时 D 与 S 紧邻，只需将 S 托孤给 Parent</li><li>SP 不是被删除节点，此时 D 与 S 不相邻，此时需要将 S 的后代托孤给 SP，再将 S 托孤给 Parent</li></ol></li></ol><p><strong>非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;根据关键字删除&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 关键字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 被删除关键字对应值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">            parent = p;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">            parent = p;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="keyword">if</span> (p.left == <span class="literal">null</span>) &#123;</span><br><span class="line">        shift(parent, p, p.right); <span class="comment">// 情况1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        shift(parent, p, p.left); <span class="comment">// 情况2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 情况4</span></span><br><span class="line">        <span class="comment">// 4.1 被删除节点找后继</span></span><br><span class="line">        <span class="type">BSTNode</span> <span class="variable">s</span> <span class="operator">=</span> p.right;</span><br><span class="line">        <span class="type">BSTNode</span> <span class="variable">sParent</span> <span class="operator">=</span> p; <span class="comment">// 后继父亲</span></span><br><span class="line">        <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            sParent = s;</span><br><span class="line">            s = s.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.2 删除和后继不相邻, 处理后继的后事</span></span><br><span class="line">        <span class="keyword">if</span> (sParent != p) &#123;                </span><br><span class="line">            shift(sParent, s, s.right); <span class="comment">// 不可能有左孩子</span></span><br><span class="line">            s.right = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.3 后继取代被删除节点</span></span><br><span class="line">        shift(parent, p, s);</span><br><span class="line">        s.left = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 托孤方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parent  被删除节点的父亲</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deleted 被删除节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> child   被顶上去的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 只考虑让 n1父亲的左或右孩子指向 n2, n1自己的左或右孩子并未在方法内改变</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shift</span><span class="params">(BSTNode parent, BSTNode deleted, BSTNode child)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">        root = child;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deleted == parent.left) &#123;</span><br><span class="line">        parent.left = child;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    root = doDelete(root, key, result);</span><br><span class="line">    <span class="keyword">return</span> result.isEmpty() ? <span class="literal">null</span> : result.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BSTNode <span class="title function_">doDelete</span><span class="params">(BSTNode node, <span class="type">int</span> key, ArrayList&lt;Object&gt; result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doDelete(node.left, key, result);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        node.right = doDelete(node.right, key, result);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    result.add(node.value);</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">BSTNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right;</span><br><span class="line">        <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            s = s.left;</span><br><span class="line">        &#125;</span><br><span class="line">        s.right = doDelete(node.right, s.key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        s.left = node.left;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.left != <span class="literal">null</span> ? node.left : node.right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明</p><ol><li><code>ArrayList&lt;Object&gt; result</code> 用来保存被删除节点的值</li><li>第二、第三个 if 对应没找到的情况，继续递归查找和删除，注意后续的 doDelete 返回值代表删剩下的，因此需要更新</li><li>最后一个 return 对应删除节点只有一个孩子的情况，返回那个不为空的孩子，待删节点自己因没有返回而被删除</li><li>第四个 if 对应删除节点有两个孩子的情况，此时需要找到后继节点，并在待删除节点的右子树中删掉后继节点，最后用后继节点替代掉待删除节点返回，别忘了改变后继节点的左右指针</li></ol><h4 id="找小的"><a href="#找小的" class="headerlink" title="找小的"></a>找小的</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">less</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &lt; key) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找大的"><a href="#找大的" class="headerlink" title="找大的"></a>找大的</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">greater</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &gt; key) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这样效率不高，可以用 RNL 遍历</p><blockquote><p>注：</p><ul><li>Pre-order, NLR</li><li>In-order, LNR</li><li>Post-order, LRN</li><li>Reverse pre-order, NRL</li><li>Reverse in-order, RNL</li><li>Reverse post-order, RLN</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">greater</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &gt; key) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找之间"><a href="#找之间" class="headerlink" title="找之间"></a>找之间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">between</span><span class="params">(<span class="type">int</span> key1, <span class="type">int</span> key2)</span> &#123;</span><br><span class="line">    ArrayList&lt;Object&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">BSTNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;BSTNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">BSTNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.key &gt;= key1 &amp;&amp; pop.key &lt;= key2) &#123;</span><br><span class="line">                result.add(pop.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pop.key &gt; key2) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>优点：</p><ol><li>如果每个节点的左子树和右子树的大小差距不超过一，可以保证搜索操作的时间复杂度是 O(log n)，效率高。</li><li>插入、删除结点等操作也比较容易实现，效率也比较高。</li><li>对于有序数据的查询和处理，二叉查找树非常适用，可以使用中序遍历得到有序序列。</li></ol><p>缺点：</p><ol><li>如果输入的数据是有序或者近似有序的，就会出现极度不平衡的情况，可能导致搜索效率下降，时间复杂度退化成O(n)。</li><li>对于频繁地插入、删除操作，需要维护平衡二叉查找树，例如红黑树、AVL 树等，否则搜索效率也会下降。</li><li>对于存在大量重复数据的情况，需要做相应的处理，否则会导致树的深度增加，搜索效率下降。</li><li>对于结点过多的情况，由于树的空间开销较大，可能导致内存消耗过大，不适合对内存要求高的场景。</li></ol><h3 id="2-AVL-树"><a href="#2-AVL-树" class="headerlink" title="2) AVL 树"></a>2) AVL 树</h3><h4 id="历史-1"><a href="#历史-1" class="headerlink" title="历史"></a>历史</h4><blockquote><p>AVL 树是一种自平衡二叉搜索树，由托尔·哈斯特罗姆在 1960 年提出并在 1962 年发表。它的名字来源于发明者的名字：Adelson-Velsky 和 Landis，他们是苏联数学家，于 1962 年发表了一篇论文，详细介绍了 AVL 树的概念和性质。</p><p>在二叉搜索树中，如果插入的元素按照特定的顺序排列，可能会导致树变得非常不平衡，从而降低搜索、插入和删除的效率。为了解决这个问题，AVL 树通过在每个节点中维护一个平衡因子来确保树的平衡。平衡因子是左子树的高度减去右子树的高度。如果平衡因子的绝对值大于等于 2，则通过旋转操作来重新平衡树。</p><p>AVL 树是用于存储有序数据的一种重要数据结构，它是二叉搜索树的一种改进和扩展。它不仅能够提高搜索、插入和删除操作的效率，而且还能够确保树的深度始终保持在 O(log n) 的水平。随着计算机技术的不断发展，AVL 树已经成为了许多高效算法和系统中必不可少的一种基础数据结构。</p></blockquote><p>前面介绍过，如果一棵二叉搜索树长的不平衡，那么查询的效率会受到影响，如下图</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230313090500760.png" alt="image-20230313090500760"></p><p>通过旋转可以让树重新变得平衡，并且不会改变二叉搜索树的性质（即左边仍然小，右边仍然大）</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230313090817485.png" alt="image-20230313090817485"></p><h4 id="如何判断失衡？"><a href="#如何判断失衡？" class="headerlink" title="如何判断失衡？"></a>如何判断失衡？</h4><blockquote><p>如果一个节点的<strong>左右孩子，高度差超过 1</strong>，则此节点失衡，才需要旋转</p></blockquote><h4 id="处理高度"><a href="#处理高度" class="headerlink" title="处理高度"></a>处理高度</h4><p>如何得到节点高度？一种方式之前做过的一道题目：E05. 求二叉树的最大深度（高度），但由于求高度是一个非常频繁的操作，因此将高度作为节点的一个属性，将来新增或删除时及时更新，默认为 1（按力扣说法）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    Object value;</span><br><span class="line">    AVLNode left;</span><br><span class="line">    AVLNode right;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求高度代码</strong></p><p>这里加入了 height 函数方便求节点为 null 时的高度</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node == <span class="literal">null</span> ? <span class="number">0</span> : node.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新高度代码</strong></p><p>将来新增、删除、旋转时，高度都可能发生变化，需要更新。下面是更新高度的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    node.height = Integer.max(height(node.left), height(node.right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="何时触发失衡判断？"><a href="#何时触发失衡判断？" class="headerlink" title="何时触发失衡判断？"></a>何时触发失衡判断？</h4><p>定义平衡因子（balance factor）如下<br>$$<br>平衡因子 &#x3D; 左子树高度 - 右子树高度<br>$$<br>当平衡因子</p><ul><li>bf &#x3D; 0，1，-1 时，表示左右平衡</li><li>bf &gt; 1 时，表示左边太高</li><li>bf &lt; -1 时，表示右边太高</li></ul><p>对应代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bf</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> height(node.left) - height(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当插入新节点，或删除节点时，引起高度变化时，例如</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310153645397.png" alt="image-20230310153645397"></p><p>目前此树平衡，当再插入一个 4 时，节点们的高度都产生了相应的变化，8 节点失衡了</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310153803661.png" alt="image-20230310153803661"></p><p>在比如说，下面这棵树一开始也是平衡的</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154155728.png" alt="image-20230310154155728"></p><p>当删除节点 8 时，节点们的高度都产生了相应的变化，6 节点失衡了</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154232729.png" alt="image-20230310154232729"></p><h4 id="失衡的四种情况"><a href="#失衡的四种情况" class="headerlink" title="失衡的四种情况"></a>失衡的四种情况</h4><p><strong>LL</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154459709.png" alt="image-20230310154459709"></p><ul><li>失衡节点（图中 8 红色）的 bf &gt; 1，即左边更高</li><li>失衡节点的左孩子（图中 6）的 bf &gt;&#x3D; 0 即左孩子这边也是左边更高或等高</li></ul><p><strong>LR</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310154858754.png" alt="image-20230310154858754"></p><ul><li>失衡节点（图中 8）的 bf &gt; 1，即左边更高</li><li>失衡节点的左孩子（图中 6 红色）的 bf &lt; 0 即左孩子这边是右边更高</li></ul><p>对称的还有两种情况</p><p><strong>RL</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310155048187.png" alt="image-20230310155048187"></p><ul><li>失衡节点（图中 3）的 bf &lt;-1，即右边更高</li><li>失衡节点的右孩子（图中 6 红色）的 bf &gt; 0，即右孩子这边左边更高</li></ul><p><strong>RR</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310155347349.png" alt="image-20230310155347349"></p><ul><li>失衡节点（图中 3）的 bf &lt;-1，即右边更高</li><li>失衡节点的右孩子（图中 6 红色）的 bf &lt;&#x3D; 0，即右孩子这边右边更高或等高</li></ul><h4 id="解决失衡"><a href="#解决失衡" class="headerlink" title="解决失衡"></a>解决失衡</h4><p>失衡可以通过树的旋转解决。什么是树的旋转呢？它是在不干扰元素顺序的情况下更改结构，通常用来让树的高度变得平衡。</p><p>观察下面一棵二叉搜索树，可以看到，旋转后，并未改变树的左小右大特性，但根、父、孩子节点都发生了变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    4                                   2</span><br><span class="line">   / \             4 right             / \</span><br><span class="line">  2   5      --------------------&gt;    1   4</span><br><span class="line"> / \         &lt;--------------------       / \</span><br><span class="line">1   3              2 left               3   5</span><br></pre></td></tr></table></figure><p><strong>右旋</strong></p><p>旋转前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310162158692.png" alt="image-20230310162158692"></p><ul><li>红色节点，旧根（失衡节点）</li><li>黄色节点，旧根的左孩子，将来作为新根，旧根是它右孩子</li><li>绿色节点，新根的右孩子，将来要换爹作为旧根的左孩子</li></ul><p>旋转后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310162442932.png" alt="image-20230310162442932"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">rightRotate</span><span class="params">(AVLNode red)</span> &#123;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">yellow</span> <span class="operator">=</span> red.left;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">green</span> <span class="operator">=</span> yellow.right;</span><br><span class="line">    yellow.right = red;</span><br><span class="line">    red.left = green;</span><br><span class="line">    <span class="keyword">return</span> yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>左旋</strong></p><p>旋转前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310162945078.png" alt="image-20230310162945078"></p><ul><li>红色节点，旧根（失衡节点）</li><li>黄色节点，旧根的右孩子，将来作为新根，旧根是它左孩子</li><li>绿色节点，新根的左孩子，将来要换爹作为旧根的右孩子</li></ul><p>旋转后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310163019508.png" alt="image-20230310163019508"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">leftRotate</span><span class="params">(AVLNode red)</span> &#123;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">yellow</span> <span class="operator">=</span> red.right;</span><br><span class="line">    <span class="type">AVLNode</span> <span class="variable">green</span> <span class="operator">=</span> yellow.left;</span><br><span class="line">    yellow.left = red;</span><br><span class="line">    red.right = green;</span><br><span class="line">    <span class="keyword">return</span> yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>左右旋</strong></p><p>指先左旋左子树，再右旋根节点（失衡），这时一次旋转并不能解决失衡</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171424362.png" alt="image-20230310171424362"></p><p>左子树旋转后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171636904.png" alt="image-20230310171636904"></p><p>根右旋前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171821578.png" alt="image-20230310171821578"></p><p>根右旋后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310171903417.png" alt="image-20230310171903417"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">leftRightRotate</span><span class="params">(AVLNode root)</span> &#123;</span><br><span class="line">    root.left = leftRotate(root.left);</span><br><span class="line">    <span class="keyword">return</span> rightRotate(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>右左旋</strong></p><p>指先右旋右子树，再左旋根节点（失衡）</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172212302.png" alt="image-20230310172212302"></p><p>右子树右旋后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172234154.png" alt="image-20230310172234154"></p><p>根左旋前</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172303012.png" alt="image-20230310172303012"></p><p>根左旋后</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230310172317379.png" alt="image-20230310172317379"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">rightLeftRotate</span><span class="params">(AVLNode root)</span> &#123;</span><br><span class="line">    root.right = rightRotate(root.right);</span><br><span class="line">    <span class="keyword">return</span> leftRotate(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断及调整平衡代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">balance</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> bf(node);</span><br><span class="line">    <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rightLeftRotate(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> leftRightRotate(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上四种旋转代码里，都需要更新高度，需要更新的节点是红色、黄色，而绿色节点高度不变</p><h4 id="新增-1"><a href="#新增-1" class="headerlink" title="新增"></a>新增</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    root = doPut(root, key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">doPut</span><span class="params">(AVLNode node, <span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AVLNode</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == node.key) &#123;</span><br><span class="line">        node.value = value;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doPut(node.left, key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.right = doPut(node.right, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    updateHeight(node);</span><br><span class="line">    <span class="keyword">return</span> balance(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    root = doRemove(root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AVLNode <span class="title function_">doRemove</span><span class="params">(AVLNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">        node.left = doRemove(node.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">        node.right = doRemove(node.right, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">AVLNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right;</span><br><span class="line">            <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                s = s.left;</span><br><span class="line">            &#125;</span><br><span class="line">            s.right = doRemove(node.right, s.key);</span><br><span class="line">            s.left = node.left;</span><br><span class="line">            node = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    updateHeight(node);</span><br><span class="line">    <span class="keyword">return</span> balance(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码备份</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AVLNode</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        Object value;</span><br><span class="line">        AVLNode left;</span><br><span class="line">        AVLNode right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AVLNode</span><span class="params">(<span class="type">int</span> key, Object value, AVLNode left, AVLNode right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVLNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">leftRotate</span><span class="params">(AVLNode p)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">r</span> <span class="operator">=</span> p.right;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">b</span> <span class="operator">=</span> r.left;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.right = b;</span><br><span class="line">        updateHeight(p);</span><br><span class="line">        updateHeight(r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        node.height = Integer.max(height(node.left), height(node.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">rightRotate</span><span class="params">(AVLNode r)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">a</span> <span class="operator">=</span> r.left;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">b</span> <span class="operator">=</span> a.right;</span><br><span class="line">        a.right = r;</span><br><span class="line">        r.left = b;</span><br><span class="line">        updateHeight(r);</span><br><span class="line">        updateHeight(a);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">leftRightRotate</span><span class="params">(AVLNode p)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">r</span> <span class="operator">=</span> p.left;</span><br><span class="line">        p.left = leftRotate(r);</span><br><span class="line">        <span class="keyword">return</span> rightRotate(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">rightLeftRotate</span><span class="params">(AVLNode p)</span> &#123;</span><br><span class="line">        <span class="type">AVLNode</span> <span class="variable">r</span> <span class="operator">=</span> p.right;</span><br><span class="line">        p.right = rightRotate(r);</span><br><span class="line">        <span class="keyword">return</span> leftRotate(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node == <span class="literal">null</span> ? <span class="number">0</span> : node.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        root = doRemove(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">doRemove</span><span class="params">(AVLNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node.left = doRemove(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">            node.right = doRemove(node.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">AVLNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right;</span><br><span class="line">                <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    s = s.left;</span><br><span class="line">                &#125;</span><br><span class="line">                s.right = doRemove(node.right, s.key);</span><br><span class="line">                s.left = node.left;</span><br><span class="line">                node = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        updateHeight(node);</span><br><span class="line">        <span class="keyword">return</span> balance(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        root = doPut(root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">doPut</span><span class="params">(AVLNode node, <span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AVLNode</span>(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key == node.key) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node.left = doPut(node.left, key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.right = doPut(node.right, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        updateHeight(node);</span><br><span class="line">        <span class="keyword">return</span> balance(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bf</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height(node.left) - height(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AVLNode <span class="title function_">balance</span><span class="params">(AVLNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bf</span> <span class="operator">=</span> bf(node);</span><br><span class="line">        <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &gt; <span class="number">1</span> &amp;&amp; bf(node.left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightLeftRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> leftRightRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bf &lt; -<span class="number">1</span> &amp;&amp; bf(node.right) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rightRotate(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>AVL树的优点：</p><ol><li>AVL树是一种自平衡树，保证了树的高度平衡，从而保证了树的查询和插入操作的时间复杂度均为O(logn)。</li><li>相比于一般二叉搜索树，AVL树对查询效率的提升更为显著，因为其左右子树高度的差值不会超过1，避免了二叉搜索树退化为链表的情况，使得整棵树的高度更低。</li><li>AVL树的删除操作比较简单，只需要像插入一样旋转即可，在旋转过程中树的平衡性可以得到维护。</li></ol><p>AVL树的缺点：</p><ol><li>AVL树每次插入或删除节点时需要进行旋转操作，这个操作比较耗时，因此在一些应用中不太适用。</li><li>在AVL树进行插入或删除操作时，为保持树的平衡需要不断进行旋转操作，在一些高并发环节和大数据量环境下，这可能会导致多余的写锁导致性能瓶颈。</li><li>AVL树的旋转操作相对较多，因此在一些应用中可能会造成较大的空间浪费。</li></ol><h3 id="3-红黑树"><a href="#3-红黑树" class="headerlink" title="3) 红黑树"></a>3) 红黑树</h3><h4 id="历史-2"><a href="#历史-2" class="headerlink" title="历史"></a>历史</h4><blockquote><p>红黑树是一种自平衡二叉查找树，最早由一位名叫Rudolf Bayer的德国计算机科学家于1972年发明。然而，最初的树形结构不是现在的红黑树，而是一种称为B树的结构，它是一种多叉树，可用于在磁盘上存储大量数据。</p><p>在1980年代早期，计算机科学家Leonard Adleman和Daniel Sleator推广了红黑树，并证明了它的自平衡性和高效性。从那时起，红黑树成为了最流行的自平衡二叉查找树之一，并被广泛应用于许多领域，如编译器、操作系统、数据库等。</p><p>红黑树的名字来源于红色节点和黑色节点的交替出现，它们的颜色是用来维护树的平衡性的关键。它们的颜色具有特殊的意义，黑色节点代表普通节点，而红色节点代表一个新添加的节点，它们必须满足一些特定的规则才能维持树的平衡性。</p></blockquote><p>红黑树也是一种自平衡的二叉搜索树，较之 AVL，插入和删除时旋转次数更少</p><h4 id="红黑树特性"><a href="#红黑树特性" class="headerlink" title="红黑树特性"></a>红黑树特性</h4><ol><li>所有节点都有两种颜色：红:red_circle:、黑:black_circle:</li><li>所有 null 视为黑色:black_circle:</li><li>红色:red_circle:节点不能相邻</li><li>根节点是黑色:black_circle:</li><li>从根到任意一个叶子节点，路径中的黑色:black_circle:节点数一样</li></ol><h4 id="插入情况"><a href="#插入情况" class="headerlink" title="插入情况"></a>插入情况</h4><p>插入节点均视为红色:red_circle:</p><p>case 1：插入节点为根节点，将根节点变黑:black_circle:</p><p>case 2：插入节点的父亲若为黑色:black_circle:，树的红黑性质不变，无需调整</p><p>插入节点的父亲为红色:red_circle:，触发红红相邻</p><p>case 3：叔叔为红色:red_circle:</p><ul><li><p>父亲变为黑色:black_circle:，为了保证黑色平衡，连带的叔叔也变为黑色:black_circle:</p></li><li><p>祖父如果是黑色不变，会造成这颗子树黑色过多，因此祖父节点变为红色:red_circle:</p></li><li><p>祖父如果变成红色，可能会接着触发红红相邻，因此对将祖父进行递归调整</p></li></ul><p>case 4：叔叔为黑色:black_circle:</p><ol><li>父亲为左孩子，插入节点也是左孩子，此时即 LL 不平衡<ul><li>让父亲变黑:black_circle:，为了保证这颗子树黑色不变，将祖父变成红:red_circle:，但叔叔子树少了一个黑色</li><li>祖父右旋，补齐一个黑色给叔叔，父亲旋转上去取代祖父，由于它是黑色，不会再次触发红红相邻</li></ul></li><li>父亲为左孩子，插入节点是右孩子，此时即 LR 不平衡<ul><li>父亲左旋，变成 LL 情况，按 1. 来后续处理</li></ul></li><li>父亲为右孩子，插入节点也是右孩子，此时即 RR 不平衡<ul><li>让父亲变黑:black_circle:，为了保证这颗子树黑色不变，将祖父变成红:red_circle:，但叔叔子树少了一个黑色</li><li>祖父左旋，补齐一个黑色给叔叔，父亲旋转上去取代祖父，由于它是黑色，不会再次触发红红相邻</li></ul></li><li>父亲为右孩子，插入节点是左孩子，此时即 RL 不平衡<ul><li>父亲右旋，变成 RR 情况，按 3. 来后续处理</li></ul></li></ol><h4 id="删除情况"><a href="#删除情况" class="headerlink" title="删除情况"></a>删除情况</h4><p>case0：如果删除节点有两个孩子</p><ul><li>交换删除节点和后继节点的 key，value，递归删除后继节点，直到该节点没有孩子或只剩一个孩子</li></ul><p>如果删除节点没有孩子或只剩一个孩子</p><p>case 1：删的是根节点</p><ul><li>删完了，直接将 root &#x3D; null</li><li>用剩余节点替换了根节点的 key，value，根节点孩子 &#x3D; null，颜色保持黑色:black_circle:不变</li></ul><p>删黑色会失衡，删红色不会失衡，但删黑色有一种简单情况</p><p>case 2：删的是黑:black_circle:，剩下的是红:red_circle:，剩下这个红节点变黑:black_circle:</p><p>删除节点和剩下节点都是黑:black_circle:，触发双黑，双黑意思是，<strong>少了一个黑</strong></p><p>case 3：被调整节点的兄弟为红:red_circle:，此时两个侄子定为黑 :black_circle:</p><ul><li>删除节点是左孩子，父亲左旋</li><li>删除节点是右孩子，父亲右旋</li><li>父亲和兄弟要变色，保证旋转后颜色平衡</li><li>旋转的目的是让黑侄子变为删除节点的黑兄弟，对删除节点再次递归，进入 case 4 或 case 5</li></ul><p>case 4：被调整节点的兄弟为黑:black_circle:，两个侄子都为黑 :black_circle:</p><ul><li>将兄弟变红:red_circle:，目的是将删除节点和兄弟那边的黑色高度同时减少 1</li><li>如果父亲是红:red_circle:，则需将父亲变为黑，避免红红，此时路径黑节点数目不变</li><li>如果父亲是黑:black_circle:，说明这条路径还是少黑，再次让父节点触发双黑</li></ul><p>case 5：被调整节点的兄弟为黑:black_circle:，至少一个红:red_circle:侄子</p><ul><li>如果兄弟是左孩子，左侄子是红:red_circle:，LL 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:，平衡起见，左侄子也是黑:black_circle:</li><li>原来兄弟要成为父亲，需要保留父亲颜色</li></ul></li><li>如果兄弟是左孩子，右侄子是红:red_circle:，LR 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:</li><li>右侄子会取代原来父亲，因此它保留父亲颜色</li><li>兄弟已经是黑了:black_circle:，无需改变</li></ul></li><li>如果兄弟是右孩子，右侄子是红:red_circle:，RR 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:，平衡起见，右侄子也是黑:black_circle:</li><li>原来兄弟要成为父亲，需要保留父亲颜色</li></ul></li><li>如果兄弟是右孩子，左侄子是红:red_circle:，RL 不平衡<ul><li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑:black_circle:</li><li>左侄子会取代原来父亲，因此它保留父亲颜色</li><li>兄弟已经是黑了:black_circle:，无需改变</li></ul></li></ul><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.datastructure.redblacktree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.itheima.datastructure.redblacktree.RedBlackTree.Color.BLACK;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.itheima.datastructure.redblacktree.RedBlackTree.Color.RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;红黑树&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedBlackTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">        RED, BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        Object value;</span><br><span class="line">        Node left;</span><br><span class="line">        Node right;</span><br><span class="line">        Node parent;        <span class="comment">// 父节点</span></span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> RED;  <span class="comment">// 颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, Color color)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, Color color, Node left, Node right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.color = color;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span>) &#123;</span><br><span class="line">                left.parent = <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">                right.parent = <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否是左孩子</span></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isLeftChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parent != <span class="literal">null</span> &amp;&amp; parent.left == <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 叔叔</span></span><br><span class="line">        Node <span class="title function_">uncle</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent == <span class="literal">null</span> || parent.parent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parent.isLeftChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.parent.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.parent.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 兄弟</span></span><br><span class="line">        Node <span class="title function_">sibling</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isLeftChild()) &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> parent.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断红</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRed</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.color == RED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断黑</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isBlack</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="comment">//        return !isRed(node);</span></span><br><span class="line">        <span class="keyword">return</span> node == <span class="literal">null</span> || node.color == BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右旋 1. parent 的处理 2. 旋转后新根的父子关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(Node pink)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> pink.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">yellow</span> <span class="operator">=</span> pink.left;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">green</span> <span class="operator">=</span> yellow.right;</span><br><span class="line">        <span class="keyword">if</span> (green != <span class="literal">null</span>) &#123;</span><br><span class="line">            green.parent = pink;</span><br><span class="line">        &#125;</span><br><span class="line">        yellow.right = pink;</span><br><span class="line">        yellow.parent = parent;</span><br><span class="line">        pink.left = green;</span><br><span class="line">        pink.parent = yellow;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.left == pink) &#123;</span><br><span class="line">            parent.left = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.right = yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左旋</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(Node pink)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> pink.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">yellow</span> <span class="operator">=</span> pink.right;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">green</span> <span class="operator">=</span> yellow.left;</span><br><span class="line">        <span class="keyword">if</span> (green != <span class="literal">null</span>) &#123;</span><br><span class="line">            green.parent = pink;</span><br><span class="line">        &#125;</span><br><span class="line">        yellow.left = pink;</span><br><span class="line">        yellow.parent = parent;</span><br><span class="line">        pink.right = green;</span><br><span class="line">        pink.parent = yellow;</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.left == pink) &#123;</span><br><span class="line">            parent.left = yellow;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.right = yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增或更新</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 正常增、遇到红红不平衡进行调整</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            parent = p;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">                p = p.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.value = value; <span class="comment">// 更新</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">inserted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = inserted;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; parent.key) &#123;</span><br><span class="line">            parent.left = inserted;</span><br><span class="line">            inserted.parent = parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.right = inserted;</span><br><span class="line">            inserted.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        fixRedRed(inserted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fixRedRed</span><span class="params">(Node x)</span> &#123;</span><br><span class="line">        <span class="comment">// case 1 插入节点是根节点，变黑即可</span></span><br><span class="line">        <span class="keyword">if</span> (x == root) &#123;</span><br><span class="line">            x.color = BLACK;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// case 2 插入节点父亲是黑色，无需调整</span></span><br><span class="line">        <span class="keyword">if</span> (isBlack(x.parent)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* case 3 当红红相邻，叔叔为红时</span></span><br><span class="line"><span class="comment">            需要将父亲、叔叔变黑、祖父变红，然后对祖父做递归处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> x.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">uncle</span> <span class="operator">=</span> x.uncle();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">grandparent</span> <span class="operator">=</span> parent.parent;</span><br><span class="line">        <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            uncle.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            fixRedRed(grandparent);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// case 4 当红红相邻，叔叔为黑时</span></span><br><span class="line">        <span class="keyword">if</span> (parent.isLeftChild() &amp;&amp; x.isLeftChild()) &#123; <span class="comment">// LL</span></span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            rightRotate(grandparent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.isLeftChild()) &#123; <span class="comment">// LR</span></span><br><span class="line">            leftRotate(parent);</span><br><span class="line">            x.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            rightRotate(grandparent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!x.isLeftChild()) &#123; <span class="comment">// RR</span></span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            leftRotate(grandparent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// RL</span></span><br><span class="line">            rightRotate(parent);</span><br><span class="line">            x.color = BLACK;</span><br><span class="line">            grandparent.color = RED;</span><br><span class="line">            leftRotate(grandparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 正常删、会用到李代桃僵技巧、遇到黑黑不平衡进行调整</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">deleted</span> <span class="operator">=</span> find(key);</span><br><span class="line">        <span class="keyword">if</span> (deleted == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        doRemove(deleted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(key) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找删除节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">find</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; p.key) &#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.key &lt; key) &#123;</span><br><span class="line">                p = p.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找剩余节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findReplaced</span><span class="params">(Node deleted)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (deleted.left == <span class="literal">null</span> &amp;&amp; deleted.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deleted.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> deleted.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deleted.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> deleted.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> deleted.right;</span><br><span class="line">        <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            s = s.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理双黑 (case3、case4、case5)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixDoubleBlack</span><span class="params">(Node x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == root) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> x.parent;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">sibling</span> <span class="operator">=</span> x.sibling();</span><br><span class="line">        <span class="comment">// case 3 兄弟节点是红色</span></span><br><span class="line">        <span class="keyword">if</span> (isRed(sibling)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.isLeftChild()) &#123;</span><br><span class="line">                leftRotate(parent);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rightRotate(parent);</span><br><span class="line">            &#125;</span><br><span class="line">            parent.color = RED;</span><br><span class="line">            sibling.color = BLACK;</span><br><span class="line">            fixDoubleBlack(x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sibling != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// case 4 兄弟是黑色, 两个侄子也是黑色</span></span><br><span class="line">            <span class="keyword">if</span> (isBlack(sibling.left) &amp;&amp; isBlack(sibling.right)) &#123;</span><br><span class="line">                sibling.color = RED;</span><br><span class="line">                <span class="keyword">if</span> (isRed(parent)) &#123;</span><br><span class="line">                    parent.color = BLACK;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fixDoubleBlack(parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// case 5 兄弟是黑色, 侄子有红色</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// LL</span></span><br><span class="line">                <span class="keyword">if</span> (sibling.isLeftChild() &amp;&amp; isRed(sibling.left)) &#123;</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                    sibling.left.color = BLACK;</span><br><span class="line">                    sibling.color = parent.color;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// LR</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sibling.isLeftChild() &amp;&amp; isRed(sibling.right)) &#123;</span><br><span class="line">                    sibling.right.color = parent.color;</span><br><span class="line">                    leftRotate(sibling);</span><br><span class="line">                    rightRotate(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// RL</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!sibling.isLeftChild() &amp;&amp; isRed(sibling.left)) &#123;</span><br><span class="line">                    sibling.left.color = parent.color;</span><br><span class="line">                    rightRotate(sibling);</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// RR</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    leftRotate(parent);</span><br><span class="line">                    sibling.right.color = BLACK;</span><br><span class="line">                    sibling.color = parent.color;</span><br><span class="line">                &#125;</span><br><span class="line">                parent.color = BLACK;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// @TODO 实际也不会出现，触发双黑后，兄弟节点不会为 null</span></span><br><span class="line">            fixDoubleBlack(parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">(Node deleted)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">replaced</span> <span class="operator">=</span> findReplaced(deleted);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> deleted.parent;</span><br><span class="line">        <span class="comment">// 没有孩子</span></span><br><span class="line">        <span class="keyword">if</span> (replaced == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// case 1 删除的是根节点</span></span><br><span class="line">            <span class="keyword">if</span> (deleted == root) &#123;</span><br><span class="line">                root = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isBlack(deleted)) &#123;</span><br><span class="line">                    <span class="comment">// 双黑调整</span></span><br><span class="line">                    fixDoubleBlack(deleted);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 红色叶子, 无需任何处理</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (deleted.isLeftChild()) &#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                deleted.parent = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有一个孩子</span></span><br><span class="line">        <span class="keyword">if</span> (deleted.left == <span class="literal">null</span> || deleted.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// case 1 删除的是根节点</span></span><br><span class="line">            <span class="keyword">if</span> (deleted == root) &#123;</span><br><span class="line">                root.key = replaced.key;</span><br><span class="line">                root.value = replaced.value;</span><br><span class="line">                root.left = root.right = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (deleted.isLeftChild()) &#123;</span><br><span class="line">                    parent.left = replaced;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.right = replaced;</span><br><span class="line">                &#125;</span><br><span class="line">                replaced.parent = parent;</span><br><span class="line">                deleted.left = deleted.right = deleted.parent = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (isBlack(deleted) &amp;&amp; isBlack(replaced)) &#123;</span><br><span class="line">                    <span class="comment">// @TODO 实际不会有这种情况 因为只有一个孩子时 被删除节点是黑色 那么剩余节点只能是红色不会触发双黑</span></span><br><span class="line">                    fixDoubleBlack(replaced);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// case 2 删除是黑，剩下是红</span></span><br><span class="line">                    replaced.color = BLACK;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// case 0 有两个孩子 =&gt; 有一个孩子 或 没有孩子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> deleted.key;</span><br><span class="line">        deleted.key = replaced.key;</span><br><span class="line">        replaced.key = t;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v</span> <span class="operator">=</span> deleted.value;</span><br><span class="line">        deleted.value = replaced.value;</span><br><span class="line">        replaced.value = v;</span><br><span class="line">        doRemove(replaced);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上代码中的 TODO 未作改正</li></ul><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><table><thead><tr><th>维度</th><th>普通二叉搜索树</th><th>AVL树</th><th>红黑树</th></tr></thead><tbody><tr><td>查询</td><td>平均O(logn)，最坏O(n)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>插入</td><td>平均O(logn)，最坏O(n)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>删除</td><td>平均O(logn)，最坏O(n)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>平衡性</td><td>不平衡</td><td>严格平衡</td><td>近似平衡</td></tr><tr><td>结构</td><td>二叉树</td><td>自平衡的二叉树</td><td>具有红黑性质的自平衡二叉树</td></tr><tr><td>查找效率</td><td>低</td><td>高</td><td>高</td></tr><tr><td>插入删除效率</td><td>低</td><td>中等</td><td>高</td></tr></tbody></table><p>普通二叉搜索树插入、删除、查询的时间复杂度与树的高度相关，因此在最坏情况下，时间复杂度为O(n)，而且容易退化成链表，查找效率低。</p><p>AVL树是一种高度平衡的二叉搜索树，其左右子树的高度差不超过1。因此，它能够在logn的平均时间内完成插入、删除、查询操作，但是在维护平衡的过程中，需要频繁地进行旋转操作，导致插入删除效率较低。</p><p>红黑树是一种近似平衡的二叉搜索树，它在保持高度平衡的同时，又能够保持较高的插入删除效率。红黑树通过节点着色和旋转操作来维护平衡。红黑树在维护平衡的过程中，能够进行较少的节点旋转操作，因此插入删除效率较高，并且查询效率也较高。</p><p>综上所述，红黑树具有较高的综合性能，是一种广泛应用的数据结构。</p><h3 id="4-B-树"><a href="#4-B-树" class="headerlink" title="4) B 树"></a>4) B 树</h3><p>ai 问题列表</p><p>请用中文回答：B-树历史</p><p>请用中文回答：100万的数据使用 avl 树来存储，树高是多少?</p><p>请用中文回答：100万的数据，如果存储到B-树(最小度数是500)，那么树高大约是多少?</p><p>请用中文回答：B-树的特性有哪些？</p><h4 id="历史-3"><a href="#历史-3" class="headerlink" title="历史"></a>历史</h4><blockquote><p>B树（B-Tree）结构是一种高效存储和查询数据的方法，它的历史可以追溯到1970年代早期。B树的发明人Rudolf Bayer和Edward M. McCreight分别发表了一篇论文介绍了B树。这篇论文是1972年发表于《ACM Transactions on Database Systems》中的，题目为”Organization and Maintenance of Large Ordered Indexes”。</p><p>这篇论文提出了一种能够高效地维护大型有序索引的方法，这种方法的主要思想是将每个节点扩展成多个子节点，以减少查找所需的次数。B树结构非常适合应用于磁盘等大型存储器的高效操作，被广泛应用于关系数据库和文件系统中。</p><p>B树结构有很多变种和升级版，例如B+树，B*树和SB树等。这些变种和升级版本都基于B树的核心思想，通过调整B树的参数和结构，提高了B树在不同场景下的性能表现。</p><p>总的来说，B树结构是一个非常重要的数据结构，为高效存储和查询大量数据提供了可靠的方法。它的历史可以追溯到上个世纪70年代，而且在今天仍然被广泛应用于各种场景。</p></blockquote><h4 id="B-的含义"><a href="#B-的含义" class="headerlink" title="B 的含义"></a>B 的含义</h4><blockquote><p>B-树的名称是由其发明者Rudolf  Bayer提出的。Bayer和McCreight从未解释B代表什么，人们提出了许多可能的解释，比如Boeing、balanced、between、broad、bushy和Bayer等。但McCreight表示，越是思考B-trees中的B代表什么，就越能更好地理解B-trees</p></blockquote><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><p>一棵 B-树具有以下性质</p><p>特性1：每个节点 x 具有</p><ul><li>属性 n，表示节点 x 中 key 的个数</li><li>属性 leaf，表示节点是否是叶子节点</li><li>节点 key 可以有多个，以升序存储</li></ul><p>特性2：每个非叶子节点中的孩子数是 n + 1、叶子节点没有孩子</p><p>特性3：最小度数t（节点的孩子数称为度）和节点中键数量的关系如下：</p><table><thead><tr><th>最小度数t</th><th>键数量范围</th></tr></thead><tbody><tr><td>2</td><td>1 ~ 3</td></tr><tr><td>3</td><td>2 ~ 5</td></tr><tr><td>4</td><td>3 ~ 7</td></tr><tr><td>…</td><td>…</td></tr><tr><td>n</td><td>(n-1) ~ (2n-1)</td></tr></tbody></table><p>其中，当节点中键数量达到其最大值时，即 3、5、7 … 2n-1，需要分裂</p><p>特性4：叶子节点的深度都相同</p><blockquote><p>问：</p><p>B-树为什么有最小度数的限制？</p><p>答：</p><p>B树中有最小度数的限制是为了保证B树的平衡特性。</p><p>在B树中，每个节点都可以有多个子节点，这使得B树可以存储大量的键值，但也带来了一些问题。如果节点的子节点数量太少，那么就可能导致B树的高度过高，从而降低了B树的效率。此外，如果节点的子节点数量太多，那么就可能导致节点的搜索、插入和删除操作变得复杂和低效。</p><p>最小度数的限制通过限制节点的子节点数量，来平衡这些问题。在B树中，每个节点的子节点数量都必须在一定的范围内，即t到2t之间（其中t为最小度数）</p></blockquote><h4 id="定义节点-1"><a href="#定义节点-1" class="headerlink" title="定义节点"></a>定义节点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">leaf</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> keyNumber;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span>[] keys;</span><br><span class="line">    Node[] children;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        <span class="built_in">this</span>.keys = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * t - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">2</span> * t];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(Arrays.copyOfRange(keys, <span class="number">0</span>, keyNumber));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leaf 表示是否为叶子节点</li><li>keyNumber 为 keys 中有效 key 数目</li><li>t 为最小度数，它决定了节点中key 的最小、最大数目，分别是 t-1 和 2t-1</li><li>keys 存储此节点的 key</li><li>children 存储此节点的 child</li><li>toString 只是为了方便调试和测试，非必须</li></ul><blockquote><p>实际 keys 应当改为 entries 以便同时保存 key 和 value，刚开始简化实现</p></blockquote><h4 id="多路查找"><a href="#多路查找" class="headerlink" title="多路查找"></a>多路查找</h4><p>为上面节点类添加 get 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; keyNumber &amp;&amp; keys[i] &lt; key) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; keyNumber &amp;&amp; keys[i] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (leaf) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> children[i].get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入-key-和-child"><a href="#插入-key-和-child" class="headerlink" title="插入 key 和 child"></a>插入 key 和 child</h4><p>为上面节点类添加 insertKey 和 insertChild 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insertKey</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    System.arraycopy(keys, index, keys, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">    keys[index] = key;</span><br><span class="line">    keyNumber++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertChild</span><span class="params">(Node child, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    System.arraycopy(children, index, children, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">    children[index] = child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用是向 keys 数组或 children 数组指定 index 处插入新数据，注意</p><ul><li>由于使用了静态数组，并且不会在新增或删除时改变它的大小，因此需要额外的 keyNumber 来指定数组内有效 key 的数目<ul><li>插入时 keyNumber++</li><li>删除时减少  keyNumber 的值即可</li></ul></li><li>children 不会单独维护数目，它比 keys 多一个</li><li>如果这两个方法同时调用，注意它们的先后顺序，insertChild 后调用，因为它计算复制元素个数时用到了 keyNumber</li></ul><h4 id="定义树"><a href="#定义树" class="headerlink" title="定义树"></a>定义树</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MIN_KEY_NUMBER;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MAX_KEY_NUMBER;</span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        MIN_KEY_NUMBER = t - <span class="number">1</span>;</span><br><span class="line">        MAX_KEY_NUMBER = <span class="number">2</span> * t - <span class="number">1</span>;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    doPut(<span class="literal">null</span>, <span class="number">0</span>, root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doPut</span><span class="params">(Node parent, <span class="type">int</span> index, Node node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; node.keyNumber &amp;&amp; node.keys[i] &lt; key) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; node.keyNumber &amp;&amp; node.keys[i] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.leaf) &#123;</span><br><span class="line">        node.insertKey(key, i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doPut(node, i, node.children[i], key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFull(node)) &#123;</span><br><span class="line">        split(parent, index, node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先查找本节点中的插入位置 i，如果没有空位（key 被找到），应该走更新的逻辑，目前什么没做</li><li>接下来分两种情况<ul><li>如果节点是叶子节点，可以直接插入了</li><li>如果节点是非叶子节点，需要继续在 children[i] 处继续递归插入</li></ul></li><li>无论哪种情况，插入完成后都可能超过节点 keys 数目限制，此时应当执行节点分裂<ul><li>参数中的 parent 和 index 都是给分裂方法用的，代表当前节点父节点，和分裂节点是第几个孩子</li></ul></li></ul><p>判断依据为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node.keyNumber == MAX_KEY_NUMBER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">split</span><span class="params">(Node parent, <span class="type">int</span> index , Node left)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newRoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.t);</span><br><span class="line">        newRoot.leaf = <span class="literal">false</span>;</span><br><span class="line">        newRoot.insertChild(root, <span class="number">0</span>);</span><br><span class="line">        root = newRoot;</span><br><span class="line">        parent = newRoot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="built_in">this</span>.t);</span><br><span class="line">    right.leaf = left.leaf;</span><br><span class="line">    right.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">    System.arraycopy(left.keys, t, right.keys, <span class="number">0</span>, t - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!left.leaf) &#123;</span><br><span class="line">        System.arraycopy(left.children, t, right.children, <span class="number">0</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    left.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left.keys[t - <span class="number">1</span>];</span><br><span class="line">    parent.insertKey(mid, index);</span><br><span class="line">    parent.insertChild(right, index + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分两种情况：</p><ul><li>如果 parent &#x3D;&#x3D; null 表示要分裂的是根节点，此时需要创建新根，原来的根节点作为新根的 0 孩子</li><li>否则<ul><li>创建 right 节点（分裂后大于当前 left 节点的），把 t 以后的 key 和 child 都拷贝过去</li><li>t-1 处的 key 插入到 parent 的 index 处，index 指 left 作为孩子时的索引</li><li>right 节点作为 parent 的孩子插入到 index + 1 处</li></ul></li></ul><h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><p>case 1：当前节点是叶子节点，没找到</p><p>case 2：当前节点是叶子节点，找到了</p><p>case 3：当前节点是非叶子节点，没找到</p><p>case 4：当前节点是非叶子节点，找到了</p><p>case 5：删除后 key 数目 &lt; 下限（不平衡）</p><p>case 6：根节点</p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.algorithm.btree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;B-树&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] keys; <span class="comment">// 关键字</span></span><br><span class="line">        Node[] children; <span class="comment">// 孩子</span></span><br><span class="line">        <span class="type">int</span> keyNumber; <span class="comment">// 有效关键字数目</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leaf</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// 是否是叶子节点</span></span><br><span class="line">        <span class="type">int</span> t; <span class="comment">// 最小度数 (最小孩子数)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> t)</span> &#123; <span class="comment">// t&gt;=2</span></span><br><span class="line">            <span class="built_in">this</span>.t = t;</span><br><span class="line">            <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">2</span> * t];</span><br><span class="line">            <span class="built_in">this</span>.keys = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span> * t - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span>[] keys)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.keys = keys;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.toString(Arrays.copyOfRange(keys, <span class="number">0</span>, keyNumber));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多路查找</span></span><br><span class="line">        Node <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; keyNumber) &#123;</span><br><span class="line">                <span class="keyword">if</span> (keys[i] == key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (keys[i] &gt; key) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行到此时 keys[i]&gt;key 或 i==keyNumber</span></span><br><span class="line">            <span class="keyword">if</span> (leaf) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 非叶子情况</span></span><br><span class="line">            <span class="keyword">return</span> children[i].get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 keys 指定索引处插入 key</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">insertKey</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            System.arraycopy(keys, index, keys, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">            keys[index] = key;</span><br><span class="line">            keyNumber++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 children 指定索引处插入 child</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">insertChild</span><span class="params">(Node child, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            System.arraycopy(children, index, children, index + <span class="number">1</span>, keyNumber - index);</span><br><span class="line">            children[index] = child;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">removeKey</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> keys[index];</span><br><span class="line">            System.arraycopy(keys, index + <span class="number">1</span>, keys, index, --keyNumber - index);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">removeLeftmostKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeKey(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">removeRightmostKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeKey(keyNumber - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">removeChild</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> children[index];</span><br><span class="line">            System.arraycopy(children, index + <span class="number">1</span>, children, index, keyNumber - index);</span><br><span class="line">            children[keyNumber] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">removeLeftmostChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeChild(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">removeRightmostChild</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeChild(keyNumber);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">moveToLeft</span><span class="params">(Node left)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> left.keyNumber;</span><br><span class="line">            <span class="keyword">if</span> (!leaf) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= keyNumber; i++) &#123;</span><br><span class="line">                    left.children[start + i] = children[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; keyNumber; i++) &#123;</span><br><span class="line">                left.keys[left.keyNumber++] = keys[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">leftSibling</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index &gt; <span class="number">0</span> ? children[index - <span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node <span class="title function_">rightSibling</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index == keyNumber ? <span class="literal">null</span> : children[index + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t; <span class="comment">// 树中节点最小度数</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MIN_KEY_NUMBER; <span class="comment">// 最小key数目</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MAX_KEY_NUMBER; <span class="comment">// 最大key数目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BTree</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">        MAX_KEY_NUMBER = <span class="number">2</span> * t - <span class="number">1</span>;</span><br><span class="line">        MIN_KEY_NUMBER = t - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.get(key) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 新增</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        doPut(root, key, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doPut</span><span class="params">(Node node, <span class="type">int</span> key, Node parent, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; node.keyNumber) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.keys[i] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 更新</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.keys[i] &gt; key) &#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 找到了插入位置，即为此时的 i</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.leaf) &#123;</span><br><span class="line">            node.insertKey(key, i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doPut(node.children[i], key, node, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.keyNumber == MAX_KEY_NUMBER) &#123;</span><br><span class="line">            split(node, parent, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;h3&gt;分裂方法&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left   要分裂的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 分裂节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index  分裂节点是第几个孩子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(Node left, Node parent, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 分裂的是根节点</span></span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">newRoot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">            newRoot.leaf = <span class="literal">false</span>;</span><br><span class="line">            newRoot.insertChild(left, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.root = newRoot;</span><br><span class="line">            parent = newRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1. 创建 right 节点，把 left 中 t 之后的 key 和 child 移动过去</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t);</span><br><span class="line">        right.leaf = left.leaf;</span><br><span class="line">        System.arraycopy(left.keys, t, right.keys, <span class="number">0</span>, t - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 分裂节点是非叶子的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!left.leaf) &#123;</span><br><span class="line">            System.arraycopy(left.children, t, right.children, <span class="number">0</span>, t);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t; i &lt;= left.keyNumber; i++) &#123;</span><br><span class="line">                left.children[i] = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        right.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">        left.keyNumber = t - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 2. 中间的 key （t-1 处）插入到父节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left.keys[t - <span class="number">1</span>];</span><br><span class="line">        parent.insertKey(mid, index);</span><br><span class="line">        <span class="comment">// 3. right 节点作为父节点的孩子</span></span><br><span class="line">        parent.insertChild(right, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        doRemove(root, key, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">(Node node, <span class="type">int</span> key, Node parent, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; node.keyNumber) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.keys[i] &gt;= key) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.leaf) &#123;</span><br><span class="line">            <span class="keyword">if</span> (notFound(node, key, i)) &#123; <span class="comment">// case 1</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node.removeKey(i);  <span class="comment">// case 2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (notFound(node, key, i)) &#123; <span class="comment">// case 3</span></span><br><span class="line">                doRemove(node.children[i], key, node, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// case 4</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.children[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span> (!s.leaf) &#123;</span><br><span class="line">                    s = s.children[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> s.keys[<span class="number">0</span>];</span><br><span class="line">                node.keys[i] = k;</span><br><span class="line">                doRemove(node.children[i + <span class="number">1</span>], k, node, i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.keyNumber &lt; MIN_KEY_NUMBER) &#123; <span class="comment">// case 5</span></span><br><span class="line">            balance(node, parent, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">notFound</span><span class="params">(Node node, <span class="type">int</span> key, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= node.keyNumber || (i &lt; node.keyNumber &amp;&amp; node.keys[i] != key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">balance</span><span class="params">(Node node, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == root) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.keyNumber == <span class="number">0</span> &amp;&amp; root.children[<span class="number">0</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.children[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">leftSibling</span> <span class="operator">=</span> parent.leftSibling(i);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">rightSibling</span> <span class="operator">=</span> parent.rightSibling(i);</span><br><span class="line">        <span class="keyword">if</span> (leftSibling != <span class="literal">null</span> &amp;&amp; leftSibling.keyNumber &gt; MIN_KEY_NUMBER) &#123;</span><br><span class="line">            rightRotate(node, leftSibling, parent, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightSibling != <span class="literal">null</span> &amp;&amp; rightSibling.keyNumber &gt; MIN_KEY_NUMBER) &#123;</span><br><span class="line">            leftRotate(node, rightSibling, parent, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftSibling != <span class="literal">null</span>) &#123;</span><br><span class="line">            mergeToLeft(leftSibling, parent, i - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeToLeft(node, parent, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mergeToLeft</span><span class="params">(Node left, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> parent.removeChild(i + <span class="number">1</span>);</span><br><span class="line">        left.insertKey(parent.removeKey(i), left.keyNumber);</span><br><span class="line">        right.moveToLeft(left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(Node node, Node leftSibling, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        node.insertKey(parent.keys[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!leftSibling.leaf) &#123;</span><br><span class="line">            node.insertChild(leftSibling.removeRightmostChild(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.keys[i - <span class="number">1</span>] = leftSibling.removeRightmostKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(Node node, Node rightSibling, Node parent, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        node.insertKey(parent.keys[i], node.keyNumber);</span><br><span class="line">        <span class="keyword">if</span> (!rightSibling.leaf) &#123;</span><br><span class="line">            node.insertChild(rightSibling.removeLeftmostChild(), node.keyNumber + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        parent.keys[i] = rightSibling.removeLeftmostKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-树与-2-3-树、2-3-4-树的关系"><a href="#B-树与-2-3-树、2-3-4-树的关系" class="headerlink" title="B-树与 2-3 树、2-3-4 树的关系"></a>B-树与 2-3 树、2-3-4 树的关系</h4><p>可以这样总结它们之间的关系：</p><ol><li>2-3树是最小度数为2的B树，其中每个节点可以包含2个或3个子节点。</li><li>2-3-4树是最小度数为2的B树的一种特殊情况，其中每个节点可以包含2个、3个或4个子节点。</li><li>B树是一种更加一般化的平衡树，可以适应不同的应用场景，其节点可以包含任意数量的键值，节点的度数取决于最小度数t的设定。</li></ol><h3 id="5-哈希表"><a href="#5-哈希表" class="headerlink" title="5) 哈希表"></a>5) 哈希表</h3><h4 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h4><p>未考虑 hash 码的生成，假定该 hash 码由我们提供</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> &#123;</span><br><span class="line">        <span class="type">int</span> hash; <span class="comment">// 哈希码</span></span><br><span class="line">        Object key; <span class="comment">// 键</span></span><br><span class="line">        Object value; <span class="comment">// 值</span></span><br><span class="line">        Entry next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Entry</span><span class="params">(<span class="type">int</span> hash, Object key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] table = <span class="keyword">new</span> <span class="title class_">Entry</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 元素个数</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> <span class="number">0.75f</span>; <span class="comment">// 12 阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">threshold</span> <span class="operator">=</span> (<span class="type">int</span>) (loadFactor * table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 求模运算替换为位运算</span></span><br><span class="line"><span class="comment">        - 前提：数组长度是 2 的 n 次方</span></span><br><span class="line"><span class="comment">        - hash % 数组长度 等价于 hash &amp; (数组长度-1)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 hash 码获取 value</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (table[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[idx];</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> p.value;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向 hash 表存入新 key value，如果 key 重复，则更新 value</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> hash, Object key, Object value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (table[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 1. idx 处有空位, 直接新增</span></span><br><span class="line">            table[idx] = <span class="keyword">new</span> <span class="title class_">Entry</span>(hash, key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 2. idx 处无空位, 沿链表查找 有重复key更新，否则新增</span></span><br><span class="line">            <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[idx];</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.key.equals(key)) &#123;</span><br><span class="line">                    p.value = value; <span class="comment">// 更新</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="title class_">Entry</span>(hash, key, value); <span class="comment">// 新增</span></span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; threshold) &#123;</span><br><span class="line">            resize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">()</span> &#123;</span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> <span class="title class_">Entry</span>[table.length &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[i]; <span class="comment">// 拿到每个链表头</span></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                拆分链表，移动到新数组，拆分规律</span></span><br><span class="line"><span class="comment">                * 一个链表最多拆成两个</span></span><br><span class="line"><span class="comment">                * hash &amp; table.length == 0 的一组</span></span><br><span class="line"><span class="comment">                * hash &amp; table.length != 0 的一组</span></span><br><span class="line"><span class="comment">                                          p</span></span><br><span class="line"><span class="comment">                0-&gt;8-&gt;16-&gt;24-&gt;32-&gt;40-&gt;48-&gt;null</span></span><br><span class="line"><span class="comment">                            a</span></span><br><span class="line"><span class="comment">                0-&gt;16-&gt;32-&gt;48-&gt;null</span></span><br><span class="line"><span class="comment">                        b</span></span><br><span class="line"><span class="comment">                8-&gt;24-&gt;40-&gt;null</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">                <span class="type">Entry</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">aHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">bHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((p.hash &amp; table.length) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">                            a.next = p;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            aHead = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        a = p; <span class="comment">// 分配到a</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                            b.next = p;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            bHead = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        b = p; <span class="comment">// 分配到b</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 规律： a 链表保持索引位置不变，b 链表索引位置+table.length</span></span><br><span class="line">                <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">                    a.next = <span class="literal">null</span>;</span><br><span class="line">                    newTable[i] = aHead;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                    b.next = <span class="literal">null</span>;</span><br><span class="line">                    newTable[i + table.length] = bHead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (<span class="type">int</span>) (loadFactor * table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 hash 码删除，返回删除的 value</span></span><br><span class="line">    Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (table[idx] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[idx];</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.key.equals(key)) &#123;</span><br><span class="line">                <span class="comment">// 找到了, 删除</span></span><br><span class="line">                <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123; <span class="comment">// 链表头</span></span><br><span class="line">                    table[idx] = p.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非链表头</span></span><br><span class="line">                    prev.next = p.next;</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> p.value;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成-hashCode"><a href="#生成-hashCode" class="headerlink" title="生成 hashCode"></a>生成 hashCode</h4><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230424083655435.png" alt="image-20230424083655435"></p><p>hash 算法是将任意对象，分配一个<strong>编号</strong>的过程，其中编号是一个有限范围内的数字（如 int 范围内）</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230424090603325.png" alt="image-20230424090603325"></p><p><strong>Object.hashCode</strong></p><ul><li>Object 的 hashCode 方法默认是生成随机数作为 hash 值（会缓存在对象头当中）</li><li>缺点是包含相同<strong>值</strong>的不同对象，他们的 hashCode 不一样，不能够用 hash 值来反映对象的<strong>值</strong>特征，因此诸多子类都会重写 hashCode 方法</li></ul><p><strong>String.hashCode</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;bac&quot;</span>;                     </span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);         </span><br><span class="line"></span><br><span class="line">    System.out.println(s1.hashCode());</span><br><span class="line">    System.out.println(s2.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原则：值相同的字符串生成相同的 hash 码, 尽量让值不同的字符串生成不同的 hash 码</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对于 abc  a * 100 + b * 10 + c</span></span><br><span class="line"><span class="comment">    对于 bac  b * 100 + a * 10 + c</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s1.charAt(i);</span><br><span class="line">        System.out.println((<span class="type">int</span>) c);</span><br><span class="line">        <span class="comment">// (a*10 + b)*10 + c  ==&gt;  a*100 + b*10 + c  2^5</span></span><br><span class="line">        hash = (hash &lt;&lt; <span class="number">5</span>) - hash + c;     </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>经验表明如果每次乘的是较大质数，可以有更好地降低 hash 冲突，因此改【乘 10】为【乘 31】</li><li>【乘 31】可以等价为【乘 32 - hash】，进一步可以转为更高效地【左移5位 - hash】</li></ul><p><strong>检查 hash 表的分散性</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[table.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">p</span> <span class="operator">=</span> table[i];</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            sum[i]++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(sum));</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Long&gt; result = Arrays.stream(sum).boxed()</span><br><span class="line">        .collect(Collectors.groupingBy(s -&gt; s, Collectors.counting()));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 测试 Object.hashCode</span></span><br><span class="line">    <span class="type">HashTable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashTable</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        table.put(obj, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    table.print();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试 String.hashCode</span></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">HashTable</span>();</span><br><span class="line">    List&lt;String&gt; strings = Files.readAllLines(Path.of(<span class="string">&quot;words&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        table.put(string, string);</span><br><span class="line">    &#125;</span><br><span class="line">    table.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MurmurHash</strong></p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230425084247888.png" alt="image-20230425084247888"></p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ol><li>我们的代码里使用了尾插法，如果改成头插法呢？</li><li>JDK 的 HashMap 中采用了将对象 hashCode 高低位相互异或的方式减少冲突，怎么理解</li><li>我们的 HashTable 中表格容量是 2 的 n 次方，很多优化都是基于这个前提，能否不用 2 的 n 次方作为表格容量？</li><li>JDK 的 HashMap 在链表长度过长会转换成红黑树，对此你怎么看</li></ol><h2 id="3-排序算法"><a href="#3-排序算法" class="headerlink" title="3. 排序算法"></a>3. 排序算法</h2><p>基于比较的排序算法，常见有</p><table><thead><tr><th align="center">算法</th><th align="center">最好</th><th align="center">最坏</th><th align="center">平均</th><th align="center">空间</th><th align="center">稳定</th><th align="center">思想</th><th align="center">注意事项</th></tr></thead><tbody><tr><td align="center">冒泡</td><td align="center">O(n)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O(1)</td><td align="center">Y</td><td align="center">比较</td><td align="center">最好情况需要额外判断</td></tr><tr><td align="center">选择</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O(1)</td><td align="center">N</td><td align="center">比较</td><td align="center">顺序选择元素，交换次数较多，不适合大规模数据</td></tr><tr><td align="center">堆</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O(1)</td><td align="center">N</td><td align="center">选择</td><td align="center">堆排序的辅助性较强，理解前先理解堆的数据结构</td></tr><tr><td align="center">插入</td><td align="center">O(n)</td><td align="center">O($n^2$)</td><td align="center">O($n^2$)</td><td align="center">O(1)</td><td align="center">Y</td><td align="center">比较</td><td align="center">插入排序对于近乎有序的数据处理速度比较快，复杂度有所下降，可以提前结束</td></tr><tr><td align="center">希尔</td><td align="center">O(nlogn)</td><td align="center">O($n^2$)</td><td align="center">O($nlogn$)</td><td align="center">O(1)</td><td align="center">N</td><td align="center">插入</td><td align="center">gap序列的构造有多种方式，不同方式处理的数据复杂度可能不同</td></tr><tr><td align="center">归并</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O($nlogn$)</td><td align="center">O(n)</td><td align="center">Y</td><td align="center">归并</td><td align="center">需要额外的O(n)的存储空间</td></tr><tr><td align="center">快速</td><td align="center">O($nlogn$)</td><td align="center">O($n^2$)</td><td align="center">O($nlogn$)</td><td align="center">O(logn)</td><td align="center">N</td><td align="center">分治</td><td align="center">快排可能存在最坏情况，需要把枢轴值选取得尽量随机化来缓解最坏情况下的时间复杂度</td></tr></tbody></table><h3 id="稳定-vs-不稳定"><a href="#稳定-vs-不稳定" class="headerlink" title="稳定 vs 不稳定"></a>稳定 vs 不稳定</h3><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/stability_playing_cards.svg.png" alt="stability_playing_cards.svg"></p><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1) 冒泡排序"></a>1) 冒泡排序</h3><p>要点</p><ul><li>每轮冒泡不断地比较<strong>相邻</strong>的两个元素，如果它们是逆序的，则交换它们的位置</li><li>下一轮冒泡，可以调整未排序的右边界，减少不必要比较</li></ul><p>以数组 3、2、1 的冒泡排序为例，第一轮冒泡</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504153631958.png" alt="image-20230504153631958"></p><p>第二轮冒泡</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504154044402.png" alt="image-20230504154044402"></p><p>未排序区域内就剩一个元素，结束</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504154213239.png" alt="image-20230504154213239"></p><p>优化手段：每次循环时，若能确定<strong>更合适的</strong>右边界，则可以减少冒泡轮数</p><p>以数组 3、2、1、4、5 为例，第一轮结束后记录的 x，即为右边界</p><p><img src="http://rx6zk4j2b.hn-bkt.clouddn.com/blogs/image-20230504161136854.png" alt="image-20230504161136854"></p><p>非递归版代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">                    a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">                    a[i + <span class="number">1</span>] = t;</span><br><span class="line">                    x = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j = x;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        bubble(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2) 选择排序"></a>2) 选择排序</h3><h1 id="二-题目"><a href="#二-题目" class="headerlink" title="二. 题目"></a>二. 题目</h1><h2 id="1-二叉搜索树-1"><a href="#1-二叉搜索树-1" class="headerlink" title="1. 二叉搜索树"></a>1. 二叉搜索树</h2><h3 id="E01-删除节点-力扣-450-题"><a href="#E01-删除节点-力扣-450-题" class="headerlink" title="E01. 删除节点-力扣 450 题"></a>E01. 删除节点-力扣 450 题</h3><p>例题已经讲过，用非递归和递归均可实现，这里只给出递归参考代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.val) &#123;</span><br><span class="line">        node.left = deleteNode(node.left, key);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt; key) &#123;</span><br><span class="line">        node.right = deleteNode(node.right, key);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123; <span class="comment">// 情况1 - 只有右孩子</span></span><br><span class="line">        <span class="keyword">return</span> node.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123; <span class="comment">// 情况2 - 只有左孩子</span></span><br><span class="line">        <span class="keyword">return</span> node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">s</span> <span class="operator">=</span> node.right; <span class="comment">// 情况3 - 有两个孩子</span></span><br><span class="line">    <span class="keyword">while</span> (s.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        s = s.left;</span><br><span class="line">    &#125;</span><br><span class="line">    s.right = deleteNode(node.right, s.val);</span><br><span class="line">    s.left = node.left;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>树节点 TreeNode 相当于例题中的 BSTNode</p><ul><li>TreeNode  有属性：val, left, right，并未区分键值</li><li>BSTNode 有属性：key, value, left, right，区分了键值</li></ul></li><li><p>它的 TreeNode 没有 key，比较用的是 TreeNode.val 属性与待删除 key 进行比较</p></li></ul><h3 id="E02-新增节点-力扣-701-题"><a href="#E02-新增节点-力扣-701-题" class="headerlink" title="E02. 新增节点-力扣 701 题"></a>E02. 新增节点-力扣 701 题</h3><p>例题也讲过了（put），下面给出递归实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode node, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; node.val) &#123;</span><br><span class="line">        node.left = insertIntoBST(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.val &lt; val) &#123;</span><br><span class="line">        node.right = insertIntoBST(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意事项与上题相同，不再赘述</li><li>题目提示输入的 val 一定与树中节点不同，因此只需考虑<strong>新增</strong>情况，不会出现<strong>更新</strong>情况</li></ul><h3 id="E03-查询节点-力扣-700-题"><a href="#E03-查询节点-力扣-700-题" class="headerlink" title="E03. 查询节点-力扣 700 题"></a>E03. 查询节点-力扣 700 题</h3><p>例题讲过，下面给出递归实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode node, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; node.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.val &lt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchBST(node.right, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-验证二叉搜索树-力扣-98-题"><a href="#E04-验证二叉搜索树-力扣-98-题" class="headerlink" title="E04. 验证二叉搜索树-力扣 98 题"></a>E04. 验证二叉搜索树-力扣 98 题</h3><p><strong>中序非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">long</span> <span class="variable">prev</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (prev &gt;= pop.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = pop.val;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>记录 prev 需要用 long，否则若测试用例中最小的节点为 Integer.MIN_VALUE 则测试会失败</li><li>注意，如果相邻两个节点相等，也不应当通过测试，例如，下面的树也是不合法的</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">  / </span><br><span class="line"> 2 </span><br></pre></td></tr></table></figure><p><strong>中序递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doValid(<span class="keyword">new</span> <span class="title class_">AtomicLong</span>(Long.MIN_VALUE),root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doValid</span><span class="params">(AtomicLong prev, TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> doValid(prev, node.left);</span><br><span class="line">    <span class="keyword">if</span> (prev.get() &gt;= node.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prev.set(node.val);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> doValid(prev, node.right);</span><br><span class="line">    <span class="keyword">return</span> a &amp;&amp; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为何不能用 Long 或 long？因为它们都是局部变量且不可变，因此每次赋值时，并不会改变其它方法调用时的 prev</p></li><li><p>要么把 prev 设置为 AtomicLong，要么把 prev 设置为全局变量，而不要采用方法参数这样的局部变量</p></li><li><p>上述代码并不是最有效率的，分析过程见视频讲解</p></li></ul><p><strong>上下限递归</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doValid(node, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">doValid</span><span class="params">(TreeNode node, <span class="type">long</span> min, <span class="type">long</span> max)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt;= min || node.val &gt;= max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doValid(node.left, min, node.val) &amp;&amp; doValid(node.right, node.val, max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设每个节点必须在一个范围内：$(min, max)$，不包含边界，若节点值超过这个范围，则返回 false</li><li>对于 node.left 范围肯定是 $(min, node.val)$</li><li>对于 node.right 范围肯定是 $(node.val, max)$</li><li>一开始不知道 min，max 则取 java 中长整数的最小、最大值</li><li>本质是前序遍历 + 剪枝</li></ul><h3 id="E05-求范围和-力扣-938-题"><a href="#E05-求范围和-力扣-938-题" class="headerlink" title="E05. 求范围和-力扣 938 题"></a>E05. 求范围和-力扣 938 题</h3><p><strong>中序递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode node, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> rangeSumBST(node.left, low, high);</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (node.val &gt;= low &amp;&amp; node.val &lt;= high) &#123;</span><br><span class="line">        b = node.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b + rangeSumBST(node.right, low, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序非递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode node, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> node;</span><br><span class="line">    LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pop.val &gt; high) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pop.val &gt;= low) &#123;</span><br><span class="line">                sum += pop.val;</span><br><span class="line">            &#125;</span><br><span class="line">            p = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leedcode 执行耗时 4ms</li></ul><p><strong>上下限递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeSumBST</span><span class="params">(TreeNode node, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.val &lt; low) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(node.right, low, high);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (node.val &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(node.left, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.val + </span><br><span class="line">        rangeSumBST(node.left, low, high) + </span><br><span class="line">        rangeSumBST(node.right, low, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>leetcode 执行耗时 0 ms</li><li>node.val &lt; low 只需考虑它右子树的累加结果</li><li>node.val &gt; high 只需考虑它左子树的累加结果</li><li>node.val 在范围内，需要把当前节点的值加上其左右子树的累加结果</li></ul><h3 id="E06-根据前序遍历结果构造二叉搜索树-力扣-1008-题"><a href="#E06-根据前序遍历结果构造二叉搜索树-力扣-1008-题" class="headerlink" title="E06. 根据前序遍历结果构造二叉搜索树-力扣 1008 题"></a>E06. 根据前序遍历结果构造二叉搜索树-力扣 1008 题</h3><p><strong>直接插入</strong></p><p>注意：根据前序遍历的结果，可以唯一地构造出一个二叉搜索树</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> insert(<span class="literal">null</span>, preorder[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; preorder.length; i++) &#123;</span><br><span class="line">        insert(root, preorder[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(TreeNode node, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; node.val) &#123;</span><br><span class="line">        node.left = insert(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.val &lt; val)&#123;</span><br><span class="line">        node.right = insert(node.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上限法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> insert(preorder, Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == preorder.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> preorder[i];</span><br><span class="line">    System.out.println(val + String.format(<span class="string">&quot;[%d]&quot;</span>, max));</span><br><span class="line">    <span class="keyword">if</span> (val &gt; max) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    i++;</span><br><span class="line">    node.left = insert(preorder, node.val); </span><br><span class="line">    node.right = insert(preorder, max);     </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次处理 prevorder 中每个值, 返回创建好的节点或 null 作为上个节点的孩子</p><ol><li>如果超过上限, 返回 null</li><li>如果没超过上限, 创建节点, 并将其左右孩子设置完整后返回<ul><li>i++ 需要放在设置左右孩子之前，意思是从剩下的元素中挑选左右孩子</li></ul></li></ol><p><strong>分治法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">bstFromPreorder</span><span class="params">(<span class="type">int</span>[] preorder)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> partition(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[start]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> start + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder[index] &gt; preorder[start]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// index 就是右子树的起点</span></span><br><span class="line">    root.left = partition(preorder, start + <span class="number">1</span>, index - <span class="number">1</span>);</span><br><span class="line">    root.right = partition(preorder, index, end);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>刚开始 8, 5, 1, 7, 10, 12，方法每次执行，确定本次的根节点和左右子树的分界线</li><li>第一次确定根节点为 8，左子树 5, 1, 7，右子树 10, 12</li><li>对 5, 1, 7 做递归操作，确定根节点是 5， 左子树是 1， 右子树是 7</li><li>对 1 做递归操作，确定根节点是 1，左右子树为 null</li><li>对 7 做递归操作，确定根节点是 7，左右子树为 null</li><li>对 10, 12 做递归操作，确定根节点是 10，左子树为 null，右子树为 12</li><li>对 12 做递归操作，确定根节点是 12，左右子树为 null</li><li>递归结束，返回本范围内的根节点</li></ul><h3 id="E07-二叉搜索树的最近公共祖先-力扣-235-题"><a href="#E07-二叉搜索树的最近公共祖先-力扣-235-题" class="headerlink" title="E07. 二叉搜索树的最近公共祖先-力扣 235 题"></a>E07. 二叉搜索树的最近公共祖先-力扣 235 题</h3><p>要点：若 p，q 在 ancestor 的两侧，则 ancestor 就是它们的最近公共祖先</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ancestor</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (ancestor.val &gt; p.val &amp;&amp; ancestor.val &gt; q.val || </span><br><span class="line">           ancestor.val &lt; p.val &amp;&amp; ancestor.val &lt; q.val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ancestor.val &gt; p.val) &#123;</span><br><span class="line">            ancestor = ancestor.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ancestor = ancestor.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ancestor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最近公共祖先-力扣-236-题"><a href="#二叉树的最近公共祖先-力扣-236-题" class="headerlink" title="二叉树的最近公共祖先-力扣 236 题"></a>二叉树的最近公共祖先-力扣 236 题</h3><h3 id="二叉树展开为链表-力扣-114-题"><a href="#二叉树展开为链表-力扣-114-题" class="headerlink" title="二叉树展开为链表-力扣 114 题"></a>二叉树展开为链表-力扣 114 题</h3><h3 id="有序数组构造平衡二叉搜索树-力扣-108-题"><a href="#有序数组构造平衡二叉搜索树-力扣-108-题" class="headerlink" title="有序数组构造平衡二叉搜索树-力扣 108 题"></a>有序数组构造平衡二叉搜索树-力扣 108 题</h3><h3 id="二叉搜索树变为平衡-力扣-1382-题"><a href="#二叉搜索树变为平衡-力扣-1382-题" class="headerlink" title="二叉搜索树变为平衡-力扣  1382 题"></a>二叉搜索树变为平衡-力扣  1382 题</h3><h2 id="2-hash-表"><a href="#2-hash-表" class="headerlink" title="2. hash 表"></a>2. hash 表</h2><h3 id="E01-两数之和-力扣-1-题"><a href="#E01-两数之和-力扣-1-题" class="headerlink" title="E01. 两数之和-力扣 1 题"></a>E01. 两数之和-力扣 1 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E01Leetcode1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(k)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, map.get(k)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：题目明确说明<strong>只会存在一个有效答案</strong>，因此不会执行到最后的 return null</li></ul><h3 id="E02-无重复字符的最长字串-力扣-3-题"><a href="#E02-无重复字符的最长字串-力扣-3-题" class="headerlink" title="E02. 无重复字符的最长字串-力扣 3 题"></a>E02. 无重复字符的最长字串-力扣 3 题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(ch)) &#123; <span class="comment">// 重复时调整 begin</span></span><br><span class="line">            begin = Math.max(begin, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">            map.put(ch, end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不重复</span></span><br><span class="line">            map.put(ch, end);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.substring(begin, end + <span class="number">1</span>));</span><br><span class="line">        maxLength = Math.max(maxLength, end - begin + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>begin 调整时的解释，遇到重复的 begin 应该向右调整，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abca</span><br></pre></td></tr></table></figure><ul><li>遇到重复的 a，这时 begin 应该调整到上个重复字符 a 索引加 1 处，即 map.get(‘a’) + 1 &#x3D; 1，</li></ul><p>但还有一种情况需要考虑，就是连续遇到两次重复，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abba</span><br></pre></td></tr></table></figure><ul><li>遇到重复的 b，这时 begin 应该调整到上个重复字符 b 索引加 1 处，即 map.get(‘b’) + 1 &#x3D; 2</li><li>不过接下来，又遇到了重复的 a，此时若还执行 map.get(‘a’) + 1 &#x3D; 1，则 begin 相当于向左退了，不对</li><li>应该是 Math.max(2, map.get(‘a’) + 1)，即 begin 应该是两个重复字符索引中更靠右者</li></ul><p>题目中说明 s 由英文字母、数字、符号和空格组成，因此它的范围是有限的（在 0 ~127 之内），可以用数组来替代 HashMap 优化，如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">    Arrays.fill(map, -<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line">        <span class="keyword">if</span> (map[ch] != -<span class="number">1</span>) &#123; <span class="comment">// 重复时调整 begin</span></span><br><span class="line">            begin = Math.max(begin, map[ch] + <span class="number">1</span>);</span><br><span class="line">            map[ch] = end;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不重复</span></span><br><span class="line">            map[ch] = end;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s.substring(begin, end + <span class="number">1</span>));</span><br><span class="line">        maxLength = Math.max(maxLength, end - begin + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E03-字母异位词分组-力扣-49-题"><a href="#E03-字母异位词分组-力扣-49-题" class="headerlink" title="E03. 字母异位词分组-力扣 49 题"></a>E03. 字母异位词分组-力扣 49 题</h3><p>解法1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        List&lt;String&gt; strings = map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        strings.add(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrayKey</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] key = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayKey</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            key[ch - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayKey</span> <span class="variable">arrayKey</span> <span class="operator">=</span> (ArrayKey) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(key, arrayKey.key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    HashMap&lt;ArrayKey, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        List&lt;String&gt; strings = map.computeIfAbsent(<span class="keyword">new</span> <span class="title class_">ArrayKey</span>(str), k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        strings.add(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E04-判断有没有重复元素-力扣-217"><a href="#E04-判断有没有重复元素-力扣-217" class="headerlink" title="E04. 判断有没有重复元素-力扣 217"></a>E04. 判断有没有重复元素-力扣 217</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123; <span class="comment">// 5ms</span></span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> key : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E05-找出出现一次的数字-力扣-136"><a href="#E05-找出出现一次的数字-力扣-136" class="headerlink" title="E05. 找出出现一次的数字-力扣 136"></a>E05. 找出出现一次的数字-力扣 136</h3><p>解法1：用 HashSet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">            set.remove(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> set.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>])[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2：用 xor</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        num = num ^ nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E06-判断字母异位词-力扣-242"><a href="#E06-判断字母异位词-力扣-242" class="headerlink" title="E06. 判断字母异位词-力扣 242"></a>E06. 判断字母异位词-力扣 242</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123; <span class="comment">// 1ms</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.equals(getKey(s), getKey(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getKey(String s) &#123;</span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : chars) &#123;</span><br><span class="line">        array[ch - <span class="number">97</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中用 s.toCharArray() 性能明显高于用 s.charAt() 一个个获取字符</li></ul><h3 id="E07-第一个不重复字符-力扣-387"><a href="#E07-第一个不重复字符-力扣-387" class="headerlink" title="E07. 第一个不重复字符-力扣 387"></a>E07. 第一个不重复字符-力扣 387</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : chars) &#123;</span><br><span class="line">        array[ch-<span class="number">97</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        <span class="keyword">if</span> (array[ch - <span class="number">97</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E08-出现次数最多的单词-力扣-819"><a href="#E08-出现次数最多的单词-力扣-819" class="headerlink" title="E08. 出现次数最多的单词-力扣 819"></a>E08. 出现次数最多的单词-力扣 819</h3><p>简洁解法 14 ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; banSet = Set.of(banned);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">String[] split = paragraph.toLowerCase().split(<span class="string">&quot;[^A-Za-z]+&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : split) &#123;</span><br><span class="line">        <span class="keyword">if</span>(banSet.contains(key)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.compute(key, (k, v) -&gt; v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">Optional&lt;Map.Entry&lt;String, Integer&gt;&gt; optional = map.entrySet().stream().max(Map.Entry.comparingByValue());</span><br><span class="line">    <span class="keyword">return</span> optional.map(Map.Entry::getKey).orElse(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后两行避免 lambda，12 ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; banSet = Set.of(banned);</span><br><span class="line">    String[] split = paragraph.toLowerCase().split(<span class="string">&quot;[^A-Za-z]+&quot;</span>);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String key : split) &#123;</span><br><span class="line">        <span class="keyword">if</span>(banSet.contains(key)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.compute(key, (k, v) -&gt; v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.entrySet()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">        <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">            max = value;</span><br><span class="line">            maxKey = e.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免正则匹配 5ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; banSet = Set.of(banned);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] chars = paragraph.toLowerCase().toCharArray();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            put(banSet, map, sb);</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    put(banSet, map, sb);</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.entrySet()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">        <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">            max = value;</span><br><span class="line">            maxKey = e.getKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Set&lt;String&gt; banSet, HashMap&lt;String, Integer&gt; map, StringBuilder sb)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sb.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        <span class="keyword">if</span>(!banSet.contains(key)) &#123;</span><br><span class="line">            map.compute(key, (k, v) -&gt; v == <span class="literal">null</span> ? <span class="number">1</span> : v + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sb 避免每次新建 4ms</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sb.setLength(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="E09-Leetcode105Improved"><a href="#E09-Leetcode105Improved" class="headerlink" title="E09. Leetcode105Improved"></a>E09. Leetcode105Improved</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E09Leetcode105Improved</span> &#123;</span><br><span class="line">    <span class="comment">//  用 hashmap 改善查找性能，其中 key 是 inOrder 值， value 是 inOrder 索引</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preOrder, <span class="type">int</span>[] inOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">            map.put(inOrder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(preOrder, <span class="number">0</span>, <span class="number">0</span>, inOrder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preBegin 决定了每次在 preOrder 中找到根元素</span></span><br><span class="line">    <span class="comment">// inBegin 和 inEnd 可以用来获取区间内元素个数，结束递归等</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] preOrder, <span class="type">int</span> preBegin, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt; inEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> preOrder[preBegin];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> map.get(rootValue);</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> i - inBegin;</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; left[&quot;</span> + (preBegin + <span class="number">1</span>) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + inBegin + <span class="string">&quot;~&quot;</span> + (i - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; right[&quot;</span> + (preBegin + <span class="number">1</span> + leftSize) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;~&quot;</span> + inEnd + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        root.left = helper(preOrder, preBegin + <span class="number">1</span>, inBegin, i - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(preOrder, preBegin + <span class="number">1</span> + leftSize, i + <span class="number">1</span>, inEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] preOrder = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] inOrder = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        例如：</span></span><br><span class="line"><span class="comment">        根据根节点[1] 到中序遍历数组中一分为2，首次递归</span></span><br><span class="line"><span class="comment">            [1] 2  4  3  6  7  前</span></span><br><span class="line"><span class="comment">            0   1  2  3  4  5  前索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            4  2  [1] 6  3  7  中</span></span><br><span class="line"><span class="comment">            0  1  2   3  4  5  中索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            确定 preOrder 中 left 和 right 的递归起始索引，当然也要确定 inOrder 对应的两个索引位置</span></span><br><span class="line"><span class="comment">                left    right</span></span><br><span class="line"><span class="comment">            1   [2]  4  [3]  6  7  前</span></span><br><span class="line"><span class="comment">            0   1    2  3    4  5  前索引</span></span><br><span class="line"><span class="comment">            left  inOrder 索引范围： 0~1</span></span><br><span class="line"><span class="comment">            right inOrder 索引范围： 3~5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E09Leetcode105Improved</span>().buildTree(preOrder, inOrder);</span><br><span class="line">        System.out.println(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E10-E10Leetcode106Improved"><a href="#E10-E10Leetcode106Improved" class="headerlink" title="E10. E10Leetcode106Improved"></a>E10. E10Leetcode106Improved</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E10Leetcode106Improved</span> &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inOrder, <span class="type">int</span>[] postOrder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inOrder.length; i++) &#123;</span><br><span class="line">            map.put(inOrder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(postOrder, postOrder.length - <span class="number">1</span>, <span class="number">0</span>, inOrder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        inOrder = &#123;4,2,1,6,3,7&#125;</span></span><br><span class="line"><span class="comment">        postOrder = &#123;4,2,6,7,3,1&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] postOrder, <span class="type">int</span> postEnd, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt; inEnd) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootValue</span> <span class="operator">=</span> postOrder[postEnd];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> map.get(rootValue);</span><br><span class="line"><span class="comment">//        int leftSize = i - inBegin;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightSize</span> <span class="operator">=</span> inEnd - i;</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; left[&quot;</span> + (postEnd - <span class="number">1</span> - rightSize) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + inBegin + <span class="string">&quot;~&quot;</span> + (i - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素：&quot;</span> + rootValue + <span class="string">&quot; right[&quot;</span> + (postEnd - <span class="number">1</span>) + <span class="string">&quot;] inOrder 索引范围[&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;~&quot;</span> + inEnd + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        root.left = helper(postOrder, postEnd - <span class="number">1</span> - rightSize, inBegin, i - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(postOrder, postEnd - <span class="number">1</span>, i + <span class="number">1</span>, inEnd);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] postOrder = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] inOrder = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E10Leetcode106Improved</span>().buildTree(inOrder, postOrder);</span><br><span class="line">        System.out.println(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jhcgnb.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      
      <category domain="https://jhcgnb.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%952/">数据结构与算法2</category>
      
      
      <comments>https://jhcgnb.cn/posts/ba945d0d/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
